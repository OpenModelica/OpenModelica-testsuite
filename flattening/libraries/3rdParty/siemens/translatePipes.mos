// name:     translate Pipes
// keywords: SiemensPower Pipes
// status:   correct
// teardown_command: rm -rf SiemensPower.Components.Pipes.Tests.tube* _SiemensPower.Components.Pipes.Tests.tube
//
//  Test SiemensPower component Pipes
//  TODO: check small differences in SH.qMetalFluidDelayed[1]
//

loadModel(SiemensPower,{"2.1 beta"});
getErrorString();

// test simple model
translateModel(SiemensPower.Components.Pipes.Tests.tubeTest, stopTime=2000, method="dassl", cflags="-L./TTSE_libs/", simflags="-iim none -iif ./ResultFiles/tubeTest.mat");
getErrorString();

// test full model
translateModel(SiemensPower.Components.Pipes.Tests.tube_ownMedia_test, stopTime=2000, method="dassl", cflags="-L./TTSE_libs/", simflags="-iim none -iif ./ResultFiles/tube_ownMedia_test.mat");
getErrorString();

// Result:
// true
// ""
// true
// "Warning: Alias set with different nominal values
//  * candidate: SH.portIn.p(nominal = 100000.0)
//  * candidate: watersource_ph.port.p(nominal = 100000.0)
//  * candidate: watersource_ph.p(nominal = 500000.0)
// => select value from watersource_ph.p(nominal = 500000.0) for variable: timeTable2.C1signal.y
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[3](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[3].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[3].T(nominal = 300.0)
//  * candidate: SH.heatport.port[3].T(nominal = 300.0)
// => select value from SH.TWall[3](nominal = 400.0) for variable: SH.heatport.TWall[3]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[2](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[2].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[2].T(nominal = 300.0)
//  * candidate: SH.heatport.port[2].T(nominal = 300.0)
// => select value from SH.TWall[2](nominal = 400.0) for variable: SH.heatport.TWall[2]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[1](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[1].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[1].T(nominal = 300.0)
//  * candidate: SH.heatport.port[1].T(nominal = 300.0)
// => select value from SH.TWall[1](nominal = 400.0) for variable: SH.heatport.TWall[1]
// Warning: Alias set with several free start values
//  * candidate: SH.h[3](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 3)[3])
//  * candidate: SH.portOut.h_outflow(start = SH.hOut_start)
// => select value from SH.h[3](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 3)[3]) for variable: SH.h[3]
// Warning: Alias set with several free start values
//  * candidate: SH.h[1](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 3)[1])
//  * candidate: SH.portIn.h_outflow(start = SH.hIn_start)
// => select value from SH.h[1](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 3)[1]) for variable: SH.h[1]
// "
// true
// "Warning: Alias set with different nominal values
//  * candidate: SH.portIn.p(nominal = 100000.0)
//  * candidate: watersource_ph.port.p(nominal = 100000.0)
//  * candidate: watersource_ph.p(nominal = 500000.0)
// => select value from watersource_ph.p(nominal = 500000.0) for variable: timeTable2.C1signal.y
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[10](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[10].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[10].T(nominal = 300.0)
//  * candidate: SH.heatport.port[10].T(nominal = 300.0)
// => select value from SH.TWall[10](nominal = 400.0) for variable: SH.heatport.TWall[10]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[9](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[9].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[9].T(nominal = 300.0)
//  * candidate: SH.heatport.port[9].T(nominal = 300.0)
// => select value from SH.TWall[9](nominal = 400.0) for variable: SH.heatport.TWall[9]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[8](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[8].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[8].T(nominal = 300.0)
//  * candidate: SH.heatport.port[8].T(nominal = 300.0)
// => select value from SH.TWall[8](nominal = 400.0) for variable: SH.heatport.TWall[8]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[7](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[7].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[7].T(nominal = 300.0)
//  * candidate: SH.heatport.port[7].T(nominal = 300.0)
// => select value from SH.TWall[7](nominal = 400.0) for variable: SH.heatport.TWall[7]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[6](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[6].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[6].T(nominal = 300.0)
//  * candidate: SH.heatport.port[6].T(nominal = 300.0)
// => select value from SH.TWall[6](nominal = 400.0) for variable: SH.heatport.TWall[6]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[5](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[5].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[5].T(nominal = 300.0)
//  * candidate: SH.heatport.port[5].T(nominal = 300.0)
// => select value from SH.TWall[5](nominal = 400.0) for variable: SH.heatport.TWall[5]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[4](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[4].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[4].T(nominal = 300.0)
//  * candidate: SH.heatport.port[4].T(nominal = 300.0)
// => select value from SH.TWall[4](nominal = 400.0) for variable: SH.heatport.TWall[4]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[3](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[3].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[3].T(nominal = 300.0)
//  * candidate: SH.heatport.port[3].T(nominal = 300.0)
// => select value from SH.TWall[3](nominal = 400.0) for variable: SH.heatport.TWall[3]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[2](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[2].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[2].T(nominal = 300.0)
//  * candidate: SH.heatport.port[2].T(nominal = 300.0)
// => select value from SH.TWall[2](nominal = 400.0) for variable: SH.heatport.TWall[2]
// Warning: Alias set with different nominal values
//  * candidate: SH.TWall[1](nominal = 400.0)
//  * candidate: SH.wall.layer[1].port_int[1].T(nominal = 300.0)
//  * candidate: SH.wall.port_int[1].T(nominal = 300.0)
//  * candidate: SH.heatport.port[1].T(nominal = 300.0)
// => select value from SH.TWall[1](nominal = 400.0) for variable: SH.heatport.TWall[1]
// Warning: Alias set with several free start values
//  * candidate: SH.h[10](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 10)[10])
//  * candidate: SH.portOut.h_outflow(start = SH.hOut_start)
// => select value from SH.h[10](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 10)[10]) for variable: SH.h[10]
// Warning: Alias set with several free start values
//  * candidate: SH.h[1](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 10)[1])
//  * candidate: SH.portIn.h_outflow(start = SH.hIn_start)
// => select value from SH.h[1](start = SiemensPower.Utilities.Functions.my_linspace(SH.hIn_start, SH.hOut_start, 10)[1]) for variable: SH.h[1]
// Warning: Alias set with several free start values
//  * candidate: ECO.portOut.p(start = ECO.pOut_start)
//  * candidate: EVA.portIn.p(start = EVA.pIn_start)
// => select value from ECO.portOut.p(start = ECO.pOut_start) for variable: ECO.portOut.p
// Warning: Alias set with different nominal values
//  * candidate: ECO.portIn.p(nominal = 100000.0)
//  * candidate: watersource_mh.port.p(nominal = 100000.0)
//  * candidate: watersource_mh.p(nominal = 500000.0)
// => select value from watersource_mh.p(nominal = 500000.0) for variable: watersource_mh.p
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[10](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[10].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[10].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[10].T(nominal = 300.0)
// => select value from ECO.TWall[10](nominal = 400.0) for variable: ECO.heatport.TWall[10]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[9](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[9].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[9].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[9].T(nominal = 300.0)
// => select value from ECO.TWall[9](nominal = 400.0) for variable: ECO.heatport.TWall[9]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[8](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[8].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[8].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[8].T(nominal = 300.0)
// => select value from ECO.TWall[8](nominal = 400.0) for variable: ECO.heatport.TWall[8]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[7](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[7].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[7].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[7].T(nominal = 300.0)
// => select value from ECO.TWall[7](nominal = 400.0) for variable: ECO.heatport.TWall[7]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[6](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[6].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[6].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[6].T(nominal = 300.0)
// => select value from ECO.TWall[6](nominal = 400.0) for variable: ECO.heatport.TWall[6]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[5](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[5].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[5].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[5].T(nominal = 300.0)
// => select value from ECO.TWall[5](nominal = 400.0) for variable: ECO.heatport.TWall[5]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[4](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[4].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[4].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[4].T(nominal = 300.0)
// => select value from ECO.TWall[4](nominal = 400.0) for variable: ECO.heatport.TWall[4]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[3](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[3].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[3].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[3].T(nominal = 300.0)
// => select value from ECO.TWall[3](nominal = 400.0) for variable: ECO.heatport.TWall[3]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[2](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[2].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[2].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[2].T(nominal = 300.0)
// => select value from ECO.TWall[2](nominal = 400.0) for variable: ECO.heatport.TWall[2]
// Warning: Alias set with different nominal values
//  * candidate: ECO.TWall[1](nominal = 400.0)
//  * candidate: ECO.wall.layer[1].port_int[1].T(nominal = 300.0)
//  * candidate: ECO.wall.port_int[1].T(nominal = 300.0)
//  * candidate: ECO.heatport.port[1].T(nominal = 300.0)
// => select value from ECO.TWall[1](nominal = 400.0) for variable: ECO.heatport.TWall[1]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[20](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[20].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[20].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[20].T(nominal = 300.0)
// => select value from EVA.TWall[20](nominal = 400.0) for variable: EVA.heatport.TWall[20]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[19](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[19].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[19].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[19].T(nominal = 300.0)
// => select value from EVA.TWall[19](nominal = 400.0) for variable: EVA.heatport.TWall[19]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[18](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[18].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[18].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[18].T(nominal = 300.0)
// => select value from EVA.TWall[18](nominal = 400.0) for variable: EVA.heatport.TWall[18]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[17](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[17].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[17].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[17].T(nominal = 300.0)
// => select value from EVA.TWall[17](nominal = 400.0) for variable: EVA.heatport.TWall[17]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[16](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[16].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[16].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[16].T(nominal = 300.0)
// => select value from EVA.TWall[16](nominal = 400.0) for variable: EVA.heatport.TWall[16]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[15](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[15].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[15].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[15].T(nominal = 300.0)
// => select value from EVA.TWall[15](nominal = 400.0) for variable: EVA.heatport.TWall[15]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[14](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[14].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[14].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[14].T(nominal = 300.0)
// => select value from EVA.TWall[14](nominal = 400.0) for variable: EVA.heatport.TWall[14]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[13](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[13].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[13].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[13].T(nominal = 300.0)
// => select value from EVA.TWall[13](nominal = 400.0) for variable: EVA.heatport.TWall[13]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[12](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[12].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[12].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[12].T(nominal = 300.0)
// => select value from EVA.TWall[12](nominal = 400.0) for variable: EVA.heatport.TWall[12]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[11](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[11].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[11].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[11].T(nominal = 300.0)
// => select value from EVA.TWall[11](nominal = 400.0) for variable: EVA.heatport.TWall[11]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[10](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[10].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[10].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[10].T(nominal = 300.0)
// => select value from EVA.TWall[10](nominal = 400.0) for variable: EVA.heatport.TWall[10]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[9](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[9].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[9].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[9].T(nominal = 300.0)
// => select value from EVA.TWall[9](nominal = 400.0) for variable: EVA.heatport.TWall[9]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[8](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[8].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[8].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[8].T(nominal = 300.0)
// => select value from EVA.TWall[8](nominal = 400.0) for variable: EVA.heatport.TWall[8]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[7](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[7].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[7].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[7].T(nominal = 300.0)
// => select value from EVA.TWall[7](nominal = 400.0) for variable: EVA.heatport.TWall[7]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[6](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[6].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[6].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[6].T(nominal = 300.0)
// => select value from EVA.TWall[6](nominal = 400.0) for variable: EVA.heatport.TWall[6]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[5](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[5].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[5].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[5].T(nominal = 300.0)
// => select value from EVA.TWall[5](nominal = 400.0) for variable: EVA.heatport.TWall[5]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[4](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[4].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[4].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[4].T(nominal = 300.0)
// => select value from EVA.TWall[4](nominal = 400.0) for variable: EVA.heatport.TWall[4]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[3](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[3].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[3].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[3].T(nominal = 300.0)
// => select value from EVA.TWall[3](nominal = 400.0) for variable: EVA.heatport.TWall[3]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[2](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[2].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[2].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[2].T(nominal = 300.0)
// => select value from EVA.TWall[2](nominal = 400.0) for variable: EVA.heatport.TWall[2]
// Warning: Alias set with different nominal values
//  * candidate: EVA.TWall[1](nominal = 400.0)
//  * candidate: EVA.wall.layer[1].port_int[1].T(nominal = 300.0)
//  * candidate: EVA.wall.port_int[1].T(nominal = 300.0)
//  * candidate: EVA.heatport.port[1].T(nominal = 300.0)
// => select value from EVA.TWall[1](nominal = 400.0) for variable: EVA.heatport.TWall[1]
// Warning: Alias set with several free start values
//  * candidate: ECO.h[10](start = SiemensPower.Utilities.Functions.my_linspace(ECO.hIn_start, ECO.hOut_start, 10)[10])
//  * candidate: ECO.portOut.h_outflow(start = ECO.hOut_start)
// => select value from ECO.h[10](start = SiemensPower.Utilities.Functions.my_linspace(ECO.hIn_start, ECO.hOut_start, 10)[10]) for variable: ECO.h[10]
// Warning: Alias set with several free start values
//  * candidate: ECO.h[1](start = SiemensPower.Utilities.Functions.my_linspace(ECO.hIn_start, ECO.hOut_start, 10)[1])
//  * candidate: ECO.portIn.h_outflow(start = ECO.hIn_start)
// => select value from ECO.h[1](start = SiemensPower.Utilities.Functions.my_linspace(ECO.hIn_start, ECO.hOut_start, 10)[1]) for variable: ECO.h[1]
// Warning: Alias set with several free start values
//  * candidate: EVA.h[20](start = SiemensPower.Utilities.Functions.my_linspace(EVA.hIn_start, EVA.hOut_start, 20)[20])
//  * candidate: EVA.portOut.h_outflow(start = EVA.hOut_start)
// => select value from EVA.h[20](start = SiemensPower.Utilities.Functions.my_linspace(EVA.hIn_start, EVA.hOut_start, 20)[20]) for variable: EVA.h[20]
// Warning: Alias set with several free start values
//  * candidate: EVA.h[1](start = SiemensPower.Utilities.Functions.my_linspace(EVA.hIn_start, EVA.hOut_start, 20)[1])
//  * candidate: EVA.portIn.h_outflow(start = EVA.hIn_start)
// => select value from EVA.h[1](start = SiemensPower.Utilities.Functions.my_linspace(EVA.hIn_start, EVA.hOut_start, 20)[1]) for variable: EVA.h[1]
// "
// endResult
