// name: dumpTransformedModelica.mos
// keywords: omc debug dump
// status: correct
// 
// omc debug dump: +d=dumpTransformedModelica
// 

loadModel(Modelica, {"3.2"}); getErrorString();
setDebugFlags("dumpTransformedModelica"); getErrorString();
buildModel(Modelica.Mechanics.MultiBody.Examples.Systems.RobotR3.fullRobot); getErrorString();

// Result:
// true
// ""
// true
// ""
// {"Modelica.Mechanics.MultiBody.Examples.Systems.RobotR3.fullRobot","Modelica.Mechanics.MultiBody.Examples.Systems.RobotR3.fullRobot_init.xml"}
// "Notification: The following Modelica-like model represents the back-end DAE for the 'dumpindxdae' stage:
// /* This is probably not complete. */
// model Modelica.Mechanics.MultiBody.Examples.Systems.RobotR3.fullRobot
//   /* system #1 */
//   Integer axis6._gear._bearingFriction._mode(start=3, fixed=true, );
//   Real axis6._gear._bearingFriction._w();
//   Real axis6._gear._bearingFriction._tau();
//   Real axis6._gear._bearingFriction._lossPower();
//   Boolean axis6._gear._bearingFriction._locked(start=false, );
//   Boolean axis6._gear._bearingFriction._startBackward(start=false, fixed=true, );
//   Boolean axis6._gear._bearingFriction._startForward(start=false, fixed=true, );
//   Real axis6._gear._bearingFriction._sa();
//   Real axis6._gear._gear._flange_b._tau();
//   Real axis6._gear._flange_a._tau();
//   Real axis6._controller._PI._x(start=axis6.controller.PI.x_start, );
//   Real axis6._controller._PI._u();
//   Real axis6._controller._P._y();
//   Real axis6._controller._P._u();
//   Real axis6._controller._add3._u1();
//   Real axis6._controller._feedback1._u1();
//   Real axis6._motor._C._v(start=0.0, );
//   Real axis6._motor._La._p._v();
//   Real axis6._motor._La._i(start=0.0, );
//   Real axis6._motor._La._v();
//   Real axis6._motor._emf._phi();
//   Real axis6._motor._emf._v();
//   Real axis6._motor._Jmotor._w();
//   Real axis6._motor._Jmotor._a();
//   Real axis6._motor._Jmotor._flange_a._tau();
//   Real axis6._motor._convert1._y();
//   Real axis6._motor._g3._p._i();
//   Real axis6._motor._Rd3._LossPower();
//   Real axis6._motor._Rd3._v();
//   Real axis6._motor._Rd4._LossPower();
//   Real axis6._motor._Rd4._i();
//   Real axis6._motor._Rd4._v();
//   Real axis6._motor._Rp2._LossPower();
//   Real axis6._motor._Rp1._LossPower();
//   Real axis6._motor._Rp1._i();
//   Real axis6._motor._Rp1._v();
//   Real axis6._motor._Ri._LossPower();
//   Real axis6._motor._Ri._v();
//   Real axis6._motor._Rd1._LossPower();
//   Real axis6._motor._Rd1._i();
//   Real axis6._motor._Rd1._v();
//   Real axis6._motor._OpI._i2();
//   Real axis6._motor._Rd2._LossPower();
//   Real axis6._motor._Rd2._v();
//   Real axis6._motor._Ra._LossPower();
//   Real axis6._motor._Ra._v();
//   Real axis6._motor._power._i2();
//   Real axis6._motor._power._v2();
//   Real axis6._motor._diff._i2();
//   Real axis6._motor._Vs._v();
//   Real axis6._initializeFlange._set_w_start._flange._phi(start=0.0, );
//   Real axis6._initializeFlange._set_w_start._w_start();
//   Real axis6._initializeFlange._set_phi_start._flange._phi();
//   Real axis6._initializeFlange._set_phi_start._phi_start();
//   Real axis6._axisControlBus._current_ref();
//   Integer axis5._gear._bearingFriction._mode(start=3, fixed=true, );
//   Real axis5._gear._bearingFriction._w();
//   Real axis5._gear._bearingFriction._tau();
//   Real axis5._gear._bearingFriction._lossPower();
//   Boolean axis5._gear._bearingFriction._locked(start=false, );
//   Boolean axis5._gear._bearingFriction._startBackward(start=false, fixed=true, );
//   Boolean axis5._gear._bearingFriction._startForward(start=false, fixed=true, );
//   Real axis5._gear._bearingFriction._sa();
//   Real axis5._gear._gear._flange_b._tau();
//   Real axis5._gear._flange_a._tau();
//   Real axis5._controller._PI._x(start=axis5.controller.PI.x_start, );
//   Real axis5._controller._PI._u();
//   Real axis5._controller._P._y();
//   Real axis5._controller._P._u();
//   Real axis5._controller._add3._u1();
//   Real axis5._controller._feedback1._u1();
//   Real axis5._motor._C._v(start=0.0, );
//   Real axis5._motor._La._p._v();
//   Real axis5._motor._La._i(start=0.0, );
//   Real axis5._motor._La._v();
//   Real axis5._motor._emf._phi();
//   Real axis5._motor._emf._v();
//   Real axis5._motor._Jmotor._w();
//   Real axis5._motor._Jmotor._a();
//   Real axis5._motor._Jmotor._flange_a._tau();
//   Real axis5._motor._convert1._y();
//   Real axis5._motor._g3._p._i();
//   Real axis5._motor._Rd3._LossPower();
//   Real axis5._motor._Rd3._v();
//   Real axis5._motor._Rd4._LossPower();
//   Real axis5._motor._Rd4._i();
//   Real axis5._motor._Rd4._v();
//   Real axis5._motor._Rp2._LossPower();
//   Real axis5._motor._Rp1._LossPower();
//   Real axis5._motor._Rp1._i();
//   Real axis5._motor._Rp1._v();
//   Real axis5._motor._Ri._LossPower();
//   Real axis5._motor._Ri._v();
//   Real axis5._motor._Rd1._LossPower();
//   Real axis5._motor._Rd1._i();
//   Real axis5._motor._Rd1._v();
//   Real axis5._motor._OpI._i2();
//   Real axis5._motor._Rd2._LossPower();
//   Real axis5._motor._Rd2._v();
//   Real axis5._motor._Ra._LossPower();
//   Real axis5._motor._Ra._v();
//   Real axis5._motor._power._i2();
//   Real axis5._motor._power._v2();
//   Real axis5._motor._diff._i2();
//   Real axis5._motor._Vs._v();
//   Real axis5._initializeFlange._set_w_start._flange._phi(start=0.0, );
//   Real axis5._initializeFlange._set_w_start._w_start();
//   Real axis5._initializeFlange._set_phi_start._flange._phi();
//   Real axis5._initializeFlange._set_phi_start._phi_start();
//   Real axis5._axisControlBus._current_ref();
//   Integer axis4._gear._bearingFriction._mode(start=3, fixed=true, );
//   Real axis4._gear._bearingFriction._w();
//   Real axis4._gear._bearingFriction._tau();
//   Real axis4._gear._bearingFriction._lossPower();
//   Boolean axis4._gear._bearingFriction._locked(start=false, );
//   Boolean axis4._gear._bearingFriction._startBackward(start=false, fixed=true, );
//   Boolean axis4._gear._bearingFriction._startForward(start=false, fixed=true, );
//   Real axis4._gear._bearingFriction._sa();
//   Real axis4._gear._gear._flange_b._tau();
//   Real axis4._gear._flange_a._tau();
//   Real axis4._controller._PI._x(start=axis4.controller.PI.x_start, );
//   Real axis4._controller._PI._u();
//   Real axis4._controller._P._y();
//   Real axis4._controller._P._u();
//   Real axis4._controller._add3._u1();
//   Real axis4._controller._feedback1._u1();
//   Real axis4._motor._C._v(start=0.0, );
//   Real axis4._motor._La._p._v();
//   Real axis4._motor._La._i(start=0.0, );
//   Real axis4._motor._La._v();
//   Real axis4._motor._emf._phi();
//   Real axis4._motor._emf._v();
//   Real axis4._motor._Jmotor._w();
//   Real axis4._motor._Jmotor._a();
//   Real axis4._motor._Jmotor._flange_a._tau();
//   Real axis4._motor._convert1._y();
//   Real axis4._motor._g3._p._i();
//   Real axis4._motor._Rd3._LossPower();
//   Real axis4._motor._Rd3._v();
//   Real axis4._motor._Rd4._LossPower();
//   Real axis4._motor._Rd4._i();
//   Real axis4._motor._Rd4._v();
//   Real axis4._motor._Rp2._LossPower();
//   Real axis4._motor._Rp1._LossPower();
//   Real axis4._motor._Rp1._i();
//   Real axis4._motor._Rp1._v();
//   Real axis4._motor._Ri._LossPower();
//   Real axis4._motor._Ri._v();
//   Real axis4._motor._Rd1._LossPower();
//   Real axis4._motor._Rd1._i();
//   Real axis4._motor._Rd1._v();
//   Real axis4._motor._OpI._i2();
//   Real axis4._motor._Rd2._LossPower();
//   Real axis4._motor._Rd2._v();
//   Real axis4._motor._Ra._LossPower();
//   Real axis4._motor._Ra._v();
//   Real axis4._motor._power._i2();
//   Real axis4._motor._power._v2();
//   Real axis4._motor._diff._i2();
//   Real axis4._motor._Vs._v();
//   Real axis4._initializeFlange._set_w_start._flange._phi(start=0.0, );
//   Real axis4._initializeFlange._set_w_start._w_start();
//   Real axis4._initializeFlange._set_phi_start._flange._phi();
//   Real axis4._initializeFlange._set_phi_start._phi_start();
//   Real axis4._axisControlBus._current_ref();
//   Real axis3._gear._a_rel(start=0.0, );
//   Integer axis3._gear._bearingFriction._mode(start=3, fixed=true, );
//   Real axis3._gear._bearingFriction._w();
//   Real axis3._gear._bearingFriction._tau();
//   Real axis3._gear._bearingFriction._lossPower();
//   Boolean axis3._gear._bearingFriction._locked(start=false, );
//   Boolean axis3._gear._bearingFriction._startBackward(start=false, fixed=true, );
//   Boolean axis3._gear._bearingFriction._startForward(start=false, fixed=true, );
//   Real axis3._gear._bearingFriction._sa();
//   Real axis3._gear._spring._w_rel(start=0.0, );
//   Real axis3._gear._spring._phi_rel(start=0.0, nominal=if axis3.gear.spring.phi_nominal >= 1e-15 then axis3.gear.spring.phi_nominal else 1.0, );
//   Real axis3._gear._spring._tau_d();
//   Real axis3._gear._spring._tau_c();
//   Real axis3._gear._spring._lossPower();
//   Real axis3._gear._spring._tau();
//   Real axis3._gear._gear._phi_a();
//   Real axis3._gear._flange_a._tau();
//   Real axis3._controller._PI._x(start=axis3.controller.PI.x_start, );
//   Real axis3._controller._PI._u();
//   Real axis3._controller._P._y();
//   Real axis3._controller._P._u();
//   Real axis3._controller._add3._u1();
//   Real axis3._controller._feedback1._u1();
//   Real axis3._motor._C._v(start=0.0, );
//   Real axis3._motor._La._p._v();
//   Real axis3._motor._La._i(start=0.0, );
//   Real axis3._motor._La._v();
//   Real axis3._motor._emf._phi();
//   Real axis3._motor._emf._v();
//   Real axis3._motor._Jmotor._a();
//   Real axis3._motor._Jmotor._flange_a._tau();
//   Real axis3._motor._convert1._y();
//   Real axis3._motor._g3._p._i();
//   Real axis3._motor._Rd3._LossPower();
//   Real axis3._motor._Rd3._v();
//   Real axis3._motor._Rd4._LossPower();
//   Real axis3._motor._Rd4._i();
//   Real axis3._motor._Rd4._v();
//   Real axis3._motor._Rp2._LossPower();
//   Real axis3._motor._Rp1._LossPower();
//   Real axis3._motor._Rp1._i();
//   Real axis3._motor._Rp1._v();
//   Real axis3._motor._Ri._LossPower();
//   Real axis3._motor._Ri._v();
//   Real axis3._motor._Rd1._LossPower();
//   Real axis3._motor._Rd1._i();
//   Real axis3._motor._Rd1._v();
//   Real axis3._motor._OpI._i2();
//   Real axis3._motor._Rd2._LossPower();
//   Real axis3._motor._Rd2._v();
//   Real axis3._motor._Ra._LossPower();
//   Real axis3._motor._Ra._v();
//   Real axis3._motor._power._i2();
//   Real axis3._motor._power._v2();
//   Real axis3._motor._diff._i2();
//   Real axis3._motor._Vs._v();
//   Real axis3._initializeFlange._set_w_start._w_start();
//   Real axis3._initializeFlange._set_phi_start._flange._phi(start=0.0, );
//   Real axis3._initializeFlange._set_phi_start._phi_start();
//   Real axis3._axisControlBus._current_ref();
//   Real axis2._gear._a_rel(start=0.0, );
//   Integer axis2._gear._bearingFriction._mode(start=3, fixed=true, );
//   Real axis2._gear._bearingFriction._w();
//   Real axis2._gear._bearingFriction._tau();
//   Real axis2._gear._bearingFriction._lossPower();
//   Boolean axis2._gear._bearingFriction._locked(start=false, );
//   Boolean axis2._gear._bearingFriction._startBackward(start=false, fixed=true, );
//   Boolean axis2._gear._bearingFriction._startForward(start=false, fixed=true, );
//   Real axis2._gear._bearingFriction._sa();
//   Real axis2._gear._spring._w_rel(start=0.0, );
//   Real axis2._gear._spring._phi_rel(start=0.0, nominal=if axis2.gear.spring.phi_nominal >= 1e-15 then axis2.gear.spring.phi_nominal else 1.0, );
//   Real axis2._gear._spring._tau_d();
//   Real axis2._gear._spring._tau_c();
//   Real axis2._gear._spring._lossPower();
//   Real axis2._gear._spring._tau();
//   Real axis2._gear._gear._phi_a();
//   Real axis2._gear._flange_a._tau();
//   Real axis2._controller._PI._x(start=axis2.controller.PI.x_start, );
//   Real axis2._controller._PI._u();
//   Real axis2._controller._P._y();
//   Real axis2._controller._P._u();
//   Real axis2._controller._add3._u1();
//   Real axis2._controller._feedback1._u1();
//   Real axis2._motor._C._v(start=0.0, );
//   Real axis2._motor._La._p._v();
//   Real axis2._motor._La._i(start=0.0, );
//   Real axis2._motor._La._v();
//   Real axis2._motor._emf._phi();
//   Real axis2._motor._emf._v();
//   Real axis2._motor._Jmotor._a();
//   Real axis2._motor._Jmotor._flange_a._tau();
//   Real axis2._motor._convert1._y();
//   Real axis2._motor._g3._p._i();
//   Real axis2._motor._Rd3._LossPower();
//   Real axis2._motor._Rd3._v();
//   Real axis2._motor._Rd4._LossPower();
//   Real axis2._motor._Rd4._i();
//   Real axis2._motor._Rd4._v();
//   Real axis2._motor._Rp2._LossPower();
//   Real axis2._motor._Rp1._LossPower();
//   Real axis2._motor._Rp1._i();
//   Real axis2._motor._Rp1._v();
//   Real axis2._motor._Ri._LossPower();
//   Real axis2._motor._Ri._v();
//   Real axis2._motor._Rd1._LossPower();
//   Real axis2._motor._Rd1._i();
//   Real axis2._motor._Rd1._v();
//   Real axis2._motor._OpI._i2();
//   Real axis2._motor._Rd2._LossPower();
//   Real axis2._motor._Rd2._v();
//   Real axis2._motor._Ra._LossPower();
//   Real axis2._motor._Ra._v();
//   Real axis2._motor._power._i2();
//   Real axis2._motor._power._v2();
//   Real axis2._motor._diff._i2();
//   Real axis2._motor._Vs._v();
//   Real axis2._initializeFlange._set_w_start._w_start();
//   Real axis2._initializeFlange._set_phi_start._flange._phi(start=0.0, );
//   Real axis2._initializeFlange._set_phi_start._phi_start();
//   Real axis2._axisControlBus._current_ref();
//   Real axis1._gear._a_rel(start=0.0, );
//   Integer axis1._gear._bearingFriction._mode(start=3, fixed=true, );
//   Real axis1._gear._bearingFriction._w();
//   Real axis1._gear._bearingFriction._tau();
//   Real axis1._gear._bearingFriction._lossPower();
//   Boolean axis1._gear._bearingFriction._locked(start=false, );
//   Boolean axis1._gear._bearingFriction._startBackward(start=false, fixed=true, );
//   Boolean axis1._gear._bearingFriction._startForward(start=false, fixed=true, );
//   Real axis1._gear._bearingFriction._sa();
//   Real axis1._gear._spring._w_rel(start=0.0, );
//   Real axis1._gear._spring._phi_rel(start=0.0, nominal=if axis1.gear.spring.phi_nominal >= 1e-15 then axis1.gear.spring.phi_nominal else 1.0, );
//   Real axis1._gear._spring._tau_d();
//   Real axis1._gear._spring._tau_c();
//   Real axis1._gear._spring._lossPower();
//   Real axis1._gear._spring._tau();
//   Real axis1._gear._gear._phi_a();
//   Real axis1._gear._flange_a._tau();
//   Real axis1._controller._PI._x(start=axis1.controller.PI.x_start, );
//   Real axis1._controller._PI._u();
//   Real axis1._controller._P._y();
//   Real axis1._controller._P._u();
//   Real axis1._controller._add3._u1();
//   Real axis1._controller._feedback1._u1();
//   Real axis1._motor._C._v(start=0.0, );
//   Real axis1._motor._La._p._v();
//   Real axis1._motor._La._i(start=0.0, );
//   Real axis1._motor._La._v();
//   Real axis1._motor._emf._phi();
//   Real axis1._motor._emf._v();
//   Real axis1._motor._Jmotor._a();
//   Real axis1._motor._Jmotor._flange_a._tau();
//   Real axis1._motor._convert1._y();
//   Real axis1._motor._g3._p._i();
//   Real axis1._motor._Rd3._LossPower();
//   Real axis1._motor._Rd3._v();
//   Real axis1._motor._Rd4._LossPower();
//   Real axis1._motor._Rd4._i();
//   Real axis1._motor._Rd4._v();
//   Real axis1._motor._Rp2._LossPower();
//   Real axis1._motor._Rp1._LossPower();
//   Real axis1._motor._Rp1._i();
//   Real axis1._motor._Rp1._v();
//   Real axis1._motor._Ri._LossPower();
//   Real axis1._motor._Ri._v();
//   Real axis1._motor._Rd1._LossPower();
//   Real axis1._motor._Rd1._i();
//   Real axis1._motor._Rd1._v();
//   Real axis1._motor._OpI._i2();
//   Real axis1._motor._Rd2._LossPower();
//   Real axis1._motor._Rd2._v();
//   Real axis1._motor._Ra._LossPower();
//   Real axis1._motor._Ra._v();
//   Real axis1._motor._power._i2();
//   Real axis1._motor._power._v2();
//   Real axis1._motor._diff._i2();
//   Real axis1._motor._Vs._v();
//   Real axis1._initializeFlange._set_w_start._w_start();
//   Real axis1._initializeFlange._set_phi_start._flange._phi(start=0.0, );
//   Real axis1._initializeFlange._set_phi_start._phi_start();
//   Real axis1._axisControlBus._current_ref();
//   Boolean pathPlanning._terminateSimulation._condition();
//   Real pathPlanning._path._sd();
//   Real pathPlanning._path._s();
//   Real pathPlanning._path._sdd();
//   Boolean pathPlanning._pathToAxis6._moving[6]();
//   Real pathPlanning._pathToAxis6._qdd[6]();
//   Real pathPlanning._pathToAxis5._qdd[5]();
//   Real pathPlanning._pathToAxis3._qdd[3]();
//   Real pathPlanning._pathToAxis2._qdd[2]();
//   Real pathPlanning._pathToAxis1._qdd[1]();
//   Real mechanics._load._body._z_a[3](start=mechanics.b6.body.z_0_start[3], fixed=false, );
//   Real mechanics._load._body._z_a[2](start=mechanics.b6.body.z_0_start[2], fixed=false, );
//   Real mechanics._load._body._z_a[1](start=mechanics.b6.body.z_0_start[1], fixed=false, );
//   Real mechanics._load._body._g_0[3]();
//   Real mechanics._load._body._g_0[2]();
//   Real mechanics._load._body._g_0[1]();
//   Real mechanics._load._body._frame_a._r_0[3](start=0.0, );
//   Real mechanics._load._body._frame_a._r_0[2](start=0.0, );
//   Real mechanics._load._body._frame_a._r_0[1](start=0.0, );
//   Real mechanics._load._v_0[3](start=0.0, );
//   Real mechanics._load._v_0[2](start=0.0, );
//   Real mechanics._load._v_0[1](start=0.0, );
//   Real mechanics._load._a_0[3](start=0.0, );
//   Real mechanics._load._a_0[2](start=0.0, );
//   Real mechanics._load._a_0[1](start=0.0, );
//   Real mechanics._load._frame_b._r_0[3]();
//   Real mechanics._load._frame_b._r_0[2]();
//   Real mechanics._load._frame_b._r_0[1]();
//   Real mechanics._b6._body._w_a[3](start=mechanics.load.body.w_0_start[3], fixed=false, );
//   Real mechanics._b6._body._w_a[2](start=mechanics.load.body.w_0_start[2], fixed=false, );
//   Real mechanics._b6._body._w_a[1](start=mechanics.load.body.w_0_start[1], fixed=false, );
//   Real mechanics._b6._body._g_0[3]();
//   Real mechanics._b6._body._g_0[2]();
//   Real mechanics._b6._body._g_0[1]();
//   Real mechanics._b6._body._frame_a._t[3]();
//   Real mechanics._b6._body._frame_a._t[2]();
//   Real mechanics._b6._body._frame_a._t[1]();
//   Real mechanics._b6._body._frame_a._f[3]();
//   Real mechanics._b6._body._frame_a._f[2]();
//   Real mechanics._b6._body._frame_a._f[1]();
//   Real mechanics._b6._body._frame_a._r_0[3](start=0.0, );
//   Real mechanics._b6._body._frame_a._r_0[2](start=0.0, );
//   Real mechanics._b6._body._frame_a._r_0[1](start=0.0, );
//   Real mechanics._b6._v_0[3](start=0.0, );
//   Real mechanics._b6._v_0[2](start=0.0, );
//   Real mechanics._b6._v_0[1](start=0.0, );
//   Real mechanics._b6._frameTranslation._frame_a._t[3]();
//   Real mechanics._b6._frameTranslation._frame_a._t[2]();
//   Real mechanics._b6._frameTranslation._frame_a._t[1]();
//   Real mechanics._b6._a_0[3](start=0.0, );
//   Real mechanics._b6._a_0[2](start=0.0, );
//   Real mechanics._b6._a_0[1](start=0.0, );
//   Real mechanics._b6._frame_b._t[3]();
//   Real mechanics._b6._frame_b._t[2]();
//   Real mechanics._b6._frame_b._t[1]();
//   Real mechanics._b6._frame_b._f[3]();
//   Real mechanics._b6._frame_b._f[2]();
//   Real mechanics._b6._frame_b._f[1]();
//   Real mechanics._b6._frame_b._R._T[3,3]();
//   Real mechanics._b6._frame_b._R._T[3,2]();
//   Real mechanics._b6._frame_b._R._T[3,1]();
//   Real mechanics._b6._frame_b._R._T[2,3]();
//   Real mechanics._b6._frame_b._R._T[2,2]();
//   Real mechanics._b6._frame_b._R._T[2,1]();
//   Real mechanics._b6._frame_b._R._T[1,3]();
//   Real mechanics._b6._frame_b._R._T[1,2]();
//   Real mechanics._b6._frame_b._R._T[1,1]();
//   Real mechanics._b6._frame_a._t[3]();
//   Real mechanics._b6._frame_a._t[1]();
//   Real mechanics._b6._frame_a._f[3]();
//   Real mechanics._b6._frame_a._f[1]();
//   Real mechanics._b5._body._z_a[3](start=mechanics.b5.body.z_0_start[3], fixed=false, );
//   Real mechanics._b5._body._z_a[2](start=mechanics.b5.body.z_0_start[2], fixed=false, );
//   Real mechanics._b5._body._z_a[1](start=mechanics.b5.body.z_0_start[1], fixed=false, );
//   Real mechanics._b5._body._w_a[3](start=mechanics.b5.body.w_0_start[3], fixed=false, );
//   Real mechanics._b5._body._w_a[2](start=mechanics.b5.body.w_0_start[2], fixed=false, );
//   Real mechanics._b5._body._w_a[1](start=mechanics.b5.body.w_0_start[1], fixed=false, );
//   Real mechanics._b5._body._g_0[3]();
//   Real mechanics._b5._body._g_0[2]();
//   Real mechanics._b5._body._g_0[1]();
//   Real mechanics._b5._body._frame_a._t[3]();
//   Real mechanics._b5._body._frame_a._t[2]();
//   Real mechanics._b5._body._frame_a._t[1]();
//   Real mechanics._b5._body._frame_a._f[3]();
//   Real mechanics._b5._body._frame_a._f[2]();
//   Real mechanics._b5._body._frame_a._f[1]();
//   Real mechanics._b5._body._frame_a._r_0[3](start=0.0, );
//   Real mechanics._b5._body._frame_a._r_0[2](start=0.0, );
//   Real mechanics._b5._body._frame_a._r_0[1](start=0.0, );
//   Real mechanics._b5._v_0[3](start=0.0, );
//   Real mechanics._b5._v_0[2](start=0.0, );
//   Real mechanics._b5._v_0[1](start=0.0, );
//   Real mechanics._b5._frameTranslation._frame_a._t[3]();
//   Real mechanics._b5._frameTranslation._frame_a._t[2]();
//   Real mechanics._b5._frameTranslation._frame_a._t[1]();
//   Real mechanics._b5._a_0[3](start=0.0, );
//   Real mechanics._b5._a_0[2](start=0.0, );
//   Real mechanics._b5._a_0[1](start=0.0, );
//   Real mechanics._b5._frame_b._t[3]();
//   Real mechanics._b5._frame_b._t[1]();
//   Real mechanics._b5._frame_b._f[3]();
//   Real mechanics._b5._frame_b._f[2]();
//   Real mechanics._b5._frame_b._f[1]();
//   Real mechanics._b5._frame_b._R._T[3,3]();
//   Real mechanics._b5._frame_b._R._T[3,2]();
//   Real mechanics._b5._frame_b._R._T[3,1]();
//   Real mechanics._b5._frame_b._R._T[1,3]();
//   Real mechanics._b5._frame_b._R._T[1,2]();
//   Real mechanics._b5._frame_b._R._T[1,1]();
//   Real mechanics._b5._frame_a._t[3]();
//   Real mechanics._b5._frame_a._t[2]();
//   Real mechanics._b5._frame_a._f[3]();
//   Real mechanics._b5._frame_a._f[2]();
//   Real mechanics._b4._body._z_a[3](start=mechanics.b4.body.z_0_start[3], fixed=false, );
//   Real mechanics._b4._body._z_a[2](start=mechanics.b4.body.z_0_start[2], fixed=false, );
//   Real mechanics._b4._body._z_a[1](start=mechanics.b4.body.z_0_start[1], fixed=false, );
//   Real mechanics._b4._body._w_a[3](start=mechanics.b4.body.w_0_start[3], fixed=false, );
//   Real mechanics._b4._body._w_a[2](start=mechanics.b4.body.w_0_start[2], fixed=false, );
//   Real mechanics._b4._body._w_a[1](start=mechanics.b4.body.w_0_start[1], fixed=false, );
//   Real mechanics._b4._body._g_0[3]();
//   Real mechanics._b4._body._g_0[2]();
//   Real mechanics._b4._body._g_0[1]();
//   Real mechanics._b4._body._frame_a._t[3]();
//   Real mechanics._b4._body._frame_a._t[2]();
//   Real mechanics._b4._body._frame_a._t[1]();
//   Real mechanics._b4._body._frame_a._f[3]();
//   Real mechanics._b4._body._frame_a._f[2]();
//   Real mechanics._b4._body._frame_a._f[1]();
//   Real mechanics._b4._body._frame_a._r_0[3](start=0.0, );
//   Real mechanics._b4._body._frame_a._r_0[2](start=0.0, );
//   Real mechanics._b4._body._frame_a._r_0[1](start=0.0, );
//   Real mechanics._b4._v_0[3](start=0.0, );
//   Real mechanics._b4._v_0[2](start=0.0, );
//   Real mechanics._b4._v_0[1](start=0.0, );
//   Real mechanics._b4._frameTranslation._frame_a._t[3]();
//   Real mechanics._b4._frameTranslation._frame_a._t[2]();
//   Real mechanics._b4._frameTranslation._frame_a._t[1]();
//   Real mechanics._b4._a_0[3](start=0.0, );
//   Real mechanics._b4._a_0[2](start=0.0, );
//   Real mechanics._b4._a_0[1](start=0.0, );
//   Real mechanics._b4._frame_b._t[3]();
//   Real mechanics._b4._frame_b._t[2]();
//   Real mechanics._b4._frame_b._f[3]();
//   Real mechanics._b4._frame_b._f[2]();
//   Real mechanics._b4._frame_b._f[1]();
//   Real mechanics._b4._frame_b._R._T[3,3]();
//   Real mechanics._b4._frame_b._R._T[3,2]();
//   Real mechanics._b4._frame_b._R._T[3,1]();
//   Real mechanics._b4._frame_b._R._T[2,3]();
//   Real mechanics._b4._frame_b._R._T[2,2]();
//   Real mechanics._b4._frame_b._R._T[2,1]();
//   Real mechanics._b4._frame_a._t[3]();
//   Real mechanics._b4._frame_a._t[1]();
//   Real mechanics._b4._frame_a._f[3]();
//   Real mechanics._b4._frame_a._f[1]();
//   Real mechanics._b3._body._z_a[3](start=mechanics.b3.body.z_0_start[3], fixed=false, );
//   Real mechanics._b3._body._z_a[2](start=mechanics.b3.body.z_0_start[2], fixed=false, );
//   Real mechanics._b3._body._z_a[1](start=mechanics.b3.body.z_0_start[1], fixed=false, );
//   Real mechanics._b3._body._w_a[3](start=mechanics.b3.body.w_0_start[3], fixed=false, );
//   Real mechanics._b3._body._w_a[2](start=mechanics.b3.body.w_0_start[2], fixed=false, );
//   Real mechanics._b3._body._w_a[1](start=mechanics.b3.body.w_0_start[1], fixed=false, );
//   Real mechanics._b3._body._g_0[3]();
//   Real mechanics._b3._body._g_0[2]();
//   Real mechanics._b3._body._g_0[1]();
//   Real mechanics._b3._body._frame_a._t[3]();
//   Real mechanics._b3._body._frame_a._t[2]();
//   Real mechanics._b3._body._frame_a._t[1]();
//   Real mechanics._b3._body._frame_a._f[3]();
//   Real mechanics._b3._body._frame_a._f[2]();
//   Real mechanics._b3._body._frame_a._f[1]();
//   Real mechanics._b3._body._frame_a._r_0[3](start=0.0, );
//   Real mechanics._b3._body._frame_a._r_0[2](start=0.0, );
//   Real mechanics._b3._body._frame_a._r_0[1](start=0.0, );
//   Real mechanics._b3._v_0[3](start=0.0, );
//   Real mechanics._b3._v_0[2](start=0.0, );
//   Real mechanics._b3._v_0[1](start=0.0, );
//   Real mechanics._b3._frameTranslation._frame_a._t[3]();
//   Real mechanics._b3._frameTranslation._frame_a._t[2]();
//   Real mechanics._b3._frameTranslation._frame_a._t[1]();
//   Real mechanics._b3._a_0[3](start=0.0, );
//   Real mechanics._b3._a_0[2](start=0.0, );
//   Real mechanics._b3._a_0[1](start=0.0, );
//   Real mechanics._b3._frame_b._t[3]();
//   Real mechanics._b3._frame_b._t[1]();
//   Real mechanics._b3._frame_b._f[3]();
//   Real mechanics._b3._frame_b._f[2]();
//   Real mechanics._b3._frame_b._f[1]();
//   Real mechanics._b3._frame_b._R._T[3,3]();
//   Real mechanics._b3._frame_b._R._T[3,2]();
//   Real mechanics._b3._frame_b._R._T[3,1]();
//   Real mechanics._b3._frame_a._t[3]();
//   Real mechanics._b3._frame_a._t[2]();
//   Real mechanics._b3._frame_a._f[3]();
//   Real mechanics._b3._frame_a._f[2]();
//   Real mechanics._b2._body._z_a[3](start=mechanics.b2.body.z_0_start[3], fixed=false, );
//   Real mechanics._b2._body._z_a[2](start=mechanics.b2.body.z_0_start[2], fixed=false, );
//   Real mechanics._b2._body._w_a[3](start=mechanics.b2.body.w_0_start[3], fixed=false, );
//   Real mechanics._b2._body._w_a[2](start=mechanics.b2.body.w_0_start[2], fixed=false, );
//   Real mechanics._b2._body._g_0[3]();
//   Real mechanics._b2._body._g_0[2]();
//   Real mechanics._b2._body._g_0[1]();
//   Real mechanics._b2._body._frame_a._t[3]();
//   Real mechanics._b2._body._frame_a._t[2]();
//   Real mechanics._b2._body._frame_a._t[1]();
//   Real mechanics._b2._body._frame_a._f[3]();
//   Real mechanics._b2._body._frame_a._f[2]();
//   Real mechanics._b2._body._frame_a._f[1]();
//   Real mechanics._b2._body._frame_a._r_0[3](start=0.0, );
//   Real mechanics._b2._body._frame_a._r_0[1](start=0.0, );
//   Real mechanics._b2._v_0[3](start=0.0, );
//   Real mechanics._b2._v_0[1](start=0.0, );
//   Real mechanics._b2._frameTranslation._frame_a._t[3]();
//   Real mechanics._b2._frameTranslation._frame_a._t[2]();
//   Real mechanics._b2._frameTranslation._frame_a._t[1]();
//   Real mechanics._b2._a_0[3](start=0.0, );
//   Real mechanics._b2._a_0[1](start=0.0, );
//   Real mechanics._b2._frame_b._t[3]();
//   Real mechanics._b2._frame_b._t[2]();
//   Real mechanics._b2._frame_b._f[3]();
//   Real mechanics._b2._frame_b._f[2]();
//   Real mechanics._b2._frame_b._f[1]();
//   Real mechanics._b2._frame_b._R._T[3,3]();
//   Real mechanics._b2._frame_b._R._T[3,2]();
//   Real mechanics._b2._frame_b._R._T[3,1]();
//   Real mechanics._b2._frame_b._R._T[2,3]();
//   Real mechanics._b2._frame_b._R._T[2,2]();
//   Real mechanics._b2._frame_b._R._T[2,1]();
//   Real mechanics._b2._frame_a._t[3]();
//   Real mechanics._b2._frame_a._t[2]();
//   Real mechanics._b2._frame_a._f[3]();
//   Real mechanics._b2._frame_a._f[2]();
//   Real mechanics._b1._body._g_0[3]();
//   Real mechanics._b1._body._g_0[2]();
//   Real mechanics._b1._body._g_0[1]();
//   Real mechanics._b1._body._frame_a._t[3]();
//   Real mechanics._b1._body._frame_a._t[2]();
//   Real mechanics._b1._body._frame_a._t[1]();
//   Real mechanics._b1._body._frame_a._f[3]();
//   Real mechanics._b1._body._frame_a._f[2]();
//   Real mechanics._b1._body._frame_a._f[1]();
//   Real mechanics._b1._frameTranslation._frame_a._t[3]();
//   Real mechanics._b1._frameTranslation._frame_a._t[2]();
//   Real mechanics._b1._frameTranslation._frame_a._t[1]();
//   Real mechanics._b1._frame_b._t[3]();
//   Real mechanics._b1._frame_b._t[2]();
//   Real mechanics._b1._frame_b._f[3]();
//   Real mechanics._b1._frame_b._f[2]();
//   Real mechanics._b1._frame_b._f[1]();
//   Real mechanics._b1._frame_a._t[3]();
//   Real mechanics._b1._frame_a._t[1]();
//   Real mechanics._b1._frame_a._f[3]();
//   Real mechanics._b1._frame_a._f[1]();
//   Real mechanics._b1._frame_a._R._T[3,3]();
//   Real mechanics._b1._frame_a._R._T[3,1]();
//   Real mechanics._b1._frame_a._R._T[1,3]();
//   Real mechanics._b1._frame_a._R._T[1,1]();
//   Real mechanics._b0._frameTranslation._frame_a._t[3]();
//   Real mechanics._b0._frameTranslation._frame_a._t[2]();
//   Real mechanics._b0._frameTranslation._frame_a._t[1]();
//   Real mechanics._b0._frame_b._t[3]();
//   Real mechanics._b0._frame_b._t[1]();
//   Real mechanics._b0._frame_b._f[3]();
//   Real mechanics._b0._frame_b._f[2]();
//   Real mechanics._b0._frame_b._f[1]();
//   Real mechanics._r6._w(start=0.0, );
//   Real mechanics._r6._R_rel._T[3,3]();
//   Real mechanics._r6._R_rel._T[3,1]();
//   Real mechanics._r6._R_rel._T[1,3]();
//   Real mechanics._r6._R_rel._T[1,1]();
//   Real mechanics._r5._w(start=0.0, );
//   Real mechanics._r5._R_rel._T[3,3]();
//   Real mechanics._r5._R_rel._T[3,2]();
//   Real mechanics._r5._R_rel._T[2,3]();
//   Real mechanics._r5._R_rel._T[2,2]();
//   Real mechanics._r4._w(start=0.0, );
//   Real mechanics._r4._R_rel._T[3,3]();
//   Real mechanics._r4._R_rel._T[3,1]();
//   Real mechanics._r4._R_rel._T[1,3]();
//   Real mechanics._r4._R_rel._T[1,1]();
//   Real mechanics._r3._w(start=0.0, );
//   Real mechanics._r3._R_rel._T[3,3]();
//   Real mechanics._r3._R_rel._T[3,2]();
//   Real mechanics._r3._R_rel._T[2,3]();
//   Real mechanics._r3._R_rel._T[2,2]();
//   Real mechanics._r2._w(start=mechanics.b2.body.w_0_start[1], );
//   Real mechanics._r2._R_rel._T[3,3]();
//   Real mechanics._r2._R_rel._T[2,3]();
//   Real mechanics._r1._w(start=mechanics.b1.body.w_0_start[2], );
//   Real mechanics._tau[6]();
//   Real mechanics._tau[5]();
//   Real mechanics._tau[4]();
//   Real mechanics._tau[3]();
//   Real mechanics._tau[2]();
//   Real mechanics._tau[1]();
//   Real mechanics._world._frame_b._t[3]();
//   Real mechanics._world._frame_b._t[2]();
//   Real mechanics._world._frame_b._t[1]();
//   Real mechanics._world._frame_b._f[3]();
//   Real mechanics._world._frame_b._f[2]();
//   Real mechanics._world._frame_b._f[1]();
//   Real der(der(axis3._gear._gear._phi_a))(fixed=false, );
//   Real der(der(axis2._gear._gear._phi_a))(fixed=false, );
//   Real der(der(axis1._gear._gear._phi_a))(fixed=false, );
//   Real der(mechanics._b1._frame_a._R._T[1,1])(fixed=false, );
//   Real der(mechanics._b1._frame_a._R._T[1,3])(fixed=false, );
//   Real der(mechanics._b1._frame_a._R._T[3,1])(fixed=false, );
//   Real der(mechanics._b1._frame_a._R._T[3,3])(fixed=false, );
//   Real der(mechanics._b2._frame_b._R._T[2,1])(fixed=false, );
//   Real der(mechanics._b2._frame_b._R._T[2,2])(fixed=false, );
//   Real der(mechanics._b2._frame_b._R._T[2,3])(fixed=false, );
//   Real der(mechanics._b2._frame_b._R._T[3,1])(fixed=false, );
//   Real der(mechanics._b2._frame_b._R._T[3,2])(fixed=false, );
//   Real der(mechanics._b2._frame_b._R._T[3,3])(fixed=false, );
//   Real der(mechanics._b3._frame_b._R._T[3,1])(fixed=false, );
//   Real der(mechanics._b3._frame_b._R._T[3,2])(fixed=false, );
//   Real der(mechanics._b3._frame_b._R._T[3,3])(fixed=false, );
//   Real der(mechanics._b4._frame_b._R._T[2,1])(fixed=false, );
//   Real der(mechanics._b4._frame_b._R._T[2,2])(fixed=false, );
//   Real der(mechanics._b4._frame_b._R._T[2,3])(fixed=false, );
//   Real der(mechanics._b4._frame_b._R._T[3,1])(fixed=false, );
//   Real der(mechanics._b4._frame_b._R._T[3,2])(fixed=false, );
//   Real der(mechanics._b4._frame_b._R._T[3,3])(fixed=false, );
//   Real der(mechanics._b5._frame_b._R._T[1,1])(fixed=false, );
//   Real der(mechanics._b5._frame_b._R._T[1,2])(fixed=false, );
//   Real der(mechanics._b5._frame_b._R._T[1,3])(fixed=false, );
//   Real der(mechanics._b5._frame_b._R._T[3,1])(fixed=false, );
//   Real der(mechanics._b5._frame_b._R._T[3,2])(fixed=false, );
//   Real der(mechanics._b5._frame_b._R._T[3,3])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[1,1])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[1,2])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[1,3])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[2,1])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[2,2])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[2,3])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[3,1])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[3,2])(fixed=false, );
//   Real der(mechanics._b6._frame_b._R._T[3,3])(fixed=false, );
//   Real der(mechanics._r2._R_rel._T[2,3])(fixed=false, );
//   Real der(mechanics._r2._R_rel._T[3,3])(fixed=false, );
//   Real der(mechanics._r3._R_rel._T[2,2])(fixed=false, );
//   Real der(mechanics._r3._R_rel._T[2,3])(fixed=false, );
//   Real der(mechanics._r3._R_rel._T[3,2])(fixed=false, );
//   Real der(mechanics._r3._R_rel._T[3,3])(fixed=false, );
//   Real der(mechanics._r4._R_rel._T[1,1])(fixed=false, );
//   Real der(mechanics._r4._R_rel._T[1,3])(fixed=false, );
//   Real der(mechanics._r4._R_rel._T[3,1])(fixed=false, );
//   Real der(mechanics._r4._R_rel._T[3,3])(fixed=false, );
//   Real der(mechanics._r5._R_rel._T[2,2])(fixed=false, );
//   Real der(mechanics._r5._R_rel._T[2,3])(fixed=false, );
//   Real der(mechanics._r5._R_rel._T[3,2])(fixed=false, );
//   Real der(mechanics._r5._R_rel._T[3,3])(fixed=false, );
//   Real der(mechanics._r6._R_rel._T[1,1])(fixed=false, );
//   Real der(mechanics._r6._R_rel._T[1,3])(fixed=false, );
//   Real der(mechanics._r6._R_rel._T[3,1])(fixed=false, );
//   Real der(mechanics._r6._R_rel._T[3,3])(fixed=false, );
//   Real der(axis1._initializeFlange._set_a_start._w)(start=mechanics.b1.body.z_0_start[2], fixed=false, );
//   Real der(axis2._initializeFlange._set_a_start._w)(start=mechanics.b2.body.z_0_start[1], fixed=false, );
//   Real der(axis3._initializeFlange._set_a_start._w)(start=0.0, fixed=false, );
//   Real der(axis4._initializeFlange._set_a_start._w)(start=0.0, fixed=false, );
//   Real der(axis5._initializeFlange._set_a_start._w)(start=0.0, fixed=false, );
//   Real der(axis6._initializeFlange._set_a_start._w)(start=0.0, fixed=false, );
//   Real der(axis3._initializeFlange._set_w_start._flange._phi)(fixed=false, );
//   Real der(axis2._initializeFlange._set_w_start._flange._phi)(fixed=false, );
//   Real der(axis1._initializeFlange._set_w_start._flange._phi)(fixed=false, );
//   
//   /* system #2 */
//   Real axis6._initializeFlange._set_a_start._a_start();
//   
//   /* system #3 */
//   Real axis5._initializeFlange._set_a_start._a_start();
//   
//   /* system #4 */
//   Real axis4._initializeFlange._set_a_start._a_start();
//   
//   /* system #5 */
//   Real axis3._initializeFlange._set_a_start._a_start();
//   
//   /* system #6 */
//   Real axis2._initializeFlange._set_a_start._a_start();
//   
//   /* system #7 */
//   Real axis1._initializeFlange._set_a_start._a_start();
//   
//   /* system #8 */
//   Boolean $whenCondition1(fixed=true, );
// equation
//   /* system #1 */
//   axis6.motor.emf.phi = axis6.gear.gear.ratio * axis6.initializeFlange.set_w_start.flange.phi ;
//   axis5.motor.emf.phi = axis5.gear.gear.ratio * axis5.initializeFlange.set_w_start.flange.phi ;
//   axis4.motor.emf.phi = axis4.gear.gear.ratio * axis4.initializeFlange.set_w_start.flange.phi ;
//   axis3.gear.spring.phi_rel = axis3.gear.gear.phi_a - axis3.motor.emf.phi ;
//   axis3.gear.gear.phi_a = axis3.gear.gear.ratio * axis3.initializeFlange.set_phi_start.flange.phi ;
//   axis2.gear.spring.phi_rel = axis2.gear.gear.phi_a - axis2.motor.emf.phi ;
//   axis2.gear.gear.phi_a = axis2.gear.gear.ratio * axis2.initializeFlange.set_phi_start.flange.phi ;
//   axis1.gear.spring.phi_rel = axis1.gear.gear.phi_a - axis1.motor.emf.phi ;
//   axis1.gear.gear.phi_a = axis1.gear.gear.ratio * axis1.initializeFlange.set_phi_start.flange.phi ;
//   $DER.axis1.initializeFlange.set_w_start.flange.phi = mechanics.r1.w ;
//   $DER.axis2.initializeFlange.set_w_start.flange.phi = mechanics.r2.w ;
//   $DER.axis3.initializeFlange.set_w_start.flange.phi = mechanics.r3.w ;
//   mechanics.r4.w = der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r5.w = der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r6.w = der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.b1.frame_a.R.T[1,1] = cos(axis1.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b1.frame_a.R.T[1,3] = -sin(axis1.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b1.frame_a.R.T[3,1] = sin(axis1.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b2.body.frame_a.r_0[1] = mechanics.b1.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.frameTranslation.r[1] + mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.frameTranslation.r[3] ;
//   mechanics.b1.frame_a.R.T[3,3] = cos(axis1.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b2.body.frame_a.r_0[3] = mechanics.b1.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.frameTranslation.r[1] + mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.frameTranslation.r[3] ;
//   mechanics.b2.frame_b.R.T[2,2] = cos(axis2.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.r2.R_rel.T[2,3] = sin(axis2.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b2.frame_b.R.T[3,2] = -sin(axis2.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b3.body.frame_a.r_0[2] = mechanics.b2.body.frame_a.r_0[2] + mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.frameTranslation.r[2] + mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.frameTranslation.r[3] ;
//   mechanics.r2.R_rel.T[3,3] = cos(axis2.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b2.body.w_a[2] = mechanics.b2.frame_b.R.T[2,2] * mechanics.r1.w ;
//   mechanics.b2.body.w_a[3] = mechanics.b2.frame_b.R.T[3,2] * mechanics.r1.w ;
//   mechanics.b2.frame_b.R.T[2,1] = mechanics.r2.R_rel.T[2,3] * mechanics.b1.frame_a.R.T[3,1] ;
//   mechanics.b2.frame_b.R.T[2,3] = mechanics.r2.R_rel.T[2,3] * mechanics.b1.frame_a.R.T[3,3] ;
//   mechanics.b2.frame_b.R.T[3,1] = mechanics.r2.R_rel.T[3,3] * mechanics.b1.frame_a.R.T[3,1] ;
//   mechanics.b3.body.frame_a.r_0[1] = mechanics.b2.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b2.frameTranslation.r[1] + mechanics.b2.frame_b.R.T[2,1] * mechanics.b2.frameTranslation.r[2] + mechanics.b2.frame_b.R.T[3,1] * mechanics.b2.frameTranslation.r[3] ;
//   mechanics.b2.frame_b.R.T[3,3] = mechanics.r2.R_rel.T[3,3] * mechanics.b1.frame_a.R.T[3,3] ;
//   mechanics.b3.body.frame_a.r_0[3] = mechanics.b2.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b2.frameTranslation.r[1] + mechanics.b2.frame_b.R.T[2,3] * mechanics.b2.frameTranslation.r[2] + mechanics.b2.frame_b.R.T[3,3] * mechanics.b2.frameTranslation.r[3] ;
//   mechanics.r3.R_rel.T[2,2] = cos(axis3.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.r3.R_rel.T[2,3] = sin(axis3.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.r3.R_rel.T[3,2] = -sin(axis3.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.r3.R_rel.T[3,3] = cos(axis3.initializeFlange.set_phi_start.flange.phi) ;
//   mechanics.b3.body.w_a[1] = mechanics.r2.w + mechanics.r3.w ;
//   mechanics.b3.body.w_a[2] = mechanics.r3.R_rel.T[2,2] * mechanics.b2.body.w_a[2] + mechanics.r3.R_rel.T[2,3] * mechanics.b2.body.w_a[3] ;
//   mechanics.b3.body.w_a[3] = mechanics.r3.R_rel.T[3,2] * mechanics.b2.body.w_a[2] + mechanics.r3.R_rel.T[3,3] * mechanics.b2.body.w_a[3] ;
//   mechanics.b4.frame_b.R.T[2,1] = mechanics.r3.R_rel.T[2,2] * mechanics.b2.frame_b.R.T[2,1] + mechanics.r3.R_rel.T[2,3] * mechanics.b2.frame_b.R.T[3,1] ;
//   mechanics.b4.frame_b.R.T[2,2] = mechanics.r3.R_rel.T[2,2] * mechanics.b2.frame_b.R.T[2,2] + mechanics.r3.R_rel.T[2,3] * mechanics.b2.frame_b.R.T[3,2] ;
//   mechanics.b4.frame_b.R.T[2,3] = mechanics.r3.R_rel.T[2,2] * mechanics.b2.frame_b.R.T[2,3] + mechanics.r3.R_rel.T[2,3] * mechanics.b2.frame_b.R.T[3,3] ;
//   mechanics.b3.frame_b.R.T[3,1] = mechanics.r3.R_rel.T[3,2] * mechanics.b2.frame_b.R.T[2,1] + mechanics.r3.R_rel.T[3,3] * mechanics.b2.frame_b.R.T[3,1] ;
//   mechanics.b4.body.frame_a.r_0[1] = mechanics.b3.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b3.frameTranslation.r[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b3.frameTranslation.r[2] + mechanics.b3.frame_b.R.T[3,1] * mechanics.b3.frameTranslation.r[3] ;
//   mechanics.b3.frame_b.R.T[3,2] = mechanics.r3.R_rel.T[3,2] * mechanics.b2.frame_b.R.T[2,2] + mechanics.r3.R_rel.T[3,3] * mechanics.b2.frame_b.R.T[3,2] ;
//   mechanics.b4.body.frame_a.r_0[2] = mechanics.b3.body.frame_a.r_0[2] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b3.frameTranslation.r[2] + mechanics.b3.frame_b.R.T[3,2] * mechanics.b3.frameTranslation.r[3] ;
//   mechanics.b3.frame_b.R.T[3,3] = mechanics.r3.R_rel.T[3,2] * mechanics.b2.frame_b.R.T[2,3] + mechanics.r3.R_rel.T[3,3] * mechanics.b2.frame_b.R.T[3,3] ;
//   mechanics.b4.body.frame_a.r_0[3] = mechanics.b3.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b3.frameTranslation.r[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b3.frameTranslation.r[2] + mechanics.b3.frame_b.R.T[3,3] * mechanics.b3.frameTranslation.r[3] ;
//   mechanics.r4.R_rel.T[1,1] = cos(axis4.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r4.R_rel.T[1,3] = -sin(axis4.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r4.R_rel.T[3,1] = sin(axis4.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r4.R_rel.T[3,3] = cos(axis4.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.b4.body.w_a[1] = mechanics.r4.R_rel.T[1,1] * mechanics.b3.body.w_a[1] + mechanics.r4.R_rel.T[1,3] * mechanics.b3.body.w_a[3] ;
//   mechanics.b4.body.w_a[2] = mechanics.b3.body.w_a[2] + mechanics.r4.w ;
//   mechanics.b4.body.w_a[3] = mechanics.r4.R_rel.T[3,1] * mechanics.b3.body.w_a[1] + mechanics.r4.R_rel.T[3,3] * mechanics.b3.body.w_a[3] ;
//   mechanics.b5.frame_b.R.T[1,1] = mechanics.r4.R_rel.T[1,1] * mechanics.b1.frame_a.R.T[1,1] + mechanics.r4.R_rel.T[1,3] * mechanics.b3.frame_b.R.T[3,1] ;
//   mechanics.b5.frame_b.R.T[1,2] = mechanics.r4.R_rel.T[1,3] * mechanics.b3.frame_b.R.T[3,2] ;
//   mechanics.b5.frame_b.R.T[1,3] = mechanics.r4.R_rel.T[1,1] * mechanics.b1.frame_a.R.T[1,3] + mechanics.r4.R_rel.T[1,3] * mechanics.b3.frame_b.R.T[3,3] ;
//   mechanics.b4.frame_b.R.T[3,1] = mechanics.r4.R_rel.T[3,1] * mechanics.b1.frame_a.R.T[1,1] + mechanics.r4.R_rel.T[3,3] * mechanics.b3.frame_b.R.T[3,1] ;
//   mechanics.b5.body.frame_a.r_0[1] = mechanics.b4.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b4.frameTranslation.r[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b4.frameTranslation.r[2] + mechanics.b4.frame_b.R.T[3,1] * mechanics.b4.frameTranslation.r[3] ;
//   mechanics.b4.frame_b.R.T[3,2] = mechanics.r4.R_rel.T[3,3] * mechanics.b3.frame_b.R.T[3,2] ;
//   mechanics.b5.body.frame_a.r_0[2] = mechanics.b4.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b4.frameTranslation.r[1] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b4.frameTranslation.r[2] + mechanics.b4.frame_b.R.T[3,2] * mechanics.b4.frameTranslation.r[3] ;
//   mechanics.b4.frame_b.R.T[3,3] = mechanics.r4.R_rel.T[3,1] * mechanics.b1.frame_a.R.T[1,3] + mechanics.r4.R_rel.T[3,3] * mechanics.b3.frame_b.R.T[3,3] ;
//   mechanics.b5.body.frame_a.r_0[3] = mechanics.b4.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b4.frameTranslation.r[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b4.frameTranslation.r[2] + mechanics.b4.frame_b.R.T[3,3] * mechanics.b4.frameTranslation.r[3] ;
//   mechanics.r5.R_rel.T[2,2] = cos(axis5.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r5.R_rel.T[2,3] = sin(axis5.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r5.R_rel.T[3,2] = -sin(axis5.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r5.R_rel.T[3,3] = cos(axis5.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.b5.body.w_a[1] = mechanics.b4.body.w_a[1] + mechanics.r5.w ;
//   mechanics.b5.body.w_a[2] = mechanics.r5.R_rel.T[2,2] * mechanics.b4.body.w_a[2] + mechanics.r5.R_rel.T[2,3] * mechanics.b4.body.w_a[3] ;
//   mechanics.b5.body.w_a[3] = mechanics.r5.R_rel.T[3,2] * mechanics.b4.body.w_a[2] + mechanics.r5.R_rel.T[3,3] * mechanics.b4.body.w_a[3] ;
//   mechanics.b6.frame_b.R.T[2,1] = mechanics.r5.R_rel.T[2,2] * mechanics.b4.frame_b.R.T[2,1] + mechanics.r5.R_rel.T[2,3] * mechanics.b4.frame_b.R.T[3,1] ;
//   mechanics.b6.frame_b.R.T[2,2] = mechanics.r5.R_rel.T[2,2] * mechanics.b4.frame_b.R.T[2,2] + mechanics.r5.R_rel.T[2,3] * mechanics.b4.frame_b.R.T[3,2] ;
//   mechanics.b6.frame_b.R.T[2,3] = mechanics.r5.R_rel.T[2,2] * mechanics.b4.frame_b.R.T[2,3] + mechanics.r5.R_rel.T[2,3] * mechanics.b4.frame_b.R.T[3,3] ;
//   mechanics.b5.frame_b.R.T[3,1] = mechanics.r5.R_rel.T[3,2] * mechanics.b4.frame_b.R.T[2,1] + mechanics.r5.R_rel.T[3,3] * mechanics.b4.frame_b.R.T[3,1] ;
//   mechanics.b6.body.frame_a.r_0[1] = mechanics.b5.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b5.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b5.frameTranslation.r[2] + mechanics.b5.frame_b.R.T[3,1] * mechanics.b5.frameTranslation.r[3] ;
//   mechanics.b5.frame_b.R.T[3,2] = mechanics.r5.R_rel.T[3,2] * mechanics.b4.frame_b.R.T[2,2] + mechanics.r5.R_rel.T[3,3] * mechanics.b4.frame_b.R.T[3,2] ;
//   mechanics.b6.body.frame_a.r_0[2] = mechanics.b5.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b5.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b5.frameTranslation.r[2] + mechanics.b5.frame_b.R.T[3,2] * mechanics.b5.frameTranslation.r[3] ;
//   mechanics.b5.frame_b.R.T[3,3] = mechanics.r5.R_rel.T[3,2] * mechanics.b4.frame_b.R.T[2,3] + mechanics.r5.R_rel.T[3,3] * mechanics.b4.frame_b.R.T[3,3] ;
//   mechanics.b6.body.frame_a.r_0[3] = mechanics.b5.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b5.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b5.frameTranslation.r[2] + mechanics.b5.frame_b.R.T[3,3] * mechanics.b5.frameTranslation.r[3] ;
//   mechanics.r6.R_rel.T[1,1] = cos(axis6.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r6.R_rel.T[1,3] = -sin(axis6.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r6.R_rel.T[3,1] = sin(axis6.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.r6.R_rel.T[3,3] = cos(axis6.initializeFlange.set_w_start.flange.phi) ;
//   mechanics.b6.body.w_a[1] = mechanics.r6.R_rel.T[1,1] * mechanics.b5.body.w_a[1] + mechanics.r6.R_rel.T[1,3] * mechanics.b5.body.w_a[3] ;
//   mechanics.b6.body.w_a[2] = mechanics.b5.body.w_a[2] + mechanics.r6.w ;
//   mechanics.b6.body.w_a[3] = mechanics.r6.R_rel.T[3,1] * mechanics.b5.body.w_a[1] + mechanics.r6.R_rel.T[3,3] * mechanics.b5.body.w_a[3] ;
//   mechanics.b6.frame_b.R.T[1,1] = mechanics.r6.R_rel.T[1,1] * mechanics.b5.frame_b.R.T[1,1] + mechanics.r6.R_rel.T[1,3] * mechanics.b5.frame_b.R.T[3,1] ;
//   mechanics.b6.frame_b.R.T[1,2] = mechanics.r6.R_rel.T[1,1] * mechanics.b5.frame_b.R.T[1,2] + mechanics.r6.R_rel.T[1,3] * mechanics.b5.frame_b.R.T[3,2] ;
//   mechanics.b6.frame_b.R.T[1,3] = mechanics.r6.R_rel.T[1,1] * mechanics.b5.frame_b.R.T[1,3] + mechanics.r6.R_rel.T[1,3] * mechanics.b5.frame_b.R.T[3,3] ;
//   mechanics.b6.frame_b.R.T[3,1] = mechanics.r6.R_rel.T[3,1] * mechanics.b5.frame_b.R.T[1,1] + mechanics.r6.R_rel.T[3,3] * mechanics.b5.frame_b.R.T[3,1] ;
//   mechanics.load.body.frame_a.r_0[1] = mechanics.b6.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.b6.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b6.frameTranslation.r[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.b6.frameTranslation.r[3] ;
//   mechanics.b6.frame_b.R.T[3,2] = mechanics.r6.R_rel.T[3,1] * mechanics.b5.frame_b.R.T[1,2] + mechanics.r6.R_rel.T[3,3] * mechanics.b5.frame_b.R.T[3,2] ;
//   mechanics.load.body.frame_a.r_0[2] = mechanics.b6.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.b6.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b6.frameTranslation.r[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.b6.frameTranslation.r[3] ;
//   mechanics.b6.frame_b.R.T[3,3] = mechanics.r6.R_rel.T[3,1] * mechanics.b5.frame_b.R.T[1,3] + mechanics.r6.R_rel.T[3,3] * mechanics.b5.frame_b.R.T[3,3] ;
//   mechanics.load.body.frame_a.r_0[3] = mechanics.b6.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.b6.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b6.frameTranslation.r[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.b6.frameTranslation.r[3] ;
//   mechanics.b2.v_0[1] = mechanics.r1.w * (mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.frameTranslation.r[3] - mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.frameTranslation.r[1]) ;
//   mechanics.b2.v_0[3] = mechanics.r1.w * (mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.frameTranslation.r[3] - mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.frameTranslation.r[1]) ;
//   mechanics.b3.v_0[1] = mechanics.b2.v_0[1] + mechanics.b1.frame_a.R.T[1,1] * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.b2.frame_b.R.T[2,1] * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.frame_b.R.T[3,1] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1]) ;
//   mechanics.b3.v_0[2] = mechanics.b2.frame_b.R.T[2,2] * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.frame_b.R.T[3,2] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1]) ;
//   mechanics.b3.v_0[3] = mechanics.b2.v_0[3] + mechanics.b1.frame_a.R.T[1,3] * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.b2.frame_b.R.T[2,3] * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.frame_b.R.T[3,3] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1]) ;
//   mechanics.b4.v_0[1] = mechanics.b3.v_0[1] + mechanics.b1.frame_a.R.T[1,1] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,1] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.frame_b.R.T[3,1] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1]) ;
//   mechanics.b4.v_0[2] = mechanics.b3.v_0[2] + mechanics.b4.frame_b.R.T[2,2] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.frame_b.R.T[3,2] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1]) ;
//   mechanics.b4.v_0[3] = mechanics.b3.v_0[3] + mechanics.b1.frame_a.R.T[1,3] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,3] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.frame_b.R.T[3,3] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1]) ;
//   mechanics.b5.v_0[1] = mechanics.b4.v_0[1] + mechanics.b5.frame_b.R.T[1,1] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,1] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.frame_b.R.T[3,1] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1]) ;
//   mechanics.b5.v_0[2] = mechanics.b4.v_0[2] + mechanics.b5.frame_b.R.T[1,2] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,2] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.frame_b.R.T[3,2] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1]) ;
//   mechanics.b5.v_0[3] = mechanics.b4.v_0[3] + mechanics.b5.frame_b.R.T[1,3] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,3] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.frame_b.R.T[3,3] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1]) ;
//   mechanics.b6.v_0[1] = mechanics.b5.v_0[1] + mechanics.b5.frame_b.R.T[1,1] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,1] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.frame_b.R.T[3,1] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1]) ;
//   mechanics.b6.v_0[2] = mechanics.b5.v_0[2] + mechanics.b5.frame_b.R.T[1,2] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.frame_b.R.T[3,2] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1]) ;
//   mechanics.b6.v_0[3] = mechanics.b5.v_0[3] + mechanics.b5.frame_b.R.T[1,3] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.frame_b.R.T[3,3] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1]) ;
//   mechanics.load.v_0[1] = mechanics.b6.v_0[1] + mechanics.b6.frame_b.R.T[1,1] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,1] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.frame_b.R.T[3,1] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1]) ;
//   mechanics.load.v_0[2] = mechanics.b6.v_0[2] + mechanics.b6.frame_b.R.T[1,2] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.frame_b.R.T[3,2] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1]) ;
//   mechanics.load.v_0[3] = mechanics.b6.v_0[3] + mechanics.b6.frame_b.R.T[1,3] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.frame_b.R.T[3,3] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1]) ;
//   der(axis1.gear.gear.phi_a) = axis1.gear.gear.ratio * $DER.axis1.initializeFlange.set_w_start.flange.phi ;
//   axis1.gear.spring.w_rel = der(axis1.gear.gear.phi_a) - axis1.gear.bearingFriction.w ;
//   der(axis2.gear.gear.phi_a) = axis2.gear.gear.ratio * $DER.axis2.initializeFlange.set_w_start.flange.phi ;
//   axis2.gear.spring.w_rel = der(axis2.gear.gear.phi_a) - axis2.gear.bearingFriction.w ;
//   der(axis3.gear.gear.phi_a) = axis3.gear.gear.ratio * $DER.axis3.initializeFlange.set_w_start.flange.phi ;
//   axis3.gear.spring.w_rel = der(axis3.gear.gear.phi_a) - axis3.gear.bearingFriction.w ;
//   axis4.motor.Jmotor.w = axis4.gear.gear.ratio * der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   axis4.gear.bearingFriction.w = der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   axis5.motor.Jmotor.w = axis5.gear.gear.ratio * der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   axis5.gear.bearingFriction.w = der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   axis6.motor.Jmotor.w = axis6.gear.gear.ratio * der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   axis6.gear.bearingFriction.w = der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   axis6.initializeFlange.set_phi_start.flange.phi = axis6.initializeFlange.set_w_start.flange.phi ;
//   axis5.initializeFlange.set_phi_start.flange.phi = axis5.initializeFlange.set_w_start.flange.phi ;
//   axis4.initializeFlange.set_phi_start.flange.phi = axis4.initializeFlange.set_w_start.flange.phi ;
//   -axis6.motor.Jmotor.flange_a.tau = (-axis6.motor.emf.k) * axis6.motor.La.i ;
//   axis6.motor.emf.k * axis6.motor.Jmotor.w = axis6.motor.emf.v ;
//   axis6.motor.convert1.y = axis6.motor.convert1.k * axis6.motor.La.i ;
//   axis6.motor.Rd4.v = axis6.motor.Rd4.R_actual * axis6.motor.Rd4.i ;
//   axis6.motor.Rd3.v = axis6.motor.Rd3.R_actual * axis6.motor.Rd4.i ;
//   axis6.motor.Rd3.v = axis6.motor.convert1.y - axis6.motor.Rd4.v ;
//   axis6.motor.Rd4.LossPower = axis6.motor.Rd4.v * axis6.motor.Rd4.i ;
//   axis6.motor.Rd3.LossPower = axis6.motor.Rd3.v * axis6.motor.Rd4.i ;
//   -axis6.motor.C.v = (-axis6.motor.Rp2.R_actual) * axis6.motor.Rp1.i ;
//   axis6.motor.Rp2.LossPower = axis6.motor.C.v * axis6.motor.Rp1.i ;
//   axis6.motor.power.i2 + axis6.motor.La.i - axis6.motor.Rp1.i = 0.0 ;
//   axis6.motor.Rp1.v = axis6.motor.Rp1.R_actual * axis6.motor.Rp1.i ;
//   axis6.motor.Rp1.LossPower = axis6.motor.Rp1.v * axis6.motor.Rp1.i ;
//   axis6.motor.Rp1.v = (-axis6.motor.C.v) - axis6.motor.power.v2 ;
//   axis6.motor.Ra.v = axis6.motor.Ra.R_actual * axis6.motor.La.i ;
//   axis6.motor.Ra.LossPower = axis6.motor.Ra.v * axis6.motor.La.i ;
//   axis6.motor.Ra.v = axis6.motor.power.v2 - axis6.motor.La.p.v ;
//   axis6.motor.La.v = axis6.motor.La.p.v - axis6.motor.emf.v ;
//   axis6.motor.La.L * der(axis6.motor.La.i) = axis6.motor.La.v ;
//   -axis5.motor.Jmotor.flange_a.tau = (-axis5.motor.emf.k) * axis5.motor.La.i ;
//   axis5.motor.emf.k * axis5.motor.Jmotor.w = axis5.motor.emf.v ;
//   axis5.motor.convert1.y = axis5.motor.convert1.k * axis5.motor.La.i ;
//   axis5.motor.Rd4.v = axis5.motor.Rd4.R_actual * axis5.motor.Rd4.i ;
//   axis5.motor.Rd3.v = axis5.motor.Rd3.R_actual * axis5.motor.Rd4.i ;
//   axis5.motor.Rd3.v = axis5.motor.convert1.y - axis5.motor.Rd4.v ;
//   axis5.motor.Rd4.LossPower = axis5.motor.Rd4.v * axis5.motor.Rd4.i ;
//   axis5.motor.Rd3.LossPower = axis5.motor.Rd3.v * axis5.motor.Rd4.i ;
//   -axis5.motor.C.v = (-axis5.motor.Rp2.R_actual) * axis5.motor.Rp1.i ;
//   axis5.motor.Rp2.LossPower = axis5.motor.C.v * axis5.motor.Rp1.i ;
//   axis5.motor.power.i2 + axis5.motor.La.i - axis5.motor.Rp1.i = 0.0 ;
//   axis5.motor.Rp1.v = axis5.motor.Rp1.R_actual * axis5.motor.Rp1.i ;
//   axis5.motor.Rp1.LossPower = axis5.motor.Rp1.v * axis5.motor.Rp1.i ;
//   axis5.motor.Rp1.v = (-axis5.motor.C.v) - axis5.motor.power.v2 ;
//   axis5.motor.Ra.v = axis5.motor.Ra.R_actual * axis5.motor.La.i ;
//   axis5.motor.Ra.LossPower = axis5.motor.Ra.v * axis5.motor.La.i ;
//   axis5.motor.Ra.v = axis5.motor.power.v2 - axis5.motor.La.p.v ;
//   axis5.motor.La.v = axis5.motor.La.p.v - axis5.motor.emf.v ;
//   axis5.motor.La.L * der(axis5.motor.La.i) = axis5.motor.La.v ;
//   -axis4.motor.Jmotor.flange_a.tau = (-axis4.motor.emf.k) * axis4.motor.La.i ;
//   axis4.motor.emf.k * axis4.motor.Jmotor.w = axis4.motor.emf.v ;
//   axis4.motor.convert1.y = axis4.motor.convert1.k * axis4.motor.La.i ;
//   axis4.motor.Rd4.v = axis4.motor.Rd4.R_actual * axis4.motor.Rd4.i ;
//   axis4.motor.Rd3.v = axis4.motor.convert1.y - axis4.motor.Rd4.v ;
//   axis4.motor.Rd3.v = axis4.motor.Rd3.R_actual * axis4.motor.Rd4.i ;
//   axis4.motor.Rd4.LossPower = axis4.motor.Rd4.v * axis4.motor.Rd4.i ;
//   axis4.motor.Rd3.LossPower = axis4.motor.Rd3.v * axis4.motor.Rd4.i ;
//   -axis4.motor.C.v = (-axis4.motor.Rp2.R_actual) * axis4.motor.Rp1.i ;
//   axis4.motor.Rp2.LossPower = axis4.motor.C.v * axis4.motor.Rp1.i ;
//   axis4.motor.power.i2 + axis4.motor.La.i - axis4.motor.Rp1.i = 0.0 ;
//   axis4.motor.Rp1.v = axis4.motor.Rp1.R_actual * axis4.motor.Rp1.i ;
//   axis4.motor.Rp1.LossPower = axis4.motor.Rp1.v * axis4.motor.Rp1.i ;
//   axis4.motor.Rp1.v = (-axis4.motor.C.v) - axis4.motor.power.v2 ;
//   axis4.motor.Ra.v = axis4.motor.Ra.R_actual * axis4.motor.La.i ;
//   axis4.motor.Ra.LossPower = axis4.motor.Ra.v * axis4.motor.La.i ;
//   axis4.motor.Ra.v = axis4.motor.power.v2 - axis4.motor.La.p.v ;
//   axis4.motor.La.v = axis4.motor.La.p.v - axis4.motor.emf.v ;
//   axis4.motor.La.L * der(axis4.motor.La.i) = axis4.motor.La.v ;
//   axis3.gear.spring.w_rel = der(axis3.gear.spring.phi_rel) ;
//   axis3.gear.spring.tau_d = axis3.gear.spring.d * axis3.gear.spring.w_rel ;
//   axis3.gear.spring.lossPower = axis3.gear.spring.tau_d * axis3.gear.spring.w_rel ;
//   axis3.gear.spring.tau_c = axis3.gear.spring.c * (axis3.gear.spring.phi_rel - axis3.gear.spring.phi_rel0) ;
//   axis3.gear.spring.tau = axis3.gear.spring.tau_c + axis3.gear.spring.tau_d ;
//   0.0 = (-mechanics.tau[3]) - axis3.gear.gear.ratio * axis3.gear.spring.tau ;
//   -axis3.motor.Jmotor.flange_a.tau = (-axis3.motor.emf.k) * axis3.motor.La.i ;
//   axis3.motor.emf.k * axis3.gear.bearingFriction.w = axis3.motor.emf.v ;
//   axis3.gear.bearingFriction.startForward = pre(axis3.gear.bearingFriction.mode) == 0 and (axis3.gear.bearingFriction.sa > axis3.gear.bearingFriction.tau0_max or pre(axis3.gear.bearingFriction.startForward) and axis3.gear.bearingFriction.sa > axis3.gear.bearingFriction.tau0) or pre(axis3.gear.bearingFriction.mode) == -1 and axis3.gear.bearingFriction.w > axis3.gear.bearingFriction.w_small or initial() and axis3.gear.bearingFriction.w > 0.0 ;
//   axis3.gear.bearingFriction.locked = not (pre(axis3.gear.bearingFriction.mode) == 1 or axis3.gear.bearingFriction.startForward or pre(axis3.gear.bearingFriction.mode) == -1 or axis3.gear.bearingFriction.startBackward) ;
//   axis3.gear.bearingFriction.startBackward = pre(axis3.gear.bearingFriction.mode) == 0 and (axis3.gear.bearingFriction.sa < (-axis3.gear.bearingFriction.tau0_max) or pre(axis3.gear.bearingFriction.startBackward) and axis3.gear.bearingFriction.sa < (-axis3.gear.bearingFriction.tau0)) or pre(axis3.gear.bearingFriction.mode) == 1 and axis3.gear.bearingFriction.w < (-axis3.gear.bearingFriction.w_small) or initial() and axis3.gear.bearingFriction.w < 0.0 ;
//   axis3.motor.Jmotor.a = if axis3.gear.bearingFriction.locked then 0.0 else if axis3.gear.bearingFriction.startForward then axis3.gear.bearingFriction.sa - axis3.gear.bearingFriction.tau0_max else if axis3.gear.bearingFriction.startBackward then axis3.gear.bearingFriction.sa + axis3.gear.bearingFriction.tau0_max else if pre(axis3.gear.bearingFriction.mode) == 1 then axis3.gear.bearingFriction.sa - axis3.gear.bearingFriction.tau0_max else axis3.gear.bearingFriction.sa + axis3.gear.bearingFriction.tau0_max ;
//   axis3.gear.bearingFriction.tau = if axis3.gear.bearingFriction.locked then axis3.gear.bearingFriction.sa else if axis3.gear.bearingFriction.startForward then Modelica.Math.tempInterpol1(axis3.gear.bearingFriction.w, {{axis3.gear.bearingFriction.tau_pos[1,1], axis3.gear.bearingFriction.tau_pos[1,2]}, {axis3.gear.bearingFriction.tau_pos[2,1], axis3.gear.bearingFriction.tau_pos[2,2]}}, 2) else if axis3.gear.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-axis3.gear.bearingFriction.w, {{axis3.gear.bearingFriction.tau_pos[1,1], axis3.gear.bearingFriction.tau_pos[1,2]}, {axis3.gear.bearingFriction.tau_pos[2,1], axis3.gear.bearingFriction.tau_pos[2,2]}}, 2) else if pre(axis3.gear.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(axis3.gear.bearingFriction.w, {{axis3.gear.bearingFriction.tau_pos[1,1], axis3.gear.bearingFriction.tau_pos[1,2]}, {axis3.gear.bearingFriction.tau_pos[2,1], axis3.gear.bearingFriction.tau_pos[2,2]}}, 2) else -Modelica.Math.tempInterpol1(-axis3.gear.bearingFriction.w, {{axis3.gear.bearingFriction.tau_pos[1,1], axis3.gear.bearingFriction.tau_pos[1,2]}, {axis3.gear.bearingFriction.tau_pos[2,1], axis3.gear.bearingFriction.tau_pos[2,2]}}, 2) ;
//   axis3.gear.flange_a.tau + axis3.gear.spring.tau - axis3.gear.bearingFriction.tau = 0.0 ;
//   axis3.motor.Jmotor.J * axis3.motor.Jmotor.a = axis3.motor.Jmotor.flange_a.tau - axis3.gear.flange_a.tau ;
//   axis3.gear.bearingFriction.mode = if (pre(axis3.gear.bearingFriction.mode) == 1 or pre(axis3.gear.bearingFriction.mode) == 2 or axis3.gear.bearingFriction.startForward) and axis3.gear.bearingFriction.w > 0.0 then 1 else if (pre(axis3.gear.bearingFriction.mode) == -1 or pre(axis3.gear.bearingFriction.mode) == 2 or axis3.gear.bearingFriction.startBackward) and axis3.gear.bearingFriction.w < 0.0 then -1 else 0 ;
//   axis3.gear.bearingFriction.lossPower = axis3.gear.bearingFriction.tau * axis3.gear.bearingFriction.w ;
//   axis3.motor.convert1.y = axis3.motor.convert1.k * axis3.motor.La.i ;
//   axis3.motor.Rd4.v = axis3.motor.Rd4.R_actual * axis3.motor.Rd4.i ;
//   axis3.motor.Rd3.v = axis3.motor.Rd3.R_actual * axis3.motor.Rd4.i ;
//   axis3.motor.Rd3.v = axis3.motor.convert1.y - axis3.motor.Rd4.v ;
//   axis3.motor.Rd4.LossPower = axis3.motor.Rd4.v * axis3.motor.Rd4.i ;
//   axis3.motor.Rd3.LossPower = axis3.motor.Rd3.v * axis3.motor.Rd4.i ;
//   -axis3.motor.C.v = (-axis3.motor.Rp2.R_actual) * axis3.motor.Rp1.i ;
//   axis3.motor.Rp2.LossPower = axis3.motor.C.v * axis3.motor.Rp1.i ;
//   axis3.motor.power.i2 + axis3.motor.La.i - axis3.motor.Rp1.i = 0.0 ;
//   axis3.motor.Rp1.v = axis3.motor.Rp1.R_actual * axis3.motor.Rp1.i ;
//   axis3.motor.Rp1.LossPower = axis3.motor.Rp1.v * axis3.motor.Rp1.i ;
//   axis3.motor.Rp1.v = (-axis3.motor.C.v) - axis3.motor.power.v2 ;
//   axis3.motor.Ra.v = axis3.motor.Ra.R_actual * axis3.motor.La.i ;
//   axis3.motor.Ra.LossPower = axis3.motor.Ra.v * axis3.motor.La.i ;
//   axis3.motor.Ra.v = axis3.motor.power.v2 - axis3.motor.La.p.v ;
//   axis3.motor.La.v = axis3.motor.La.p.v - axis3.motor.emf.v ;
//   axis3.motor.La.L * der(axis3.motor.La.i) = axis3.motor.La.v ;
//   axis2.gear.spring.w_rel = der(axis2.gear.spring.phi_rel) ;
//   axis2.gear.spring.tau_d = axis2.gear.spring.d * axis2.gear.spring.w_rel ;
//   axis2.gear.spring.lossPower = axis2.gear.spring.tau_d * axis2.gear.spring.w_rel ;
//   axis2.gear.spring.tau_c = axis2.gear.spring.c * (axis2.gear.spring.phi_rel - axis2.gear.spring.phi_rel0) ;
//   axis2.gear.spring.tau = axis2.gear.spring.tau_c + axis2.gear.spring.tau_d ;
//   0.0 = (-mechanics.tau[2]) - axis2.gear.gear.ratio * axis2.gear.spring.tau ;
//   -axis2.motor.Jmotor.flange_a.tau = (-axis2.motor.emf.k) * axis2.motor.La.i ;
//   axis2.motor.emf.k * axis2.gear.bearingFriction.w = axis2.motor.emf.v ;
//   axis2.gear.bearingFriction.startForward = pre(axis2.gear.bearingFriction.mode) == 0 and (axis2.gear.bearingFriction.sa > axis2.gear.bearingFriction.tau0_max or pre(axis2.gear.bearingFriction.startForward) and axis2.gear.bearingFriction.sa > axis2.gear.bearingFriction.tau0) or pre(axis2.gear.bearingFriction.mode) == -1 and axis2.gear.bearingFriction.w > axis2.gear.bearingFriction.w_small or initial() and axis2.gear.bearingFriction.w > 0.0 ;
//   axis2.motor.Jmotor.J * axis2.motor.Jmotor.a = axis2.motor.Jmotor.flange_a.tau - axis2.gear.flange_a.tau ;
//   axis2.gear.flange_a.tau + axis2.gear.spring.tau - axis2.gear.bearingFriction.tau = 0.0 ;
//   axis2.gear.bearingFriction.tau = if axis2.gear.bearingFriction.locked then axis2.gear.bearingFriction.sa else if axis2.gear.bearingFriction.startForward then Modelica.Math.tempInterpol1(axis2.gear.bearingFriction.w, {{axis2.gear.bearingFriction.tau_pos[1,1], axis2.gear.bearingFriction.tau_pos[1,2]}, {axis2.gear.bearingFriction.tau_pos[2,1], axis2.gear.bearingFriction.tau_pos[2,2]}}, 2) else if axis2.gear.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-axis2.gear.bearingFriction.w, {{axis2.gear.bearingFriction.tau_pos[1,1], axis2.gear.bearingFriction.tau_pos[1,2]}, {axis2.gear.bearingFriction.tau_pos[2,1], axis2.gear.bearingFriction.tau_pos[2,2]}}, 2) else if pre(axis2.gear.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(axis2.gear.bearingFriction.w, {{axis2.gear.bearingFriction.tau_pos[1,1], axis2.gear.bearingFriction.tau_pos[1,2]}, {axis2.gear.bearingFriction.tau_pos[2,1], axis2.gear.bearingFriction.tau_pos[2,2]}}, 2) else -Modelica.Math.tempInterpol1(-axis2.gear.bearingFriction.w, {{axis2.gear.bearingFriction.tau_pos[1,1], axis2.gear.bearingFriction.tau_pos[1,2]}, {axis2.gear.bearingFriction.tau_pos[2,1], axis2.gear.bearingFriction.tau_pos[2,2]}}, 2) ;
//   axis2.gear.bearingFriction.locked = not (pre(axis2.gear.bearingFriction.mode) == 1 or axis2.gear.bearingFriction.startForward or pre(axis2.gear.bearingFriction.mode) == -1 or axis2.gear.bearingFriction.startBackward) ;
//   axis2.gear.bearingFriction.startBackward = pre(axis2.gear.bearingFriction.mode) == 0 and (axis2.gear.bearingFriction.sa < (-axis2.gear.bearingFriction.tau0_max) or pre(axis2.gear.bearingFriction.startBackward) and axis2.gear.bearingFriction.sa < (-axis2.gear.bearingFriction.tau0)) or pre(axis2.gear.bearingFriction.mode) == 1 and axis2.gear.bearingFriction.w < (-axis2.gear.bearingFriction.w_small) or initial() and axis2.gear.bearingFriction.w < 0.0 ;
//   axis2.motor.Jmotor.a = if axis2.gear.bearingFriction.locked then 0.0 else if axis2.gear.bearingFriction.startForward then axis2.gear.bearingFriction.sa - axis2.gear.bearingFriction.tau0_max else if axis2.gear.bearingFriction.startBackward then axis2.gear.bearingFriction.sa + axis2.gear.bearingFriction.tau0_max else if pre(axis2.gear.bearingFriction.mode) == 1 then axis2.gear.bearingFriction.sa - axis2.gear.bearingFriction.tau0_max else axis2.gear.bearingFriction.sa + axis2.gear.bearingFriction.tau0_max ;
//   axis2.gear.bearingFriction.lossPower = axis2.gear.bearingFriction.tau * axis2.gear.bearingFriction.w ;
//   axis2.gear.bearingFriction.mode = if (pre(axis2.gear.bearingFriction.mode) == 1 or pre(axis2.gear.bearingFriction.mode) == 2 or axis2.gear.bearingFriction.startForward) and axis2.gear.bearingFriction.w > 0.0 then 1 else if (pre(axis2.gear.bearingFriction.mode) == -1 or pre(axis2.gear.bearingFriction.mode) == 2 or axis2.gear.bearingFriction.startBackward) and axis2.gear.bearingFriction.w < 0.0 then -1 else 0 ;
//   axis2.motor.convert1.y = axis2.motor.convert1.k * axis2.motor.La.i ;
//   axis2.motor.Rd4.v = axis2.motor.Rd4.R_actual * axis2.motor.Rd4.i ;
//   axis2.motor.Rd3.v = axis2.motor.Rd3.R_actual * axis2.motor.Rd4.i ;
//   axis2.motor.Rd3.v = axis2.motor.convert1.y - axis2.motor.Rd4.v ;
//   axis2.motor.Rd4.LossPower = axis2.motor.Rd4.v * axis2.motor.Rd4.i ;
//   axis2.motor.Rd3.LossPower = axis2.motor.Rd3.v * axis2.motor.Rd4.i ;
//   -axis2.motor.C.v = (-axis2.motor.Rp2.R_actual) * axis2.motor.Rp1.i ;
//   axis2.motor.Rp2.LossPower = axis2.motor.C.v * axis2.motor.Rp1.i ;
//   axis2.motor.power.i2 + axis2.motor.La.i - axis2.motor.Rp1.i = 0.0 ;
//   axis2.motor.Rp1.v = axis2.motor.Rp1.R_actual * axis2.motor.Rp1.i ;
//   axis2.motor.Rp1.LossPower = axis2.motor.Rp1.v * axis2.motor.Rp1.i ;
//   axis2.motor.Rp1.v = (-axis2.motor.C.v) - axis2.motor.power.v2 ;
//   axis2.motor.Ra.v = axis2.motor.Ra.R_actual * axis2.motor.La.i ;
//   axis2.motor.Ra.LossPower = axis2.motor.Ra.v * axis2.motor.La.i ;
//   axis2.motor.Ra.v = axis2.motor.power.v2 - axis2.motor.La.p.v ;
//   axis2.motor.La.v = axis2.motor.La.p.v - axis2.motor.emf.v ;
//   axis2.motor.La.L * der(axis2.motor.La.i) = axis2.motor.La.v ;
//   axis1.gear.spring.w_rel = der(axis1.gear.spring.phi_rel) ;
//   axis1.gear.spring.tau_d = axis1.gear.spring.d * axis1.gear.spring.w_rel ;
//   axis1.gear.spring.lossPower = axis1.gear.spring.tau_d * axis1.gear.spring.w_rel ;
//   axis1.gear.spring.tau_c = axis1.gear.spring.c * (axis1.gear.spring.phi_rel - axis1.gear.spring.phi_rel0) ;
//   axis1.gear.spring.tau = axis1.gear.spring.tau_c + axis1.gear.spring.tau_d ;
//   0.0 = (-mechanics.tau[1]) - axis1.gear.gear.ratio * axis1.gear.spring.tau ;
//   -axis1.motor.Jmotor.flange_a.tau = (-axis1.motor.emf.k) * axis1.motor.La.i ;
//   axis1.motor.emf.k * axis1.gear.bearingFriction.w = axis1.motor.emf.v ;
//   axis1.gear.bearingFriction.startForward = pre(axis1.gear.bearingFriction.mode) == 0 and (axis1.gear.bearingFriction.sa > axis1.gear.bearingFriction.tau0_max or pre(axis1.gear.bearingFriction.startForward) and axis1.gear.bearingFriction.sa > axis1.gear.bearingFriction.tau0) or pre(axis1.gear.bearingFriction.mode) == -1 and axis1.gear.bearingFriction.w > axis1.gear.bearingFriction.w_small or initial() and axis1.gear.bearingFriction.w > 0.0 ;
//   axis1.gear.bearingFriction.locked = not (pre(axis1.gear.bearingFriction.mode) == 1 or axis1.gear.bearingFriction.startForward or pre(axis1.gear.bearingFriction.mode) == -1 or axis1.gear.bearingFriction.startBackward) ;
//   axis1.gear.bearingFriction.startBackward = pre(axis1.gear.bearingFriction.mode) == 0 and (axis1.gear.bearingFriction.sa < (-axis1.gear.bearingFriction.tau0_max) or pre(axis1.gear.bearingFriction.startBackward) and axis1.gear.bearingFriction.sa < (-axis1.gear.bearingFriction.tau0)) or pre(axis1.gear.bearingFriction.mode) == 1 and axis1.gear.bearingFriction.w < (-axis1.gear.bearingFriction.w_small) or initial() and axis1.gear.bearingFriction.w < 0.0 ;
//   axis1.motor.Jmotor.a = if axis1.gear.bearingFriction.locked then 0.0 else if axis1.gear.bearingFriction.startForward then axis1.gear.bearingFriction.sa - axis1.gear.bearingFriction.tau0_max else if axis1.gear.bearingFriction.startBackward then axis1.gear.bearingFriction.sa + axis1.gear.bearingFriction.tau0_max else if pre(axis1.gear.bearingFriction.mode) == 1 then axis1.gear.bearingFriction.sa - axis1.gear.bearingFriction.tau0_max else axis1.gear.bearingFriction.sa + axis1.gear.bearingFriction.tau0_max ;
//   axis1.gear.bearingFriction.tau = if axis1.gear.bearingFriction.locked then axis1.gear.bearingFriction.sa else if axis1.gear.bearingFriction.startForward then Modelica.Math.tempInterpol1(axis1.gear.bearingFriction.w, {{axis1.gear.bearingFriction.tau_pos[1,1], axis1.gear.bearingFriction.tau_pos[1,2]}, {axis1.gear.bearingFriction.tau_pos[2,1], axis1.gear.bearingFriction.tau_pos[2,2]}}, 2) else if axis1.gear.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-axis1.gear.bearingFriction.w, {{axis1.gear.bearingFriction.tau_pos[1,1], axis1.gear.bearingFriction.tau_pos[1,2]}, {axis1.gear.bearingFriction.tau_pos[2,1], axis1.gear.bearingFriction.tau_pos[2,2]}}, 2) else if pre(axis1.gear.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(axis1.gear.bearingFriction.w, {{axis1.gear.bearingFriction.tau_pos[1,1], axis1.gear.bearingFriction.tau_pos[1,2]}, {axis1.gear.bearingFriction.tau_pos[2,1], axis1.gear.bearingFriction.tau_pos[2,2]}}, 2) else -Modelica.Math.tempInterpol1(-axis1.gear.bearingFriction.w, {{axis1.gear.bearingFriction.tau_pos[1,1], axis1.gear.bearingFriction.tau_pos[1,2]}, {axis1.gear.bearingFriction.tau_pos[2,1], axis1.gear.bearingFriction.tau_pos[2,2]}}, 2) ;
//   axis1.gear.flange_a.tau + axis1.gear.spring.tau - axis1.gear.bearingFriction.tau = 0.0 ;
//   axis1.motor.Jmotor.J * axis1.motor.Jmotor.a = axis1.motor.Jmotor.flange_a.tau - axis1.gear.flange_a.tau ;
//   axis1.gear.bearingFriction.mode = if (pre(axis1.gear.bearingFriction.mode) == 1 or pre(axis1.gear.bearingFriction.mode) == 2 or axis1.gear.bearingFriction.startForward) and axis1.gear.bearingFriction.w > 0.0 then 1 else if (pre(axis1.gear.bearingFriction.mode) == -1 or pre(axis1.gear.bearingFriction.mode) == 2 or axis1.gear.bearingFriction.startBackward) and axis1.gear.bearingFriction.w < 0.0 then -1 else 0 ;
//   axis1.gear.bearingFriction.lossPower = axis1.gear.bearingFriction.tau * axis1.gear.bearingFriction.w ;
//   axis1.motor.convert1.y = axis1.motor.convert1.k * axis1.motor.La.i ;
//   axis1.motor.Rd4.v = axis1.motor.Rd4.R_actual * axis1.motor.Rd4.i ;
//   axis1.motor.Rd3.v = axis1.motor.convert1.y - axis1.motor.Rd4.v ;
//   axis1.motor.Rd3.v = axis1.motor.Rd3.R_actual * axis1.motor.Rd4.i ;
//   axis1.motor.Rd4.LossPower = axis1.motor.Rd4.v * axis1.motor.Rd4.i ;
//   axis1.motor.Rd3.LossPower = axis1.motor.Rd3.v * axis1.motor.Rd4.i ;
//   -axis1.motor.C.v = (-axis1.motor.Rp2.R_actual) * axis1.motor.Rp1.i ;
//   axis1.motor.Rp2.LossPower = axis1.motor.C.v * axis1.motor.Rp1.i ;
//   axis1.motor.power.i2 + axis1.motor.La.i - axis1.motor.Rp1.i = 0.0 ;
//   axis1.motor.Rp1.v = axis1.motor.Rp1.R_actual * axis1.motor.Rp1.i ;
//   axis1.motor.Rp1.LossPower = axis1.motor.Rp1.v * axis1.motor.Rp1.i ;
//   axis1.motor.Rp1.v = (-axis1.motor.C.v) - axis1.motor.power.v2 ;
//   axis1.motor.Ra.v = axis1.motor.Ra.R_actual * axis1.motor.La.i ;
//   axis1.motor.Ra.LossPower = axis1.motor.Ra.v * axis1.motor.La.i ;
//   axis1.motor.Ra.v = axis1.motor.power.v2 - axis1.motor.La.p.v ;
//   axis1.motor.La.v = axis1.motor.La.p.v - axis1.motor.emf.v ;
//   axis1.motor.La.L * der(axis1.motor.La.i) = axis1.motor.La.v ;
//   pathPlanning.pathToAxis6.moving[6] = time <= pathPlanning.path.endTime ;
//   pathPlanning.path.sd = if time < pathPlanning.path.startTime then 0.0 else if time < pathPlanning.path.Ta2s then 6.875493541569877 * (time - pathPlanning.path.startTime) else if time < pathPlanning.path.Tvs then 0.8073496204116145 else if time < pathPlanning.path.endTime then 0.8073496204116145 + -6.875493541569877 * (time - pathPlanning.path.Tvs) else 0.0 ;
//   axis1.initializeFlange.set_w_start.w_start = 2.094395102393195 * pathPlanning.path.sd ;
//   axis1.controller.add3.u1 = axis1.controller.gain2.k * axis1.initializeFlange.set_w_start.w_start ;
//   axis2.initializeFlange.set_w_start.w_start = -1.570796326794897 * pathPlanning.path.sd ;
//   axis2.controller.add3.u1 = axis2.controller.gain2.k * axis2.initializeFlange.set_w_start.w_start ;
//   axis3.initializeFlange.set_w_start.w_start = -2.181661564992912 * pathPlanning.path.sd ;
//   axis3.controller.add3.u1 = axis3.controller.gain2.k * axis3.initializeFlange.set_w_start.w_start ;
//   axis6.initializeFlange.set_w_start.w_start = 0.7853981633974483 * pathPlanning.path.sd ;
//   axis4.controller.add3.u1 = axis4.controller.gain2.k * axis6.initializeFlange.set_w_start.w_start ;
//   axis6.controller.add3.u1 = axis6.controller.gain2.k * axis6.initializeFlange.set_w_start.w_start ;
//   axis6.initializeFlange.set_w_start.w_start = axis4.initializeFlange.set_w_start.w_start ;
//   axis5.initializeFlange.set_w_start.w_start = 3.839724354387525 * pathPlanning.path.sd ;
//   axis5.controller.add3.u1 = axis5.controller.gain2.k * axis5.initializeFlange.set_w_start.w_start ;
//   pathPlanning.path.s = if time < pathPlanning.path.startTime then 0.0 else if time < pathPlanning.path.Ta2s then 3.437746770784939 * (time - pathPlanning.path.startTime) ^ 2.0 else if time < pathPlanning.path.Tvs then 0.04740120877416677 + 0.8073496204116145 * (time - pathPlanning.path.Ta2s) else if time < pathPlanning.path.endTime then 0.9525987912258332 + 0.8073496204116145 * (time - pathPlanning.path.Tvs) + -3.437746770784939 * (time - pathPlanning.path.Tvs) ^ 2.0 else 1.0 ;
//   axis1.initializeFlange.set_phi_start.phi_start = -1.047197551196598 + 2.094395102393195 * pathPlanning.path.s ;
//   axis1.controller.feedback1.u1 = axis1.controller.gain1.k * axis1.initializeFlange.set_phi_start.phi_start ;
//   axis1.controller.P.u = axis1.controller.feedback1.u1 - axis1.motor.emf.phi ;
//   axis1.controller.P.y = axis1.controller.P.k * axis1.controller.P.u ;
//   axis1.controller.PI.u = axis1.controller.add3.k1 * axis1.controller.add3.u1 + axis1.controller.add3.k2 * axis1.controller.P.y + axis1.controller.add3.k3 * axis1.gear.bearingFriction.w ;
//   der(axis1.controller.PI.x) = axis1.controller.PI.u / axis1.controller.PI.T ;
//   axis1.axisControlBus.current_ref = axis1.controller.PI.k * (axis1.controller.PI.x + axis1.controller.PI.u) ;
//   axis1.motor.Vs.v = axis1.motor.convert2.k * axis1.axisControlBus.current_ref ;
//   axis1.motor.Rd2.v = axis1.motor.Vs.v - axis1.motor.Rd4.v ;
//   axis1.motor.Rd2.v = axis1.motor.Rd2.R_actual * axis1.motor.Rd1.i ;
//   axis1.motor.Rd1.v = axis1.motor.Rd1.R_actual * axis1.motor.Rd1.i ;
//   axis1.motor.Rd1.v = axis1.motor.Rd4.v - axis1.motor.Ri.v ;
//   axis1.motor.Ri.v = axis1.motor.Ri.R_actual * axis1.motor.OpI.i2 ;
//   axis1.motor.OpI.i2 = axis1.motor.C.C * der(axis1.motor.C.v) ;
//   axis1.motor.Ri.LossPower = axis1.motor.Ri.v * axis1.motor.OpI.i2 ;
//   axis1.motor.Rd1.LossPower = axis1.motor.Rd1.v * axis1.motor.Rd1.i ;
//   axis1.motor.diff.i2 + axis1.motor.OpI.i2 - axis1.motor.Rd1.i = 0.0 ;
//   axis1.motor.g3.p.i + (-axis1.motor.OpI.i2) - axis1.motor.Rd4.i - axis1.motor.power.i2 - axis1.motor.diff.i2 = 0.0 ;
//   axis1.motor.Rd2.LossPower = axis1.motor.Rd2.v * axis1.motor.Rd1.i ;
//   axis2.initializeFlange.set_phi_start.phi_start = 0.3490658503988659 + -1.570796326794897 * pathPlanning.path.s ;
//   axis2.controller.feedback1.u1 = axis2.controller.gain1.k * axis2.initializeFlange.set_phi_start.phi_start ;
//   axis2.controller.P.u = axis2.controller.feedback1.u1 - axis2.motor.emf.phi ;
//   axis2.controller.P.y = axis2.controller.P.k * axis2.controller.P.u ;
//   axis2.controller.PI.u = axis2.controller.add3.k1 * axis2.controller.add3.u1 + axis2.controller.add3.k2 * axis2.controller.P.y + axis2.controller.add3.k3 * axis2.gear.bearingFriction.w ;
//   der(axis2.controller.PI.x) = axis2.controller.PI.u / axis2.controller.PI.T ;
//   axis2.axisControlBus.current_ref = axis2.controller.PI.k * (axis2.controller.PI.x + axis2.controller.PI.u) ;
//   axis2.motor.Vs.v = axis2.motor.convert2.k * axis2.axisControlBus.current_ref ;
//   axis2.motor.Rd2.v = axis2.motor.Vs.v - axis2.motor.Rd4.v ;
//   axis2.motor.Rd2.v = axis2.motor.Rd2.R_actual * axis2.motor.Rd1.i ;
//   axis2.motor.Rd1.v = axis2.motor.Rd1.R_actual * axis2.motor.Rd1.i ;
//   axis2.motor.Rd1.v = axis2.motor.Rd4.v - axis2.motor.Ri.v ;
//   axis2.motor.Ri.v = axis2.motor.Ri.R_actual * axis2.motor.OpI.i2 ;
//   axis2.motor.OpI.i2 = axis2.motor.C.C * der(axis2.motor.C.v) ;
//   axis2.motor.Ri.LossPower = axis2.motor.Ri.v * axis2.motor.OpI.i2 ;
//   axis2.motor.Rd1.LossPower = axis2.motor.Rd1.v * axis2.motor.Rd1.i ;
//   axis2.motor.diff.i2 + axis2.motor.OpI.i2 - axis2.motor.Rd1.i = 0.0 ;
//   axis2.motor.g3.p.i + (-axis2.motor.OpI.i2) - axis2.motor.Rd4.i - axis2.motor.power.i2 - axis2.motor.diff.i2 = 0.0 ;
//   axis2.motor.Rd2.LossPower = axis2.motor.Rd2.v * axis2.motor.Rd1.i ;
//   axis3.initializeFlange.set_phi_start.phi_start = 1.570796326794897 + -2.181661564992912 * pathPlanning.path.s ;
//   axis3.controller.feedback1.u1 = axis3.controller.gain1.k * axis3.initializeFlange.set_phi_start.phi_start ;
//   axis3.controller.P.u = axis3.controller.feedback1.u1 - axis3.motor.emf.phi ;
//   axis3.controller.P.y = axis3.controller.P.k * axis3.controller.P.u ;
//   axis3.controller.PI.u = axis3.controller.add3.k1 * axis3.controller.add3.u1 + axis3.controller.add3.k2 * axis3.controller.P.y + axis3.controller.add3.k3 * axis3.gear.bearingFriction.w ;
//   der(axis3.controller.PI.x) = axis3.controller.PI.u / axis3.controller.PI.T ;
//   axis3.axisControlBus.current_ref = axis3.controller.PI.k * (axis3.controller.PI.x + axis3.controller.PI.u) ;
//   axis3.motor.Vs.v = axis3.motor.convert2.k * axis3.axisControlBus.current_ref ;
//   axis3.motor.Rd2.v = axis3.motor.Vs.v - axis3.motor.Rd4.v ;
//   axis3.motor.Rd2.v = axis3.motor.Rd2.R_actual * axis3.motor.Rd1.i ;
//   axis3.motor.Rd1.v = axis3.motor.Rd1.R_actual * axis3.motor.Rd1.i ;
//   axis3.motor.Rd1.v = axis3.motor.Rd4.v - axis3.motor.Ri.v ;
//   axis3.motor.Ri.v = axis3.motor.Ri.R_actual * axis3.motor.OpI.i2 ;
//   axis3.motor.OpI.i2 = axis3.motor.C.C * der(axis3.motor.C.v) ;
//   axis3.motor.Ri.LossPower = axis3.motor.Ri.v * axis3.motor.OpI.i2 ;
//   axis3.motor.Rd1.LossPower = axis3.motor.Rd1.v * axis3.motor.Rd1.i ;
//   axis3.motor.diff.i2 + axis3.motor.OpI.i2 - axis3.motor.Rd1.i = 0.0 ;
//   axis3.motor.g3.p.i + (-axis3.motor.OpI.i2) - axis3.motor.Rd4.i - axis3.motor.power.i2 - axis3.motor.diff.i2 = 0.0 ;
//   axis3.motor.Rd2.LossPower = axis3.motor.Rd2.v * axis3.motor.Rd1.i ;
//   axis6.initializeFlange.set_phi_start.phi_start = 0.7853981633974483 * pathPlanning.path.s ;
//   axis4.controller.feedback1.u1 = axis4.controller.gain1.k * axis6.initializeFlange.set_phi_start.phi_start ;
//   axis4.controller.P.u = axis4.controller.feedback1.u1 - axis4.motor.emf.phi ;
//   axis4.controller.P.y = axis4.controller.P.k * axis4.controller.P.u ;
//   axis4.controller.PI.u = axis4.controller.add3.k1 * axis4.controller.add3.u1 + axis4.controller.add3.k2 * axis4.controller.P.y + axis4.controller.add3.k3 * axis4.motor.Jmotor.w ;
//   der(axis4.controller.PI.x) = axis4.controller.PI.u / axis4.controller.PI.T ;
//   axis4.axisControlBus.current_ref = axis4.controller.PI.k * (axis4.controller.PI.x + axis4.controller.PI.u) ;
//   axis4.motor.Vs.v = axis4.motor.convert2.k * axis4.axisControlBus.current_ref ;
//   axis4.motor.Rd2.v = axis4.motor.Vs.v - axis4.motor.Rd4.v ;
//   axis4.motor.Rd2.v = axis4.motor.Rd2.R_actual * axis4.motor.Rd1.i ;
//   axis4.motor.Rd1.v = axis4.motor.Rd1.R_actual * axis4.motor.Rd1.i ;
//   axis4.motor.Rd1.v = axis4.motor.Rd4.v - axis4.motor.Ri.v ;
//   axis4.motor.Ri.v = axis4.motor.Ri.R_actual * axis4.motor.OpI.i2 ;
//   axis4.motor.OpI.i2 = axis4.motor.C.C * der(axis4.motor.C.v) ;
//   axis4.motor.Ri.LossPower = axis4.motor.Ri.v * axis4.motor.OpI.i2 ;
//   axis4.motor.Rd1.LossPower = axis4.motor.Rd1.v * axis4.motor.Rd1.i ;
//   axis4.motor.diff.i2 + axis4.motor.OpI.i2 - axis4.motor.Rd1.i = 0.0 ;
//   axis4.motor.g3.p.i + (-axis4.motor.OpI.i2) - axis4.motor.Rd4.i - axis4.motor.power.i2 - axis4.motor.diff.i2 = 0.0 ;
//   axis4.motor.Rd2.LossPower = axis4.motor.Rd2.v * axis4.motor.Rd1.i ;
//   axis6.controller.feedback1.u1 = axis6.controller.gain1.k * axis6.initializeFlange.set_phi_start.phi_start ;
//   axis6.controller.P.u = axis6.controller.feedback1.u1 - axis6.motor.emf.phi ;
//   axis6.controller.P.y = axis6.controller.P.k * axis6.controller.P.u ;
//   axis6.controller.PI.u = axis6.controller.add3.k1 * axis6.controller.add3.u1 + axis6.controller.add3.k2 * axis6.controller.P.y + axis6.controller.add3.k3 * axis6.motor.Jmotor.w ;
//   der(axis6.controller.PI.x) = axis6.controller.PI.u / axis6.controller.PI.T ;
//   axis6.axisControlBus.current_ref = axis6.controller.PI.k * (axis6.controller.PI.x + axis6.controller.PI.u) ;
//   axis6.motor.Vs.v = axis6.motor.convert2.k * axis6.axisControlBus.current_ref ;
//   axis6.motor.Rd2.v = axis6.motor.Vs.v - axis6.motor.Rd4.v ;
//   axis6.motor.Rd2.v = axis6.motor.Rd2.R_actual * axis6.motor.Rd1.i ;
//   axis6.motor.Rd1.v = axis6.motor.Rd1.R_actual * axis6.motor.Rd1.i ;
//   axis6.motor.Rd1.v = axis6.motor.Rd4.v - axis6.motor.Ri.v ;
//   axis6.motor.Ri.v = axis6.motor.Ri.R_actual * axis6.motor.OpI.i2 ;
//   axis6.motor.OpI.i2 = axis6.motor.C.C * der(axis6.motor.C.v) ;
//   axis6.motor.Ri.LossPower = axis6.motor.Ri.v * axis6.motor.OpI.i2 ;
//   axis6.motor.Rd1.LossPower = axis6.motor.Rd1.v * axis6.motor.Rd1.i ;
//   axis6.motor.diff.i2 + axis6.motor.OpI.i2 - axis6.motor.Rd1.i = 0.0 ;
//   axis6.motor.g3.p.i + (-axis6.motor.OpI.i2) - axis6.motor.Rd4.i - axis6.motor.power.i2 - axis6.motor.diff.i2 = 0.0 ;
//   axis6.motor.Rd2.LossPower = axis6.motor.Rd2.v * axis6.motor.Rd1.i ;
//   axis6.initializeFlange.set_phi_start.phi_start = axis4.initializeFlange.set_phi_start.phi_start ;
//   axis5.initializeFlange.set_phi_start.phi_start = -1.919862177193763 + 3.839724354387525 * pathPlanning.path.s ;
//   axis5.controller.feedback1.u1 = axis5.controller.gain1.k * axis5.initializeFlange.set_phi_start.phi_start ;
//   axis5.controller.P.u = axis5.controller.feedback1.u1 - axis5.motor.emf.phi ;
//   axis5.controller.P.y = axis5.controller.P.k * axis5.controller.P.u ;
//   axis5.controller.PI.u = axis5.controller.add3.k1 * axis5.controller.add3.u1 + axis5.controller.add3.k2 * axis5.controller.P.y + axis5.controller.add3.k3 * axis5.motor.Jmotor.w ;
//   der(axis5.controller.PI.x) = axis5.controller.PI.u / axis5.controller.PI.T ;
//   axis5.axisControlBus.current_ref = axis5.controller.PI.k * (axis5.controller.PI.x + axis5.controller.PI.u) ;
//   axis5.motor.Vs.v = axis5.motor.convert2.k * axis5.axisControlBus.current_ref ;
//   axis5.motor.Rd2.v = axis5.motor.Vs.v - axis5.motor.Rd4.v ;
//   axis5.motor.Rd2.v = axis5.motor.Rd2.R_actual * axis5.motor.Rd1.i ;
//   axis5.motor.Rd1.v = axis5.motor.Rd1.R_actual * axis5.motor.Rd1.i ;
//   axis5.motor.Rd1.v = axis5.motor.Rd4.v - axis5.motor.Ri.v ;
//   axis5.motor.Ri.v = axis5.motor.Ri.R_actual * axis5.motor.OpI.i2 ;
//   axis5.motor.OpI.i2 = axis5.motor.C.C * der(axis5.motor.C.v) ;
//   axis5.motor.Ri.LossPower = axis5.motor.Ri.v * axis5.motor.OpI.i2 ;
//   axis5.motor.Rd1.LossPower = axis5.motor.Rd1.v * axis5.motor.Rd1.i ;
//   axis5.motor.diff.i2 + axis5.motor.OpI.i2 - axis5.motor.Rd1.i = 0.0 ;
//   axis5.motor.g3.p.i + (-axis5.motor.OpI.i2) - axis5.motor.Rd4.i - axis5.motor.power.i2 - axis5.motor.diff.i2 = 0.0 ;
//   axis5.motor.Rd2.LossPower = axis5.motor.Rd2.v * axis5.motor.Rd1.i ;
//   pathPlanning.path.sdd = if time < pathPlanning.path.startTime then 0.0 else if time < pathPlanning.path.Ta2s then 6.875493541569877 else if time < pathPlanning.path.Tvs then 0.0 else if time < pathPlanning.path.endTime then -6.875493541569877 else 0.0 ;
//   pathPlanning.pathToAxis1.qdd[1] = 2.094395102393195 * pathPlanning.path.sdd ;
//   pathPlanning.pathToAxis2.qdd[2] = -1.570796326794897 * pathPlanning.path.sdd ;
//   pathPlanning.pathToAxis3.qdd[3] = -2.181661564992912 * pathPlanning.path.sdd ;
//   pathPlanning.pathToAxis6.qdd[6] = 0.7853981633974483 * pathPlanning.path.sdd ;
//   pathPlanning.pathToAxis5.qdd[5] = 3.839724354387525 * pathPlanning.path.sdd ;
//   mechanics.load.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.load.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.load.body.r_CM[3], mechanics.load.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.load.body.r_CM[3], mechanics.load.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.load.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.load.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.load.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.load.body.r_CM[3], mechanics.load.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.load.body.r_CM[3], mechanics.load.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.load.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.load.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.load.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.load.body.r_CM[3], mechanics.load.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.load.body.r_CM[3], mechanics.load.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.load.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.load.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.load.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   mechanics.load.frame_b.r_0[3] = mechanics.load.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.load.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.load.frameTranslation.r[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.load.frameTranslation.r[3] ;
//   mechanics.load.frame_b.r_0[2] = mechanics.load.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.load.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.load.frameTranslation.r[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.load.frameTranslation.r[3] ;
//   mechanics.load.frame_b.r_0[1] = mechanics.load.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.load.frameTranslation.r[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.load.frameTranslation.r[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.load.frameTranslation.r[3] ;
//   mechanics.b6.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b6.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.b6.body.r_CM[3], mechanics.b6.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.b6.body.r_CM[3], mechanics.b6.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.b6.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.b6.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b6.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.b6.body.r_CM[3], mechanics.b6.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.b6.body.r_CM[3], mechanics.b6.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.b6.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.b6.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b6.body.frame_a.r_0[1] + mechanics.b6.frame_b.R.T[1,1] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,1] * mechanics.b6.body.r_CM[3], mechanics.b6.body.frame_a.r_0[2] + mechanics.b6.frame_b.R.T[1,2] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,2] * mechanics.b6.body.r_CM[3], mechanics.b6.body.frame_a.r_0[3] + mechanics.b6.frame_b.R.T[1,3] * mechanics.b6.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b6.body.r_CM[2] + mechanics.b6.frame_b.R.T[3,3] * mechanics.b6.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   mechanics.b5.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b5.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,1] * mechanics.b5.body.r_CM[3], mechanics.b5.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,2] * mechanics.b5.body.r_CM[3], mechanics.b5.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,3] * mechanics.b5.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.b5.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b5.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,1] * mechanics.b5.body.r_CM[3], mechanics.b5.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,2] * mechanics.b5.body.r_CM[3], mechanics.b5.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,3] * mechanics.b5.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.b5.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b5.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,1] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,1] * mechanics.b5.body.r_CM[3], mechanics.b5.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,2] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,2] * mechanics.b5.body.r_CM[3], mechanics.b5.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b5.body.r_CM[1] + mechanics.b6.frame_b.R.T[2,3] * mechanics.b5.body.r_CM[2] + mechanics.b5.frame_b.R.T[3,3] * mechanics.b5.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   mechanics.b4.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b4.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,1] * mechanics.b4.body.r_CM[3], mechanics.b4.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,2] * mechanics.b4.body.r_CM[3], mechanics.b4.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,3] * mechanics.b4.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.b4.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b4.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,1] * mechanics.b4.body.r_CM[3], mechanics.b4.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,2] * mechanics.b4.body.r_CM[3], mechanics.b4.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,3] * mechanics.b4.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.b4.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b4.body.frame_a.r_0[1] + mechanics.b5.frame_b.R.T[1,1] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,1] * mechanics.b4.body.r_CM[3], mechanics.b4.body.frame_a.r_0[2] + mechanics.b5.frame_b.R.T[1,2] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,2] * mechanics.b4.body.r_CM[3], mechanics.b4.body.frame_a.r_0[3] + mechanics.b5.frame_b.R.T[1,3] * mechanics.b4.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b4.body.r_CM[2] + mechanics.b4.frame_b.R.T[3,3] * mechanics.b4.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   mechanics.b3.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b3.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b3.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,1] * mechanics.b3.body.r_CM[3], mechanics.b3.body.frame_a.r_0[2] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,2] * mechanics.b3.body.r_CM[3], mechanics.b3.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b3.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,3] * mechanics.b3.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.b3.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b3.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b3.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,1] * mechanics.b3.body.r_CM[3], mechanics.b3.body.frame_a.r_0[2] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,2] * mechanics.b3.body.r_CM[3], mechanics.b3.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b3.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,3] * mechanics.b3.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.b3.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b3.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b3.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,1] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,1] * mechanics.b3.body.r_CM[3], mechanics.b3.body.frame_a.r_0[2] + mechanics.b4.frame_b.R.T[2,2] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,2] * mechanics.b3.body.r_CM[3], mechanics.b3.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b3.body.r_CM[1] + mechanics.b4.frame_b.R.T[2,3] * mechanics.b3.body.r_CM[2] + mechanics.b3.frame_b.R.T[3,3] * mechanics.b3.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   mechanics.b2.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b2.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b2.body.r_CM[1] + mechanics.b2.frame_b.R.T[2,1] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,1] * mechanics.b2.body.r_CM[3], mechanics.b2.body.frame_a.r_0[2] + mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.body.r_CM[3], mechanics.b2.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b2.body.r_CM[1] + mechanics.b2.frame_b.R.T[2,3] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,3] * mechanics.b2.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.b2.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b2.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b2.body.r_CM[1] + mechanics.b2.frame_b.R.T[2,1] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,1] * mechanics.b2.body.r_CM[3], mechanics.b2.body.frame_a.r_0[2] + mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.body.r_CM[3], mechanics.b2.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b2.body.r_CM[1] + mechanics.b2.frame_b.R.T[2,3] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,3] * mechanics.b2.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.b2.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b2.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b2.body.r_CM[1] + mechanics.b2.frame_b.R.T[2,1] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,1] * mechanics.b2.body.r_CM[3], mechanics.b2.body.frame_a.r_0[2] + mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.body.r_CM[3], mechanics.b2.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b2.body.r_CM[1] + mechanics.b2.frame_b.R.T[2,3] * mechanics.b2.body.r_CM[2] + mechanics.b2.frame_b.R.T[3,3] * mechanics.b2.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   mechanics.b1.body.g_0[3] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b1.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.body.r_CM[1] + mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.body.r_CM[3], mechanics.b1.body.frame_a.r_0[2] + mechanics.b1.body.r_CM[2], mechanics.b1.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.body.r_CM[1] + mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[3] ;
//   mechanics.b1.body.g_0[2] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b1.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.body.r_CM[1] + mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.body.r_CM[3], mechanics.b1.body.frame_a.r_0[2] + mechanics.b1.body.r_CM[2], mechanics.b1.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.body.r_CM[1] + mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[2] ;
//   mechanics.b1.body.g_0[1] = Modelica.Mechanics.MultiBody.World$mechanics$world.gravityAcceleration({mechanics.b1.body.frame_a.r_0[1] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.body.r_CM[1] + mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.body.r_CM[3], mechanics.b1.body.frame_a.r_0[2] + mechanics.b1.body.r_CM[2], mechanics.b1.body.frame_a.r_0[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.body.r_CM[1] + mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.body.r_CM[3]}, Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity, {0.0, -9.81, 0.0}, 398600000000000.0)[1] ;
//   $DER.mechanics.r6.R_rel.T[3,3] = (-sin(axis6.initializeFlange.set_w_start.flange.phi)) * der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r6.R_rel.T[3,1] = cos(axis6.initializeFlange.set_w_start.flange.phi) * der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r6.R_rel.T[1,3] = (-cos(axis6.initializeFlange.set_w_start.flange.phi)) * der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r6.R_rel.T[1,1] = (-sin(axis6.initializeFlange.set_w_start.flange.phi)) * der(axis6.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r5.R_rel.T[3,3] = (-sin(axis5.initializeFlange.set_w_start.flange.phi)) * der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r5.R_rel.T[3,2] = (-cos(axis5.initializeFlange.set_w_start.flange.phi)) * der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r5.R_rel.T[2,3] = cos(axis5.initializeFlange.set_w_start.flange.phi) * der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r5.R_rel.T[2,2] = (-sin(axis5.initializeFlange.set_w_start.flange.phi)) * der(axis5.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r4.R_rel.T[3,3] = (-sin(axis4.initializeFlange.set_w_start.flange.phi)) * der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r4.R_rel.T[3,1] = cos(axis4.initializeFlange.set_w_start.flange.phi) * der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r4.R_rel.T[1,3] = (-cos(axis4.initializeFlange.set_w_start.flange.phi)) * der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r4.R_rel.T[1,1] = (-sin(axis4.initializeFlange.set_w_start.flange.phi)) * der(axis4.initializeFlange.set_w_start.flange.phi) ;
//   $DER.mechanics.r3.R_rel.T[3,3] = (-sin(axis3.initializeFlange.set_phi_start.flange.phi)) * $DER.axis3.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.r3.R_rel.T[3,2] = (-cos(axis3.initializeFlange.set_phi_start.flange.phi)) * $DER.axis3.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.r3.R_rel.T[2,3] = cos(axis3.initializeFlange.set_phi_start.flange.phi) * $DER.axis3.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.r3.R_rel.T[2,2] = (-sin(axis3.initializeFlange.set_phi_start.flange.phi)) * $DER.axis3.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.r2.R_rel.T[3,3] = (-sin(axis2.initializeFlange.set_phi_start.flange.phi)) * $DER.axis2.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b2.frame_b.R.T[3,2] = (-cos(axis2.initializeFlange.set_phi_start.flange.phi)) * $DER.axis2.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.r2.R_rel.T[2,3] = cos(axis2.initializeFlange.set_phi_start.flange.phi) * $DER.axis2.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b2.frame_b.R.T[2,2] = (-sin(axis2.initializeFlange.set_phi_start.flange.phi)) * $DER.axis2.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b4.frame_b.R.T[2,2] = mechanics.r3.R_rel.T[2,2] * $DER.mechanics.b2.frame_b.R.T[2,2] + $DER.mechanics.r3.R_rel.T[2,2] * mechanics.b2.frame_b.R.T[2,2] + mechanics.r3.R_rel.T[2,3] * $DER.mechanics.b2.frame_b.R.T[3,2] + $DER.mechanics.r3.R_rel.T[2,3] * mechanics.b2.frame_b.R.T[3,2] ;
//   $DER.mechanics.b3.frame_b.R.T[3,2] = mechanics.r3.R_rel.T[3,2] * $DER.mechanics.b2.frame_b.R.T[2,2] + $DER.mechanics.r3.R_rel.T[3,2] * mechanics.b2.frame_b.R.T[2,2] + mechanics.r3.R_rel.T[3,3] * $DER.mechanics.b2.frame_b.R.T[3,2] + $DER.mechanics.r3.R_rel.T[3,3] * mechanics.b2.frame_b.R.T[3,2] ;
//   $DER.mechanics.b5.frame_b.R.T[1,2] = mechanics.r4.R_rel.T[1,3] * $DER.mechanics.b3.frame_b.R.T[3,2] + $DER.mechanics.r4.R_rel.T[1,3] * mechanics.b3.frame_b.R.T[3,2] ;
//   $DER.mechanics.b4.frame_b.R.T[3,2] = mechanics.r4.R_rel.T[3,3] * $DER.mechanics.b3.frame_b.R.T[3,2] + $DER.mechanics.r4.R_rel.T[3,3] * mechanics.b3.frame_b.R.T[3,2] ;
//   $DER.mechanics.b6.frame_b.R.T[2,2] = mechanics.r5.R_rel.T[2,2] * $DER.mechanics.b4.frame_b.R.T[2,2] + $DER.mechanics.r5.R_rel.T[2,2] * mechanics.b4.frame_b.R.T[2,2] + mechanics.r5.R_rel.T[2,3] * $DER.mechanics.b4.frame_b.R.T[3,2] + $DER.mechanics.r5.R_rel.T[2,3] * mechanics.b4.frame_b.R.T[3,2] ;
//   $DER.mechanics.b5.frame_b.R.T[3,2] = mechanics.r5.R_rel.T[3,2] * $DER.mechanics.b4.frame_b.R.T[2,2] + $DER.mechanics.r5.R_rel.T[3,2] * mechanics.b4.frame_b.R.T[2,2] + mechanics.r5.R_rel.T[3,3] * $DER.mechanics.b4.frame_b.R.T[3,2] + $DER.mechanics.r5.R_rel.T[3,3] * mechanics.b4.frame_b.R.T[3,2] ;
//   $DER.mechanics.b6.frame_b.R.T[1,2] = mechanics.r6.R_rel.T[1,1] * $DER.mechanics.b5.frame_b.R.T[1,2] + $DER.mechanics.r6.R_rel.T[1,1] * mechanics.b5.frame_b.R.T[1,2] + mechanics.r6.R_rel.T[1,3] * $DER.mechanics.b5.frame_b.R.T[3,2] + $DER.mechanics.r6.R_rel.T[1,3] * mechanics.b5.frame_b.R.T[3,2] ;
//   $DER.mechanics.b6.frame_b.R.T[3,2] = mechanics.r6.R_rel.T[3,1] * $DER.mechanics.b5.frame_b.R.T[1,2] + $DER.mechanics.r6.R_rel.T[3,1] * mechanics.b5.frame_b.R.T[1,2] + mechanics.r6.R_rel.T[3,3] * $DER.mechanics.b5.frame_b.R.T[3,2] + $DER.mechanics.r6.R_rel.T[3,3] * mechanics.b5.frame_b.R.T[3,2] ;
//   mechanics.b1.body.frame_a.f[2] = (-mechanics.b1.body.g_0[2]) * mechanics.b1.body.m ;
//   $DER.mechanics.b1.frame_a.R.T[3,3] = (-sin(axis1.initializeFlange.set_phi_start.flange.phi)) * $DER.axis1.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b2.frame_b.R.T[2,3] = mechanics.r2.R_rel.T[2,3] * $DER.mechanics.b1.frame_a.R.T[3,3] + $DER.mechanics.r2.R_rel.T[2,3] * mechanics.b1.frame_a.R.T[3,3] ;
//   $DER.mechanics.b2.frame_b.R.T[3,3] = mechanics.r2.R_rel.T[3,3] * $DER.mechanics.b1.frame_a.R.T[3,3] + $DER.mechanics.r2.R_rel.T[3,3] * mechanics.b1.frame_a.R.T[3,3] ;
//   $DER.mechanics.b4.frame_b.R.T[2,3] = mechanics.r3.R_rel.T[2,2] * $DER.mechanics.b2.frame_b.R.T[2,3] + $DER.mechanics.r3.R_rel.T[2,2] * mechanics.b2.frame_b.R.T[2,3] + mechanics.r3.R_rel.T[2,3] * $DER.mechanics.b2.frame_b.R.T[3,3] + $DER.mechanics.r3.R_rel.T[2,3] * mechanics.b2.frame_b.R.T[3,3] ;
//   $DER.mechanics.b3.frame_b.R.T[3,3] = mechanics.r3.R_rel.T[3,2] * $DER.mechanics.b2.frame_b.R.T[2,3] + $DER.mechanics.r3.R_rel.T[3,2] * mechanics.b2.frame_b.R.T[2,3] + mechanics.r3.R_rel.T[3,3] * $DER.mechanics.b2.frame_b.R.T[3,3] + $DER.mechanics.r3.R_rel.T[3,3] * mechanics.b2.frame_b.R.T[3,3] ;
//   $DER.mechanics.b1.frame_a.R.T[3,1] = cos(axis1.initializeFlange.set_phi_start.flange.phi) * $DER.axis1.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b2.frame_b.R.T[2,1] = mechanics.r2.R_rel.T[2,3] * $DER.mechanics.b1.frame_a.R.T[3,1] + $DER.mechanics.r2.R_rel.T[2,3] * mechanics.b1.frame_a.R.T[3,1] ;
//   $DER.mechanics.b2.frame_b.R.T[3,1] = mechanics.r2.R_rel.T[3,3] * $DER.mechanics.b1.frame_a.R.T[3,1] + $DER.mechanics.r2.R_rel.T[3,3] * mechanics.b1.frame_a.R.T[3,1] ;
//   $DER.mechanics.b4.frame_b.R.T[2,1] = mechanics.r3.R_rel.T[2,2] * $DER.mechanics.b2.frame_b.R.T[2,1] + $DER.mechanics.r3.R_rel.T[2,2] * mechanics.b2.frame_b.R.T[2,1] + mechanics.r3.R_rel.T[2,3] * $DER.mechanics.b2.frame_b.R.T[3,1] + $DER.mechanics.r3.R_rel.T[2,3] * mechanics.b2.frame_b.R.T[3,1] ;
//   $DER.mechanics.b3.frame_b.R.T[3,1] = mechanics.r3.R_rel.T[3,2] * $DER.mechanics.b2.frame_b.R.T[2,1] + $DER.mechanics.r3.R_rel.T[3,2] * mechanics.b2.frame_b.R.T[2,1] + mechanics.r3.R_rel.T[3,3] * $DER.mechanics.b2.frame_b.R.T[3,1] + $DER.mechanics.r3.R_rel.T[3,3] * mechanics.b2.frame_b.R.T[3,1] ;
//   $DER.mechanics.b1.frame_a.R.T[1,3] = (-cos(axis1.initializeFlange.set_phi_start.flange.phi)) * $DER.axis1.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b5.frame_b.R.T[1,3] = mechanics.r4.R_rel.T[1,1] * $DER.mechanics.b1.frame_a.R.T[1,3] + $DER.mechanics.r4.R_rel.T[1,1] * mechanics.b1.frame_a.R.T[1,3] + mechanics.r4.R_rel.T[1,3] * $DER.mechanics.b3.frame_b.R.T[3,3] + $DER.mechanics.r4.R_rel.T[1,3] * mechanics.b3.frame_b.R.T[3,3] ;
//   $DER.mechanics.b4.frame_b.R.T[3,3] = mechanics.r4.R_rel.T[3,1] * $DER.mechanics.b1.frame_a.R.T[1,3] + $DER.mechanics.r4.R_rel.T[3,1] * mechanics.b1.frame_a.R.T[1,3] + mechanics.r4.R_rel.T[3,3] * $DER.mechanics.b3.frame_b.R.T[3,3] + $DER.mechanics.r4.R_rel.T[3,3] * mechanics.b3.frame_b.R.T[3,3] ;
//   $DER.mechanics.b6.frame_b.R.T[2,3] = mechanics.r5.R_rel.T[2,2] * $DER.mechanics.b4.frame_b.R.T[2,3] + $DER.mechanics.r5.R_rel.T[2,2] * mechanics.b4.frame_b.R.T[2,3] + mechanics.r5.R_rel.T[2,3] * $DER.mechanics.b4.frame_b.R.T[3,3] + $DER.mechanics.r5.R_rel.T[2,3] * mechanics.b4.frame_b.R.T[3,3] ;
//   $DER.mechanics.b5.frame_b.R.T[3,3] = mechanics.r5.R_rel.T[3,2] * $DER.mechanics.b4.frame_b.R.T[2,3] + $DER.mechanics.r5.R_rel.T[3,2] * mechanics.b4.frame_b.R.T[2,3] + mechanics.r5.R_rel.T[3,3] * $DER.mechanics.b4.frame_b.R.T[3,3] + $DER.mechanics.r5.R_rel.T[3,3] * mechanics.b4.frame_b.R.T[3,3] ;
//   $DER.mechanics.b6.frame_b.R.T[1,3] = mechanics.r6.R_rel.T[1,1] * $DER.mechanics.b5.frame_b.R.T[1,3] + $DER.mechanics.r6.R_rel.T[1,1] * mechanics.b5.frame_b.R.T[1,3] + mechanics.r6.R_rel.T[1,3] * $DER.mechanics.b5.frame_b.R.T[3,3] + $DER.mechanics.r6.R_rel.T[1,3] * mechanics.b5.frame_b.R.T[3,3] ;
//   $DER.mechanics.b6.frame_b.R.T[3,3] = mechanics.r6.R_rel.T[3,1] * $DER.mechanics.b5.frame_b.R.T[1,3] + $DER.mechanics.r6.R_rel.T[3,1] * mechanics.b5.frame_b.R.T[1,3] + mechanics.r6.R_rel.T[3,3] * $DER.mechanics.b5.frame_b.R.T[3,3] + $DER.mechanics.r6.R_rel.T[3,3] * mechanics.b5.frame_b.R.T[3,3] ;
//   $DER.mechanics.b1.frame_a.R.T[1,1] = (-sin(axis1.initializeFlange.set_phi_start.flange.phi)) * $DER.axis1.initializeFlange.set_w_start.flange.phi ;
//   $DER.mechanics.b5.frame_b.R.T[1,1] = mechanics.r4.R_rel.T[1,1] * $DER.mechanics.b1.frame_a.R.T[1,1] + $DER.mechanics.r4.R_rel.T[1,1] * mechanics.b1.frame_a.R.T[1,1] + mechanics.r4.R_rel.T[1,3] * $DER.mechanics.b3.frame_b.R.T[3,1] + $DER.mechanics.r4.R_rel.T[1,3] * mechanics.b3.frame_b.R.T[3,1] ;
//   $DER.mechanics.b4.frame_b.R.T[3,1] = mechanics.r4.R_rel.T[3,1] * $DER.mechanics.b1.frame_a.R.T[1,1] + $DER.mechanics.r4.R_rel.T[3,1] * mechanics.b1.frame_a.R.T[1,1] + mechanics.r4.R_rel.T[3,3] * $DER.mechanics.b3.frame_b.R.T[3,1] + $DER.mechanics.r4.R_rel.T[3,3] * mechanics.b3.frame_b.R.T[3,1] ;
//   $DER.mechanics.b6.frame_b.R.T[2,1] = mechanics.r5.R_rel.T[2,2] * $DER.mechanics.b4.frame_b.R.T[2,1] + $DER.mechanics.r5.R_rel.T[2,2] * mechanics.b4.frame_b.R.T[2,1] + mechanics.r5.R_rel.T[2,3] * $DER.mechanics.b4.frame_b.R.T[3,1] + $DER.mechanics.r5.R_rel.T[2,3] * mechanics.b4.frame_b.R.T[3,1] ;
//   $DER.mechanics.b5.frame_b.R.T[3,1] = mechanics.r5.R_rel.T[3,2] * $DER.mechanics.b4.frame_b.R.T[2,1] + $DER.mechanics.r5.R_rel.T[3,2] * mechanics.b4.frame_b.R.T[2,1] + mechanics.r5.R_rel.T[3,3] * $DER.mechanics.b4.frame_b.R.T[3,1] + $DER.mechanics.r5.R_rel.T[3,3] * mechanics.b4.frame_b.R.T[3,1] ;
//   $DER.mechanics.b6.frame_b.R.T[1,1] = mechanics.r6.R_rel.T[1,1] * $DER.mechanics.b5.frame_b.R.T[1,1] + $DER.mechanics.r6.R_rel.T[1,1] * mechanics.b5.frame_b.R.T[1,1] + mechanics.r6.R_rel.T[1,3] * $DER.mechanics.b5.frame_b.R.T[3,1] + $DER.mechanics.r6.R_rel.T[1,3] * mechanics.b5.frame_b.R.T[3,1] ;
//   $DER.mechanics.b6.frame_b.R.T[3,1] = mechanics.r6.R_rel.T[3,1] * $DER.mechanics.b5.frame_b.R.T[1,1] + $DER.mechanics.r6.R_rel.T[3,1] * mechanics.b5.frame_b.R.T[1,1] + mechanics.r6.R_rel.T[3,3] * $DER.mechanics.b5.frame_b.R.T[3,1] + $DER.mechanics.r6.R_rel.T[3,3] * mechanics.b5.frame_b.R.T[3,1] ;
//   0.0 = axis4.gear.gear.ratio * axis4.gear.flange_a.tau + axis4.gear.gear.flange_b.tau ;
//   axis4.motor.Jmotor.J * axis4.motor.Jmotor.a = axis4.motor.Jmotor.flange_a.tau - axis4.gear.flange_a.tau ;
//   axis4.motor.Jmotor.a = axis4.gear.gear.ratio * $DER.axis4.initializeFlange.set_a_start.w ;
//   axis4.gear.bearingFriction.startForward = pre(axis4.gear.bearingFriction.mode) == 0 and (axis4.gear.bearingFriction.sa > axis4.gear.bearingFriction.tau0_max or pre(axis4.gear.bearingFriction.startForward) and axis4.gear.bearingFriction.sa > axis4.gear.bearingFriction.tau0) or pre(axis4.gear.bearingFriction.mode) == -1 and axis4.gear.bearingFriction.w > axis4.gear.bearingFriction.w_small or initial() and axis4.gear.bearingFriction.w > 0.0 ;
//   -mechanics.b2.frame_b.t[2] = mechanics.r3.R_rel.T[3,2] * mechanics.b3.frame_a.t[3] + mechanics.r3.R_rel.T[2,2] * mechanics.b3.frame_a.t[2] ;
//   -mechanics.b3.frame_b.t[1] = mechanics.r4.R_rel.T[3,1] * mechanics.b4.frame_a.t[3] + mechanics.r4.R_rel.T[1,1] * mechanics.b4.frame_a.t[1] ;
//   -mechanics.b4.frame_b.f[2] = mechanics.r5.R_rel.T[3,2] * mechanics.b5.frame_a.f[3] + mechanics.r5.R_rel.T[2,2] * mechanics.b5.frame_a.f[2] ;
//   -mechanics.b5.frame_b.f[3] = mechanics.r6.R_rel.T[3,3] * mechanics.b6.frame_a.f[3] + mechanics.r6.R_rel.T[1,3] * mechanics.b6.frame_a.f[1] ;
//   mechanics.load.body.z_a[1] = mechanics.r6.R_rel.T[1,1] * mechanics.b5.body.z_a[1] + mechanics.r6.R_rel.T[1,3] * mechanics.b5.body.z_a[3] - mechanics.r6.w * (mechanics.r6.R_rel.T[3,1] * mechanics.b5.body.w_a[1] + mechanics.r6.R_rel.T[3,3] * mechanics.b5.body.w_a[3]) ;
//   0.0 = axis6.gear.gear.ratio * axis6.gear.flange_a.tau + axis6.gear.gear.flange_b.tau ;
//   axis6.motor.Jmotor.J * axis6.motor.Jmotor.a = axis6.motor.Jmotor.flange_a.tau - axis6.gear.flange_a.tau ;
//   axis6.motor.Jmotor.a = axis6.gear.gear.ratio * $DER.axis6.initializeFlange.set_a_start.w ;
//   axis6.gear.bearingFriction.startForward = pre(axis6.gear.bearingFriction.mode) == 0 and (axis6.gear.bearingFriction.sa > axis6.gear.bearingFriction.tau0_max or pre(axis6.gear.bearingFriction.startForward) and axis6.gear.bearingFriction.sa > axis6.gear.bearingFriction.tau0) or pre(axis6.gear.bearingFriction.mode) == -1 and axis6.gear.bearingFriction.w > axis6.gear.bearingFriction.w_small or initial() and axis6.gear.bearingFriction.w > 0.0 ;
//   (-mechanics.tau[6]) - axis6.gear.bearingFriction.tau - axis6.gear.gear.flange_b.tau = 0.0 ;
//   axis6.gear.bearingFriction.tau = if axis6.gear.bearingFriction.locked then axis6.gear.bearingFriction.sa else if axis6.gear.bearingFriction.startForward then Modelica.Math.tempInterpol1(axis6.gear.bearingFriction.w, {{axis6.gear.bearingFriction.tau_pos[1,1], axis6.gear.bearingFriction.tau_pos[1,2]}, {axis6.gear.bearingFriction.tau_pos[2,1], axis6.gear.bearingFriction.tau_pos[2,2]}}, 2) else if axis6.gear.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-axis6.gear.bearingFriction.w, {{axis6.gear.bearingFriction.tau_pos[1,1], axis6.gear.bearingFriction.tau_pos[1,2]}, {axis6.gear.bearingFriction.tau_pos[2,1], axis6.gear.bearingFriction.tau_pos[2,2]}}, 2) else if pre(axis6.gear.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(axis6.gear.bearingFriction.w, {{axis6.gear.bearingFriction.tau_pos[1,1], axis6.gear.bearingFriction.tau_pos[1,2]}, {axis6.gear.bearingFriction.tau_pos[2,1], axis6.gear.bearingFriction.tau_pos[2,2]}}, 2) else -Modelica.Math.tempInterpol1(-axis6.gear.bearingFriction.w, {{axis6.gear.bearingFriction.tau_pos[1,1], axis6.gear.bearingFriction.tau_pos[1,2]}, {axis6.gear.bearingFriction.tau_pos[2,1], axis6.gear.bearingFriction.tau_pos[2,2]}}, 2) ;
//   axis6.gear.bearingFriction.locked = not (pre(axis6.gear.bearingFriction.mode) == 1 or axis6.gear.bearingFriction.startForward or pre(axis6.gear.bearingFriction.mode) == -1 or axis6.gear.bearingFriction.startBackward) ;
//   axis6.gear.bearingFriction.startBackward = pre(axis6.gear.bearingFriction.mode) == 0 and (axis6.gear.bearingFriction.sa < (-axis6.gear.bearingFriction.tau0_max) or pre(axis6.gear.bearingFriction.startBackward) and axis6.gear.bearingFriction.sa < (-axis6.gear.bearingFriction.tau0)) or pre(axis6.gear.bearingFriction.mode) == 1 and axis6.gear.bearingFriction.w < (-axis6.gear.bearingFriction.w_small) or initial() and axis6.gear.bearingFriction.w < 0.0 ;
//   $DER.axis6.initializeFlange.set_a_start.w = if axis6.gear.bearingFriction.locked then 0.0 else if axis6.gear.bearingFriction.startForward then axis6.gear.bearingFriction.sa - axis6.gear.bearingFriction.tau0_max else if axis6.gear.bearingFriction.startBackward then axis6.gear.bearingFriction.sa + axis6.gear.bearingFriction.tau0_max else if pre(axis6.gear.bearingFriction.mode) == 1 then axis6.gear.bearingFriction.sa - axis6.gear.bearingFriction.tau0_max else axis6.gear.bearingFriction.sa + axis6.gear.bearingFriction.tau0_max ;
//   mechanics.load.body.z_a[2] = mechanics.b5.body.z_a[2] + $DER.axis6.initializeFlange.set_a_start.w ;
//   mechanics.b6.a_0[1] = mechanics.b5.a_0[1] + mechanics.b5.frame_b.R.T[1,1] * (mechanics.b5.body.z_a[2] * mechanics.b5.frameTranslation.r[3] + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1]) + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1]) - mechanics.b5.body.z_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,1] * (mechanics.b5.body.z_a[3] * mechanics.b5.frameTranslation.r[1] + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2]) - mechanics.b5.body.z_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.frame_b.R.T[3,1] * (mechanics.b5.body.z_a[1] * mechanics.b5.frameTranslation.r[2] + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3]) - mechanics.b5.body.z_a[2] * mechanics.b5.frameTranslation.r[1]) ;
//   mechanics.b5.body.z_a[2] = mechanics.r5.R_rel.T[2,2] * mechanics.b4.body.z_a[2] + mechanics.r5.R_rel.T[2,3] * mechanics.b4.body.z_a[3] + mechanics.r5.w * (mechanics.r5.R_rel.T[3,2] * mechanics.b4.body.w_a[2] + mechanics.r5.R_rel.T[3,3] * mechanics.b4.body.w_a[3]) ;
//   0.0 = axis5.gear.gear.ratio * axis5.gear.flange_a.tau + axis5.gear.gear.flange_b.tau ;
//   axis5.motor.Jmotor.J * axis5.motor.Jmotor.a = axis5.motor.Jmotor.flange_a.tau - axis5.gear.flange_a.tau ;
//   axis5.motor.Jmotor.a = axis5.gear.gear.ratio * $DER.axis5.initializeFlange.set_a_start.w ;
//   axis5.gear.bearingFriction.startForward = pre(axis5.gear.bearingFriction.mode) == 0 and (axis5.gear.bearingFriction.sa > axis5.gear.bearingFriction.tau0_max or pre(axis5.gear.bearingFriction.startForward) and axis5.gear.bearingFriction.sa > axis5.gear.bearingFriction.tau0) or pre(axis5.gear.bearingFriction.mode) == -1 and axis5.gear.bearingFriction.w > axis5.gear.bearingFriction.w_small or initial() and axis5.gear.bearingFriction.w > 0.0 ;
//   (-mechanics.tau[5]) - axis5.gear.bearingFriction.tau - axis5.gear.gear.flange_b.tau = 0.0 ;
//   axis5.gear.bearingFriction.tau = if axis5.gear.bearingFriction.locked then axis5.gear.bearingFriction.sa else if axis5.gear.bearingFriction.startForward then Modelica.Math.tempInterpol1(axis5.gear.bearingFriction.w, {{axis5.gear.bearingFriction.tau_pos[1,1], axis5.gear.bearingFriction.tau_pos[1,2]}, {axis5.gear.bearingFriction.tau_pos[2,1], axis5.gear.bearingFriction.tau_pos[2,2]}}, 2) else if axis5.gear.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-axis5.gear.bearingFriction.w, {{axis5.gear.bearingFriction.tau_pos[1,1], axis5.gear.bearingFriction.tau_pos[1,2]}, {axis5.gear.bearingFriction.tau_pos[2,1], axis5.gear.bearingFriction.tau_pos[2,2]}}, 2) else if pre(axis5.gear.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(axis5.gear.bearingFriction.w, {{axis5.gear.bearingFriction.tau_pos[1,1], axis5.gear.bearingFriction.tau_pos[1,2]}, {axis5.gear.bearingFriction.tau_pos[2,1], axis5.gear.bearingFriction.tau_pos[2,2]}}, 2) else -Modelica.Math.tempInterpol1(-axis5.gear.bearingFriction.w, {{axis5.gear.bearingFriction.tau_pos[1,1], axis5.gear.bearingFriction.tau_pos[1,2]}, {axis5.gear.bearingFriction.tau_pos[2,1], axis5.gear.bearingFriction.tau_pos[2,2]}}, 2) ;
//   axis5.gear.bearingFriction.locked = not (pre(axis5.gear.bearingFriction.mode) == 1 or axis5.gear.bearingFriction.startForward or pre(axis5.gear.bearingFriction.mode) == -1 or axis5.gear.bearingFriction.startBackward) ;
//   axis5.gear.bearingFriction.startBackward = pre(axis5.gear.bearingFriction.mode) == 0 and (axis5.gear.bearingFriction.sa < (-axis5.gear.bearingFriction.tau0_max) or pre(axis5.gear.bearingFriction.startBackward) and axis5.gear.bearingFriction.sa < (-axis5.gear.bearingFriction.tau0)) or pre(axis5.gear.bearingFriction.mode) == 1 and axis5.gear.bearingFriction.w < (-axis5.gear.bearingFriction.w_small) or initial() and axis5.gear.bearingFriction.w < 0.0 ;
//   $DER.axis5.initializeFlange.set_a_start.w = if axis5.gear.bearingFriction.locked then 0.0 else if axis5.gear.bearingFriction.startForward then axis5.gear.bearingFriction.sa - axis5.gear.bearingFriction.tau0_max else if axis5.gear.bearingFriction.startBackward then axis5.gear.bearingFriction.sa + axis5.gear.bearingFriction.tau0_max else if pre(axis5.gear.bearingFriction.mode) == 1 then axis5.gear.bearingFriction.sa - axis5.gear.bearingFriction.tau0_max else axis5.gear.bearingFriction.sa + axis5.gear.bearingFriction.tau0_max ;
//   mechanics.b5.body.z_a[1] = mechanics.b4.body.z_a[1] + $DER.axis5.initializeFlange.set_a_start.w ;
//   mechanics.b5.body.z_a[3] = mechanics.r5.R_rel.T[3,2] * mechanics.b4.body.z_a[2] + mechanics.r5.R_rel.T[3,3] * mechanics.b4.body.z_a[3] - mechanics.r5.w * (mechanics.r5.R_rel.T[2,2] * mechanics.b4.body.w_a[2] + mechanics.r5.R_rel.T[2,3] * mechanics.b4.body.w_a[3]) ;
//   mechanics.b2.body.z_a[2] = mechanics.b2.frame_b.R.T[2,2] * $DER.axis1.initializeFlange.set_a_start.w + mechanics.r2.w * mechanics.b2.frame_b.R.T[3,2] * mechanics.r1.w ;
//   mechanics.b3.body.z_a[2] = mechanics.r3.R_rel.T[2,2] * mechanics.b2.body.z_a[2] + mechanics.r3.R_rel.T[2,3] * mechanics.b2.body.z_a[3] + mechanics.r3.w * (mechanics.r3.R_rel.T[3,2] * mechanics.b2.body.w_a[2] + mechanics.r3.R_rel.T[3,3] * mechanics.b2.body.w_a[3]) ;
//   mechanics.b4.body.z_a[2] = mechanics.b3.body.z_a[2] + $DER.axis4.initializeFlange.set_a_start.w ;
//   mechanics.b4.body.z_a[1] = mechanics.r4.R_rel.T[1,1] * mechanics.b3.body.z_a[1] + mechanics.r4.R_rel.T[1,3] * mechanics.b3.body.z_a[3] - mechanics.r4.w * (mechanics.r4.R_rel.T[3,1] * mechanics.b3.body.w_a[1] + mechanics.r4.R_rel.T[3,3] * mechanics.b3.body.w_a[3]) ;
//   mechanics.b4.body.z_a[3] = mechanics.r4.R_rel.T[3,1] * mechanics.b3.body.z_a[1] + mechanics.r4.R_rel.T[3,3] * mechanics.b3.body.z_a[3] + mechanics.r4.w * (mechanics.r4.R_rel.T[1,1] * mechanics.b3.body.w_a[1] + mechanics.r4.R_rel.T[1,3] * mechanics.b3.body.w_a[3]) ;
//   mechanics.b3.body.z_a[3] = mechanics.r3.R_rel.T[3,2] * mechanics.b2.body.z_a[2] + mechanics.r3.R_rel.T[3,3] * mechanics.b2.body.z_a[3] - mechanics.r3.w * (mechanics.r3.R_rel.T[2,2] * mechanics.b2.body.w_a[2] + mechanics.r3.R_rel.T[2,3] * mechanics.b2.body.w_a[3]) ;
//   mechanics.b4.a_0[2] = mechanics.b3.a_0[2] + mechanics.b4.frame_b.R.T[2,2] * (mechanics.b3.body.z_a[3] * mechanics.b3.frameTranslation.r[1] + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2]) - mechanics.b3.body.z_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.frame_b.R.T[3,2] * (mechanics.b3.body.z_a[1] * mechanics.b3.frameTranslation.r[2] + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3]) - mechanics.b3.body.z_a[2] * mechanics.b3.frameTranslation.r[1]) ;
//   mechanics.b3.a_0[2] = mechanics.b2.frame_b.R.T[2,2] * (mechanics.b2.body.z_a[3] * mechanics.b2.frameTranslation.r[1] + mechanics.b2.body.w_a[3] * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.r2.w * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[2]) - $DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.frame_b.R.T[3,2] * ($DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.frameTranslation.r[2] + mechanics.r2.w * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.body.w_a[2] * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3]) - mechanics.b2.body.z_a[2] * mechanics.b2.frameTranslation.r[1]) ;
//   mechanics.b2.body.z_a[3] = mechanics.b2.frame_b.R.T[3,2] * $DER.axis1.initializeFlange.set_a_start.w - mechanics.r2.w * mechanics.b2.frame_b.R.T[2,2] * mechanics.r1.w ;
//   mechanics.b4.a_0[3] = mechanics.b3.a_0[3] + mechanics.b1.frame_a.R.T[1,3] * (mechanics.b3.body.z_a[2] * mechanics.b3.frameTranslation.r[3] + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1]) + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1]) - mechanics.b3.body.z_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,3] * (mechanics.b3.body.z_a[3] * mechanics.b3.frameTranslation.r[1] + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2]) - mechanics.b3.body.z_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.frame_b.R.T[3,3] * (mechanics.b3.body.z_a[1] * mechanics.b3.frameTranslation.r[2] + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3]) - mechanics.b3.body.z_a[2] * mechanics.b3.frameTranslation.r[1]) ;
//   mechanics.b3.a_0[3] = mechanics.b2.a_0[3] + mechanics.b1.frame_a.R.T[1,3] * (mechanics.b2.body.z_a[2] * mechanics.b2.frameTranslation.r[3] + mechanics.b2.body.w_a[2] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1]) + mechanics.b2.body.w_a[3] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1]) - mechanics.b2.body.z_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.b2.frame_b.R.T[2,3] * (mechanics.b2.body.z_a[3] * mechanics.b2.frameTranslation.r[1] + mechanics.b2.body.w_a[3] * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.r2.w * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[2]) - $DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.frame_b.R.T[3,3] * ($DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.frameTranslation.r[2] + mechanics.r2.w * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.body.w_a[2] * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3]) - mechanics.b2.body.z_a[2] * mechanics.b2.frameTranslation.r[1]) ;
//   mechanics.b2.a_0[3] = mechanics.b1.frame_a.R.T[1,3] * ($DER.axis1.initializeFlange.set_a_start.w * mechanics.b1.frameTranslation.r[3] - mechanics.b1.frameTranslation.r[1] * mechanics.r1.w ^ 2.0) + mechanics.b1.frame_a.R.T[3,3] * ((-mechanics.r1.w) * mechanics.r1.w * mechanics.b1.frameTranslation.r[3] - $DER.axis1.initializeFlange.set_a_start.w * mechanics.b1.frameTranslation.r[1]) ;
//   mechanics.b1.body.frame_a.f[1] = ($DER.axis1.initializeFlange.set_a_start.w * mechanics.b1.body.r_CM[3] + (-mechanics.b1.body.r_CM[1]) * mechanics.r1.w ^ 2.0 - mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.body.g_0[3] - mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.body.g_0[1]) * mechanics.b1.body.m ;
//   mechanics.b1.body.frame_a.f[3] = ((-mechanics.b1.frame_a.R.T[3,1]) * mechanics.b1.body.g_0[1] - mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.body.g_0[3] - mechanics.b1.body.r_CM[3] * mechanics.r1.w ^ 2.0 - $DER.axis1.initializeFlange.set_a_start.w * mechanics.b1.body.r_CM[1]) * mechanics.b1.body.m ;
//   mechanics.b1.frameTranslation.frame_a.t[2] + mechanics.b1.body.frame_a.t[2] - mechanics.tau[1] = 0.0 ;
//   mechanics.b1.body.frame_a.t[2] = 1.16 * $DER.axis1.initializeFlange.set_a_start.w + mechanics.b1.body.r_CM[3] * mechanics.b1.body.frame_a.f[1] - mechanics.b1.body.r_CM[1] * mechanics.b1.body.frame_a.f[3] ;
//   mechanics.b2.a_0[1] = mechanics.b1.frame_a.R.T[1,1] * ($DER.axis1.initializeFlange.set_a_start.w * mechanics.b1.frameTranslation.r[3] - mechanics.b1.frameTranslation.r[1] * mechanics.r1.w ^ 2.0) + mechanics.b1.frame_a.R.T[3,1] * ((-mechanics.r1.w) * mechanics.r1.w * mechanics.b1.frameTranslation.r[3] - $DER.axis1.initializeFlange.set_a_start.w * mechanics.b1.frameTranslation.r[1]) ;
//   mechanics.b2.body.frame_a.f[1] = (mechanics.b1.frame_a.R.T[1,1] * (mechanics.b2.a_0[1] - mechanics.b2.body.g_0[1]) + mechanics.b1.frame_a.R.T[1,3] * (mechanics.b2.a_0[3] - mechanics.b2.body.g_0[3]) + mechanics.b2.body.z_a[2] * mechanics.b2.body.r_CM[3] + mechanics.b2.body.w_a[2] * (mechanics.r2.w * mechanics.b2.body.r_CM[2] - mechanics.b2.body.w_a[2] * mechanics.b2.body.r_CM[1]) + mechanics.b2.body.w_a[3] * (mechanics.r2.w * mechanics.b2.body.r_CM[3] - mechanics.b2.body.w_a[3] * mechanics.b2.body.r_CM[1]) - mechanics.b2.body.z_a[3] * mechanics.b2.body.r_CM[2]) * mechanics.b2.body.m ;
//   mechanics.b2.body.frame_a.t[3] = 2.73 * mechanics.b2.body.z_a[3] + mechanics.r2.w * (-0.46 * mechanics.r2.w + 0.64 * mechanics.b2.body.w_a[2]) + mechanics.b2.body.r_CM[1] * mechanics.b2.body.frame_a.f[2] + (-mechanics.b2.body.r_CM[2]) * mechanics.b2.body.frame_a.f[1] - mechanics.b2.body.w_a[2] * (2.58 * mechanics.r2.w + -0.46 * mechanics.b2.body.w_a[2]) ;
//   mechanics.b2.body.frame_a.f[2] = (mechanics.b2.frame_b.R.T[2,1] * (mechanics.b2.a_0[1] - mechanics.b2.body.g_0[1]) + mechanics.b2.frame_b.R.T[2,3] * (mechanics.b2.a_0[3] - mechanics.b2.body.g_0[3]) + mechanics.b2.body.z_a[3] * mechanics.b2.body.r_CM[1] + mechanics.b2.body.w_a[3] * (mechanics.b2.body.w_a[2] * mechanics.b2.body.r_CM[3] - mechanics.b2.body.w_a[3] * mechanics.b2.body.r_CM[2]) + mechanics.r2.w * (mechanics.b2.body.w_a[2] * mechanics.b2.body.r_CM[1] - mechanics.r2.w * mechanics.b2.body.r_CM[2]) + (-$DER.axis2.initializeFlange.set_a_start.w) * mechanics.b2.body.r_CM[3] - mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.body.g_0[2]) * mechanics.b2.body.m ;
//   mechanics.b2.body.frame_a.t[1] + mechanics.b2.frameTranslation.frame_a.t[1] - mechanics.tau[2] = 0.0 ;
//   mechanics.b2.body.frame_a.t[1] = 2.58 * $DER.axis2.initializeFlange.set_a_start.w + -0.46 * mechanics.b2.body.z_a[2] + 2.73 * mechanics.b2.body.w_a[2] * mechanics.b2.body.w_a[3] + mechanics.b2.body.r_CM[2] * mechanics.b2.body.frame_a.f[3] + (-mechanics.b2.body.r_CM[3]) * mechanics.b2.body.frame_a.f[2] - mechanics.b2.body.w_a[3] * (-0.46 * mechanics.r2.w + 0.64 * mechanics.b2.body.w_a[2]) ;
//   mechanics.b2.body.frame_a.t[2] = -0.46 * $DER.axis2.initializeFlange.set_a_start.w + 0.64 * mechanics.b2.body.z_a[2] + mechanics.b2.body.w_a[3] * (2.58 * mechanics.r2.w + -0.46 * mechanics.b2.body.w_a[2]) + mechanics.b2.body.r_CM[3] * mechanics.b2.body.frame_a.f[1] + -2.73 * mechanics.r2.w * mechanics.b2.body.w_a[3] - mechanics.b2.body.r_CM[1] * mechanics.b2.body.frame_a.f[3] ;
//   mechanics.b2.body.frame_a.f[3] = (mechanics.b2.frame_b.R.T[3,1] * (mechanics.b2.a_0[1] - mechanics.b2.body.g_0[1]) + mechanics.b2.frame_b.R.T[3,3] * (mechanics.b2.a_0[3] - mechanics.b2.body.g_0[3]) + $DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.body.r_CM[2] + mechanics.r2.w * (mechanics.b2.body.w_a[3] * mechanics.b2.body.r_CM[1] - mechanics.r2.w * mechanics.b2.body.r_CM[3]) + mechanics.b2.body.w_a[2] * (mechanics.b2.body.w_a[3] * mechanics.b2.body.r_CM[2] - mechanics.b2.body.w_a[2] * mechanics.b2.body.r_CM[3]) + (-mechanics.b2.body.z_a[2]) * mechanics.b2.body.r_CM[1] - mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.body.g_0[2]) * mechanics.b2.body.m ;
//   mechanics.b3.a_0[1] = mechanics.b2.a_0[1] + mechanics.b1.frame_a.R.T[1,1] * (mechanics.b2.body.z_a[2] * mechanics.b2.frameTranslation.r[3] + mechanics.b2.body.w_a[2] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1]) + mechanics.b2.body.w_a[3] * (mechanics.r2.w * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1]) - mechanics.b2.body.z_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.b2.frame_b.R.T[2,1] * (mechanics.b2.body.z_a[3] * mechanics.b2.frameTranslation.r[1] + mechanics.b2.body.w_a[3] * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3] - mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2]) + mechanics.r2.w * (mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[2]) - $DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.frame_b.R.T[3,1] * ($DER.axis2.initializeFlange.set_a_start.w * mechanics.b2.frameTranslation.r[2] + mechanics.r2.w * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[1] - mechanics.r2.w * mechanics.b2.frameTranslation.r[3]) + mechanics.b2.body.w_a[2] * (mechanics.b2.body.w_a[3] * mechanics.b2.frameTranslation.r[2] - mechanics.b2.body.w_a[2] * mechanics.b2.frameTranslation.r[3]) - mechanics.b2.body.z_a[2] * mechanics.b2.frameTranslation.r[1]) ;
//   mechanics.b3.body.frame_a.f[1] = (mechanics.b1.frame_a.R.T[1,1] * (mechanics.b3.a_0[1] - mechanics.b3.body.g_0[1]) + mechanics.b1.frame_a.R.T[1,3] * (mechanics.b3.a_0[3] - mechanics.b3.body.g_0[3]) + mechanics.b3.body.z_a[2] * mechanics.b3.body.r_CM[3] + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[1] * mechanics.b3.body.r_CM[2] - mechanics.b3.body.w_a[2] * mechanics.b3.body.r_CM[1]) + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[1] * mechanics.b3.body.r_CM[3] - mechanics.b3.body.w_a[3] * mechanics.b3.body.r_CM[1]) - mechanics.b3.body.z_a[3] * mechanics.b3.body.r_CM[2]) * mechanics.b3.body.m ;
//   mechanics.b3.body.frame_a.t[3] = 0.413 * mechanics.b3.body.z_a[3] + mechanics.b3.body.w_a[1] * (-0.07000000000000001 * mechanics.b3.body.w_a[1] + 0.245 * mechanics.b3.body.w_a[2]) + mechanics.b3.body.r_CM[1] * mechanics.b3.body.frame_a.f[2] + (-mechanics.b3.body.r_CM[2]) * mechanics.b3.body.frame_a.f[1] - mechanics.b3.body.w_a[2] * (0.279 * mechanics.b3.body.w_a[1] + -0.07000000000000001 * mechanics.b3.body.w_a[2]) ;
//   mechanics.b3.body.frame_a.f[2] = (mechanics.b4.frame_b.R.T[2,1] * (mechanics.b3.a_0[1] - mechanics.b3.body.g_0[1]) + mechanics.b4.frame_b.R.T[2,2] * (mechanics.b3.a_0[2] - mechanics.b3.body.g_0[2]) + mechanics.b4.frame_b.R.T[2,3] * (mechanics.b3.a_0[3] - mechanics.b3.body.g_0[3]) + mechanics.b3.body.z_a[3] * mechanics.b3.body.r_CM[1] + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[2] * mechanics.b3.body.r_CM[3] - mechanics.b3.body.w_a[3] * mechanics.b3.body.r_CM[2]) + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[2] * mechanics.b3.body.r_CM[1] - mechanics.b3.body.w_a[1] * mechanics.b3.body.r_CM[2]) - mechanics.b3.body.z_a[1] * mechanics.b3.body.r_CM[3]) * mechanics.b3.body.m ;
//   mechanics.b3.body.frame_a.t[1] + mechanics.b3.frameTranslation.frame_a.t[1] - mechanics.tau[3] = 0.0 ;
//   mechanics.b3.body.frame_a.t[1] = 0.279 * mechanics.b3.body.z_a[1] + -0.07000000000000001 * mechanics.b3.body.z_a[2] + 0.413 * mechanics.b3.body.w_a[2] * mechanics.b3.body.w_a[3] + mechanics.b3.body.r_CM[2] * mechanics.b3.body.frame_a.f[3] + (-mechanics.b3.body.r_CM[3]) * mechanics.b3.body.frame_a.f[2] - mechanics.b3.body.w_a[3] * (-0.07000000000000001 * mechanics.b3.body.w_a[1] + 0.245 * mechanics.b3.body.w_a[2]) ;
//   mechanics.b3.body.frame_a.t[2] = -0.07000000000000001 * mechanics.b3.body.z_a[1] + 0.245 * mechanics.b3.body.z_a[2] + mechanics.b3.body.w_a[3] * (0.279 * mechanics.b3.body.w_a[1] + -0.07000000000000001 * mechanics.b3.body.w_a[2]) + mechanics.b3.body.r_CM[3] * mechanics.b3.body.frame_a.f[1] + -0.413 * mechanics.b3.body.w_a[1] * mechanics.b3.body.w_a[3] - mechanics.b3.body.r_CM[1] * mechanics.b3.body.frame_a.f[3] ;
//   mechanics.b2.body.frame_a.f[1] + mechanics.b1.frame_b.f[1] - mechanics.b2.frame_b.f[1] = 0.0 ;
//   mechanics.b3.body.frame_a.f[1] + mechanics.b2.frame_b.f[1] - mechanics.b3.frame_b.f[1] = 0.0 ;
//   -mechanics.b3.frame_b.f[1] = mechanics.r4.R_rel.T[3,1] * mechanics.b4.frame_a.f[3] + mechanics.r4.R_rel.T[1,1] * mechanics.b4.frame_a.f[1] ;
//   -mechanics.b3.frame_b.f[3] = mechanics.r4.R_rel.T[3,3] * mechanics.b4.frame_a.f[3] + mechanics.r4.R_rel.T[1,3] * mechanics.b4.frame_a.f[1] ;
//   mechanics.b2.body.frame_a.t[2] + mechanics.b2.frameTranslation.frame_a.t[2] - mechanics.b2.frame_a.t[2] = 0.0 ;
//   0.0 = mechanics.b2.frameTranslation.frame_a.t[2] + mechanics.b2.frame_b.t[2] + mechanics.b2.frameTranslation.r[3] * mechanics.b2.frame_b.f[1] - mechanics.b2.frameTranslation.r[1] * mechanics.b2.frame_b.f[3] ;
//   mechanics.b2.body.frame_a.f[3] + (-mechanics.b2.frame_b.f[3]) - mechanics.b2.frame_a.f[3] = 0.0 ;
//   0.0 = mechanics.b2.frameTranslation.frame_a.t[1] + mechanics.b2.frameTranslation.r[2] * mechanics.b2.frame_b.f[3] + (-mechanics.b2.frameTranslation.r[3]) * mechanics.b2.frame_b.f[2] - mechanics.tau[3] ;
//   0.0 = mechanics.b2.frameTranslation.frame_a.t[3] + mechanics.b2.frame_b.t[3] + mechanics.b2.frameTranslation.r[1] * mechanics.b2.frame_b.f[2] - mechanics.b2.frameTranslation.r[2] * mechanics.b2.frame_b.f[1] ;
//   mechanics.b2.body.frame_a.t[3] + mechanics.b2.frameTranslation.frame_a.t[3] - mechanics.b2.frame_a.t[3] = 0.0 ;
//   -mechanics.b1.frame_b.t[2] = mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.frame_a.t[3] + mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.frame_a.t[2] ;
//   0.0 = mechanics.b1.frameTranslation.frame_a.t[2] + mechanics.b1.frame_b.t[2] + mechanics.b1.frameTranslation.r[3] * mechanics.b1.frame_b.f[1] - mechanics.b1.frameTranslation.r[1] * mechanics.b1.frame_b.f[3] ;
//   -mechanics.b1.frame_b.f[3] = mechanics.r2.R_rel.T[3,3] * mechanics.b2.frame_a.f[3] + mechanics.r2.R_rel.T[2,3] * mechanics.b2.frame_a.f[2] ;
//   mechanics.b2.body.frame_a.f[2] + (-mechanics.b2.frame_b.f[2]) - mechanics.b2.frame_a.f[2] = 0.0 ;
//   -mechanics.b2.frame_b.f[2] = mechanics.r3.R_rel.T[3,2] * mechanics.b3.frame_a.f[3] + mechanics.r3.R_rel.T[2,2] * mechanics.b3.frame_a.f[2] ;
//   -mechanics.b2.frame_b.f[3] = mechanics.r3.R_rel.T[3,3] * mechanics.b3.frame_a.f[3] + mechanics.r3.R_rel.T[2,3] * mechanics.b3.frame_a.f[2] ;
//   mechanics.b3.body.frame_a.f[2] + (-mechanics.b3.frame_b.f[2]) - mechanics.b3.frame_a.f[2] = 0.0 ;
//   0.0 = mechanics.b3.frameTranslation.frame_a.t[1] + mechanics.b3.frame_b.t[1] + mechanics.b3.frameTranslation.r[2] * mechanics.b3.frame_b.f[3] - mechanics.b3.frameTranslation.r[3] * mechanics.b3.frame_b.f[2] ;
//   mechanics.b3.body.frame_a.f[3] + (-mechanics.b3.frame_b.f[3]) - mechanics.b3.frame_a.f[3] = 0.0 ;
//   mechanics.b3.body.frame_a.f[3] = (mechanics.b3.frame_b.R.T[3,1] * (mechanics.b3.a_0[1] - mechanics.b3.body.g_0[1]) + mechanics.b3.frame_b.R.T[3,2] * (mechanics.b3.a_0[2] - mechanics.b3.body.g_0[2]) + mechanics.b3.frame_b.R.T[3,3] * (mechanics.b3.a_0[3] - mechanics.b3.body.g_0[3]) + mechanics.b3.body.z_a[1] * mechanics.b3.body.r_CM[2] + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[3] * mechanics.b3.body.r_CM[1] - mechanics.b3.body.w_a[1] * mechanics.b3.body.r_CM[3]) + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[3] * mechanics.b3.body.r_CM[2] - mechanics.b3.body.w_a[2] * mechanics.b3.body.r_CM[3]) - mechanics.b3.body.z_a[2] * mechanics.b3.body.r_CM[1]) * mechanics.b3.body.m ;
//   mechanics.b4.a_0[1] = mechanics.b3.a_0[1] + mechanics.b1.frame_a.R.T[1,1] * (mechanics.b3.body.z_a[2] * mechanics.b3.frameTranslation.r[3] + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1]) + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1]) - mechanics.b3.body.z_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,1] * (mechanics.b3.body.z_a[3] * mechanics.b3.frameTranslation.r[1] + mechanics.b3.body.w_a[3] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3] - mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2]) + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[2]) - mechanics.b3.body.z_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.frame_b.R.T[3,1] * (mechanics.b3.body.z_a[1] * mechanics.b3.frameTranslation.r[2] + mechanics.b3.body.w_a[1] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[1] - mechanics.b3.body.w_a[1] * mechanics.b3.frameTranslation.r[3]) + mechanics.b3.body.w_a[2] * (mechanics.b3.body.w_a[3] * mechanics.b3.frameTranslation.r[2] - mechanics.b3.body.w_a[2] * mechanics.b3.frameTranslation.r[3]) - mechanics.b3.body.z_a[2] * mechanics.b3.frameTranslation.r[1]) ;
//   mechanics.b4.body.frame_a.f[3] = (mechanics.b4.frame_b.R.T[3,1] * (mechanics.b4.a_0[1] - mechanics.b4.body.g_0[1]) + mechanics.b4.frame_b.R.T[3,2] * (mechanics.b4.a_0[2] - mechanics.b4.body.g_0[2]) + mechanics.b4.frame_b.R.T[3,3] * (mechanics.b4.a_0[3] - mechanics.b4.body.g_0[3]) + mechanics.b4.body.z_a[1] * mechanics.b4.body.r_CM[2] + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[3] * mechanics.b4.body.r_CM[1] - mechanics.b4.body.w_a[1] * mechanics.b4.body.r_CM[3]) + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[3] * mechanics.b4.body.r_CM[2] - mechanics.b4.body.w_a[2] * mechanics.b4.body.r_CM[3]) - mechanics.b4.body.z_a[2] * mechanics.b4.body.r_CM[1]) * mechanics.b4.body.m ;
//   mechanics.b5.a_0[1] = mechanics.b4.a_0[1] + mechanics.b5.frame_b.R.T[1,1] * (mechanics.b4.body.z_a[2] * mechanics.b4.frameTranslation.r[3] + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1]) + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1]) - mechanics.b4.body.z_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,1] * (mechanics.b4.body.z_a[3] * mechanics.b4.frameTranslation.r[1] + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2]) - mechanics.b4.body.z_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.frame_b.R.T[3,1] * (mechanics.b4.body.z_a[1] * mechanics.b4.frameTranslation.r[2] + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3]) - mechanics.b4.body.z_a[2] * mechanics.b4.frameTranslation.r[1]) ;
//   mechanics.b5.a_0[3] = mechanics.b4.a_0[3] + mechanics.b5.frame_b.R.T[1,3] * (mechanics.b4.body.z_a[2] * mechanics.b4.frameTranslation.r[3] + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1]) + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1]) - mechanics.b4.body.z_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,3] * (mechanics.b4.body.z_a[3] * mechanics.b4.frameTranslation.r[1] + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2]) - mechanics.b4.body.z_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.frame_b.R.T[3,3] * (mechanics.b4.body.z_a[1] * mechanics.b4.frameTranslation.r[2] + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3]) - mechanics.b4.body.z_a[2] * mechanics.b4.frameTranslation.r[1]) ;
//   mechanics.b4.body.frame_a.t[2] = 0.081 * mechanics.b4.body.z_a[2] + 1.67 * mechanics.b4.body.w_a[3] * mechanics.b4.body.w_a[1] + mechanics.b4.body.r_CM[3] * mechanics.b4.body.frame_a.f[1] + -1.67 * mechanics.b4.body.w_a[1] * mechanics.b4.body.w_a[3] - mechanics.b4.body.r_CM[1] * mechanics.b4.body.frame_a.f[3] ;
//   mechanics.b4.body.frame_a.f[1] + (-mechanics.b4.frame_b.f[1]) - mechanics.b4.frame_a.f[1] = 0.0 ;
//   mechanics.b4.body.frame_a.f[1] = (mechanics.b5.frame_b.R.T[1,1] * (mechanics.b4.a_0[1] - mechanics.b4.body.g_0[1]) + mechanics.b5.frame_b.R.T[1,2] * (mechanics.b4.a_0[2] - mechanics.b4.body.g_0[2]) + mechanics.b5.frame_b.R.T[1,3] * (mechanics.b4.a_0[3] - mechanics.b4.body.g_0[3]) + mechanics.b4.body.z_a[2] * mechanics.b4.body.r_CM[3] + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[1] * mechanics.b4.body.r_CM[2] - mechanics.b4.body.w_a[2] * mechanics.b4.body.r_CM[1]) + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[1] * mechanics.b4.body.r_CM[3] - mechanics.b4.body.w_a[3] * mechanics.b4.body.r_CM[1]) - mechanics.b4.body.z_a[3] * mechanics.b4.body.r_CM[2]) * mechanics.b4.body.m ;
//   mechanics.b4.body.frame_a.t[1] = 1.67 * mechanics.b4.body.z_a[1] + 1.67 * mechanics.b4.body.w_a[2] * mechanics.b4.body.w_a[3] + mechanics.b4.body.r_CM[2] * mechanics.b4.body.frame_a.f[3] + -0.081 * mechanics.b4.body.w_a[3] * mechanics.b4.body.w_a[2] - mechanics.b4.body.r_CM[3] * mechanics.b4.body.frame_a.f[2] ;
//   mechanics.b4.body.frame_a.f[2] = (mechanics.b4.frame_b.R.T[2,1] * (mechanics.b4.a_0[1] - mechanics.b4.body.g_0[1]) + mechanics.b4.frame_b.R.T[2,2] * (mechanics.b4.a_0[2] - mechanics.b4.body.g_0[2]) + mechanics.b4.frame_b.R.T[2,3] * (mechanics.b4.a_0[3] - mechanics.b4.body.g_0[3]) + mechanics.b4.body.z_a[3] * mechanics.b4.body.r_CM[1] + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[2] * mechanics.b4.body.r_CM[3] - mechanics.b4.body.w_a[3] * mechanics.b4.body.r_CM[2]) + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[2] * mechanics.b4.body.r_CM[1] - mechanics.b4.body.w_a[1] * mechanics.b4.body.r_CM[2]) - mechanics.b4.body.z_a[1] * mechanics.b4.body.r_CM[3]) * mechanics.b4.body.m ;
//   mechanics.b4.body.frame_a.t[3] = 1.67 * mechanics.b4.body.z_a[3] + 0.081 * mechanics.b4.body.w_a[1] * mechanics.b4.body.w_a[2] + mechanics.b4.body.r_CM[1] * mechanics.b4.body.frame_a.f[2] + -1.67 * mechanics.b4.body.w_a[2] * mechanics.b4.body.w_a[1] - mechanics.b4.body.r_CM[2] * mechanics.b4.body.frame_a.f[1] ;
//   mechanics.b5.a_0[2] = mechanics.b4.a_0[2] + mechanics.b5.frame_b.R.T[1,2] * (mechanics.b4.body.z_a[2] * mechanics.b4.frameTranslation.r[3] + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1]) + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1]) - mechanics.b4.body.z_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.frame_b.R.T[2,2] * (mechanics.b4.body.z_a[3] * mechanics.b4.frameTranslation.r[1] + mechanics.b4.body.w_a[3] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3] - mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2]) + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[2]) - mechanics.b4.body.z_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.frame_b.R.T[3,2] * (mechanics.b4.body.z_a[1] * mechanics.b4.frameTranslation.r[2] + mechanics.b4.body.w_a[1] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[1] - mechanics.b4.body.w_a[1] * mechanics.b4.frameTranslation.r[3]) + mechanics.b4.body.w_a[2] * (mechanics.b4.body.w_a[3] * mechanics.b4.frameTranslation.r[2] - mechanics.b4.body.w_a[2] * mechanics.b4.frameTranslation.r[3]) - mechanics.b4.body.z_a[2] * mechanics.b4.frameTranslation.r[1]) ;
//   mechanics.b6.a_0[2] = mechanics.b5.a_0[2] + mechanics.b5.frame_b.R.T[1,2] * (mechanics.b5.body.z_a[2] * mechanics.b5.frameTranslation.r[3] + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1]) + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1]) - mechanics.b5.body.z_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.b5.body.z_a[3] * mechanics.b5.frameTranslation.r[1] + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2]) - mechanics.b5.body.z_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.frame_b.R.T[3,2] * (mechanics.b5.body.z_a[1] * mechanics.b5.frameTranslation.r[2] + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3]) - mechanics.b5.body.z_a[2] * mechanics.b5.frameTranslation.r[1]) ;
//   mechanics.b6.a_0[3] = mechanics.b5.a_0[3] + mechanics.b5.frame_b.R.T[1,3] * (mechanics.b5.body.z_a[2] * mechanics.b5.frameTranslation.r[3] + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1]) + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1]) - mechanics.b5.body.z_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.b5.body.z_a[3] * mechanics.b5.frameTranslation.r[1] + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3] - mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2]) + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[2]) - mechanics.b5.body.z_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.frame_b.R.T[3,3] * (mechanics.b5.body.z_a[1] * mechanics.b5.frameTranslation.r[2] + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[1] - mechanics.b5.body.w_a[1] * mechanics.b5.frameTranslation.r[3]) + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[3] * mechanics.b5.frameTranslation.r[2] - mechanics.b5.body.w_a[2] * mechanics.b5.frameTranslation.r[3]) - mechanics.b5.body.z_a[2] * mechanics.b5.frameTranslation.r[1]) ;
//   mechanics.load.body.z_a[3] = mechanics.r6.R_rel.T[3,1] * mechanics.b5.body.z_a[1] + mechanics.r6.R_rel.T[3,3] * mechanics.b5.body.z_a[3] + mechanics.r6.w * (mechanics.r6.R_rel.T[1,1] * mechanics.b5.body.w_a[1] + mechanics.r6.R_rel.T[1,3] * mechanics.b5.body.w_a[3]) ;
//   mechanics.load.a_0[1] = mechanics.b6.a_0[1] + mechanics.b6.frame_b.R.T[1,1] * (mechanics.load.body.z_a[2] * mechanics.b6.frameTranslation.r[3] + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1]) + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1]) - mechanics.load.body.z_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,1] * (mechanics.load.body.z_a[3] * mechanics.b6.frameTranslation.r[1] + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2]) - mechanics.load.body.z_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.frame_b.R.T[3,1] * (mechanics.load.body.z_a[1] * mechanics.b6.frameTranslation.r[2] + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3]) - mechanics.load.body.z_a[2] * mechanics.b6.frameTranslation.r[1]) ;
//   mechanics.load.a_0[3] = mechanics.b6.a_0[3] + mechanics.b6.frame_b.R.T[1,3] * (mechanics.load.body.z_a[2] * mechanics.b6.frameTranslation.r[3] + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1]) + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1]) - mechanics.load.body.z_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.load.body.z_a[3] * mechanics.b6.frameTranslation.r[1] + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2]) - mechanics.load.body.z_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.frame_b.R.T[3,3] * (mechanics.load.body.z_a[1] * mechanics.b6.frameTranslation.r[2] + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3]) - mechanics.load.body.z_a[2] * mechanics.b6.frameTranslation.r[1]) ;
//   0.0 = mechanics.b6.frameTranslation.frame_a.t[3] + mechanics.b6.frame_b.t[3] + mechanics.b6.frameTranslation.r[1] * mechanics.b6.frame_b.f[2] - mechanics.b6.frameTranslation.r[2] * mechanics.b6.frame_b.f[1] ;
//   -mechanics.b6.frame_b.t[3] = 0.001 * mechanics.load.body.z_a[3] + 0.001 * mechanics.b6.body.w_a[1] * mechanics.b6.body.w_a[2] + -0.001 * mechanics.b6.body.w_a[2] * mechanics.b6.body.w_a[1] + mechanics.load.body.r_CM[2] * mechanics.b6.frame_b.f[1] - mechanics.load.body.r_CM[1] * mechanics.b6.frame_b.f[2] ;
//   -mechanics.b6.frame_b.f[2] = (mechanics.b6.frame_b.R.T[2,1] * (mechanics.load.a_0[1] - mechanics.load.body.g_0[1]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.load.a_0[2] - mechanics.load.body.g_0[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.load.a_0[3] - mechanics.load.body.g_0[3]) + mechanics.load.body.z_a[3] * mechanics.load.body.r_CM[1] + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[2] * mechanics.load.body.r_CM[3] - mechanics.b6.body.w_a[3] * mechanics.load.body.r_CM[2]) + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[2] * mechanics.load.body.r_CM[1] - mechanics.b6.body.w_a[1] * mechanics.load.body.r_CM[2]) - mechanics.load.body.z_a[1] * mechanics.load.body.r_CM[3]) * mechanics.load.body.m ;
//   mechanics.load.a_0[2] = mechanics.b6.a_0[2] + mechanics.b6.frame_b.R.T[1,2] * (mechanics.load.body.z_a[2] * mechanics.b6.frameTranslation.r[3] + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1]) + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1]) - mechanics.load.body.z_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.load.body.z_a[3] * mechanics.b6.frameTranslation.r[1] + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3] - mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2]) + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[2]) - mechanics.load.body.z_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.frame_b.R.T[3,2] * (mechanics.load.body.z_a[1] * mechanics.b6.frameTranslation.r[2] + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[1] - mechanics.b6.body.w_a[1] * mechanics.b6.frameTranslation.r[3]) + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[3] * mechanics.b6.frameTranslation.r[2] - mechanics.b6.body.w_a[2] * mechanics.b6.frameTranslation.r[3]) - mechanics.load.body.z_a[2] * mechanics.b6.frameTranslation.r[1]) ;
//   mechanics.b6.body.frame_a.t[1] = 0.001 * mechanics.load.body.z_a[1] + 0.001 * mechanics.b6.body.w_a[2] * mechanics.b6.body.w_a[3] + mechanics.b6.body.r_CM[2] * mechanics.b6.body.frame_a.f[3] + -0.001 * mechanics.b6.body.w_a[3] * mechanics.b6.body.w_a[2] - mechanics.b6.body.r_CM[3] * mechanics.b6.body.frame_a.f[2] ;
//   mechanics.b6.body.frame_a.f[2] = (mechanics.b6.frame_b.R.T[2,1] * (mechanics.b6.a_0[1] - mechanics.b6.body.g_0[1]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.b6.a_0[2] - mechanics.b6.body.g_0[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.b6.a_0[3] - mechanics.b6.body.g_0[3]) + mechanics.load.body.z_a[3] * mechanics.b6.body.r_CM[1] + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[2] * mechanics.b6.body.r_CM[3] - mechanics.b6.body.w_a[3] * mechanics.b6.body.r_CM[2]) + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[2] * mechanics.b6.body.r_CM[1] - mechanics.b6.body.w_a[1] * mechanics.b6.body.r_CM[2]) - mechanics.load.body.z_a[1] * mechanics.b6.body.r_CM[3]) * mechanics.b6.body.m ;
//   mechanics.b6.body.frame_a.f[3] = (mechanics.b6.frame_b.R.T[3,1] * (mechanics.b6.a_0[1] - mechanics.b6.body.g_0[1]) + mechanics.b6.frame_b.R.T[3,2] * (mechanics.b6.a_0[2] - mechanics.b6.body.g_0[2]) + mechanics.b6.frame_b.R.T[3,3] * (mechanics.b6.a_0[3] - mechanics.b6.body.g_0[3]) + mechanics.load.body.z_a[1] * mechanics.b6.body.r_CM[2] + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[3] * mechanics.b6.body.r_CM[1] - mechanics.b6.body.w_a[1] * mechanics.b6.body.r_CM[3]) + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[3] * mechanics.b6.body.r_CM[2] - mechanics.b6.body.w_a[2] * mechanics.b6.body.r_CM[3]) - mechanics.load.body.z_a[2] * mechanics.b6.body.r_CM[1]) * mechanics.b6.body.m ;
//   mechanics.b6.body.frame_a.f[1] = (mechanics.b6.frame_b.R.T[1,1] * (mechanics.b6.a_0[1] - mechanics.b6.body.g_0[1]) + mechanics.b6.frame_b.R.T[1,2] * (mechanics.b6.a_0[2] - mechanics.b6.body.g_0[2]) + mechanics.b6.frame_b.R.T[1,3] * (mechanics.b6.a_0[3] - mechanics.b6.body.g_0[3]) + mechanics.load.body.z_a[2] * mechanics.b6.body.r_CM[3] + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[1] * mechanics.b6.body.r_CM[2] - mechanics.b6.body.w_a[2] * mechanics.b6.body.r_CM[1]) + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[1] * mechanics.b6.body.r_CM[3] - mechanics.b6.body.w_a[3] * mechanics.b6.body.r_CM[1]) - mechanics.load.body.z_a[3] * mechanics.b6.body.r_CM[2]) * mechanics.b6.body.m ;
//   -mechanics.b5.frame_b.t[1] = mechanics.r6.R_rel.T[3,1] * mechanics.b6.frame_a.t[3] + mechanics.r6.R_rel.T[1,1] * mechanics.b6.frame_a.t[1] ;
//   -mechanics.b5.frame_b.t[3] = mechanics.r6.R_rel.T[3,3] * mechanics.b6.frame_a.t[3] + mechanics.r6.R_rel.T[1,3] * mechanics.b6.frame_a.t[1] ;
//   mechanics.b6.body.frame_a.t[3] + mechanics.b6.frameTranslation.frame_a.t[3] - mechanics.b6.frame_a.t[3] = 0.0 ;
//   mechanics.b6.body.frame_a.t[3] = 0.001 * mechanics.load.body.z_a[3] + 0.001 * mechanics.b6.body.w_a[1] * mechanics.b6.body.w_a[2] + mechanics.b6.body.r_CM[1] * mechanics.b6.body.frame_a.f[2] + -0.001 * mechanics.b6.body.w_a[2] * mechanics.b6.body.w_a[1] - mechanics.b6.body.r_CM[2] * mechanics.b6.body.frame_a.f[1] ;
//   mechanics.b6.body.frame_a.f[1] + (-mechanics.b6.frame_b.f[1]) - mechanics.b6.frame_a.f[1] = 0.0 ;
//   -mechanics.b6.frame_b.f[1] = (mechanics.b6.frame_b.R.T[1,1] * (mechanics.load.a_0[1] - mechanics.load.body.g_0[1]) + mechanics.b6.frame_b.R.T[1,2] * (mechanics.load.a_0[2] - mechanics.load.body.g_0[2]) + mechanics.b6.frame_b.R.T[1,3] * (mechanics.load.a_0[3] - mechanics.load.body.g_0[3]) + mechanics.load.body.z_a[2] * mechanics.load.body.r_CM[3] + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[1] * mechanics.load.body.r_CM[2] - mechanics.b6.body.w_a[2] * mechanics.load.body.r_CM[1]) + mechanics.b6.body.w_a[3] * (mechanics.b6.body.w_a[1] * mechanics.load.body.r_CM[3] - mechanics.b6.body.w_a[3] * mechanics.load.body.r_CM[1]) - mechanics.load.body.z_a[3] * mechanics.load.body.r_CM[2]) * mechanics.load.body.m ;
//   -mechanics.b6.frame_b.f[3] = (mechanics.b6.frame_b.R.T[3,1] * (mechanics.load.a_0[1] - mechanics.load.body.g_0[1]) + mechanics.b6.frame_b.R.T[3,2] * (mechanics.load.a_0[2] - mechanics.load.body.g_0[2]) + mechanics.b6.frame_b.R.T[3,3] * (mechanics.load.a_0[3] - mechanics.load.body.g_0[3]) + mechanics.load.body.z_a[1] * mechanics.load.body.r_CM[2] + mechanics.b6.body.w_a[1] * (mechanics.b6.body.w_a[3] * mechanics.load.body.r_CM[1] - mechanics.b6.body.w_a[1] * mechanics.load.body.r_CM[3]) + mechanics.b6.body.w_a[2] * (mechanics.b6.body.w_a[3] * mechanics.load.body.r_CM[2] - mechanics.b6.body.w_a[2] * mechanics.load.body.r_CM[3]) - mechanics.load.body.z_a[2] * mechanics.load.body.r_CM[1]) * mechanics.load.body.m ;
//   -mechanics.b6.frame_b.t[2] = 0.001 * mechanics.load.body.z_a[2] + 0.001 * mechanics.b6.body.w_a[3] * mechanics.b6.body.w_a[1] + -0.001 * mechanics.b6.body.w_a[1] * mechanics.b6.body.w_a[3] + mechanics.load.body.r_CM[1] * mechanics.b6.frame_b.f[3] - mechanics.load.body.r_CM[3] * mechanics.b6.frame_b.f[1] ;
//   0.0 = mechanics.b6.frameTranslation.frame_a.t[2] + mechanics.b6.frame_b.t[2] + mechanics.b6.frameTranslation.r[3] * mechanics.b6.frame_b.f[1] - mechanics.b6.frameTranslation.r[1] * mechanics.b6.frame_b.f[3] ;
//   mechanics.b6.body.frame_a.t[2] + mechanics.b6.frameTranslation.frame_a.t[2] - mechanics.tau[6] = 0.0 ;
//   mechanics.b6.body.frame_a.t[2] = 0.001 * mechanics.load.body.z_a[2] + 0.001 * mechanics.b6.body.w_a[3] * mechanics.b6.body.w_a[1] + mechanics.b6.body.r_CM[3] * mechanics.b6.body.frame_a.f[1] + -0.001 * mechanics.b6.body.w_a[1] * mechanics.b6.body.w_a[3] - mechanics.b6.body.r_CM[1] * mechanics.b6.body.frame_a.f[3] ;
//   mechanics.b6.body.frame_a.f[3] + (-mechanics.b6.frame_b.f[3]) - mechanics.b6.frame_a.f[3] = 0.0 ;
//   -mechanics.b5.frame_b.f[1] = mechanics.r6.R_rel.T[3,1] * mechanics.b6.frame_a.f[3] + mechanics.r6.R_rel.T[1,1] * mechanics.b6.frame_a.f[1] ;
//   0.0 = mechanics.b5.frameTranslation.frame_a.t[3] + mechanics.b5.frame_b.t[3] + mechanics.b5.frameTranslation.r[1] * mechanics.b5.frame_b.f[2] - mechanics.b5.frameTranslation.r[2] * mechanics.b5.frame_b.f[1] ;
//   mechanics.b5.body.frame_a.f[1] + mechanics.b4.frame_b.f[1] - mechanics.b5.frame_b.f[1] = 0.0 ;
//   mechanics.b5.body.frame_a.f[1] = (mechanics.b5.frame_b.R.T[1,1] * (mechanics.b5.a_0[1] - mechanics.b5.body.g_0[1]) + mechanics.b5.frame_b.R.T[1,2] * (mechanics.b5.a_0[2] - mechanics.b5.body.g_0[2]) + mechanics.b5.frame_b.R.T[1,3] * (mechanics.b5.a_0[3] - mechanics.b5.body.g_0[3]) + mechanics.b5.body.z_a[2] * mechanics.b5.body.r_CM[3] + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[1] * mechanics.b5.body.r_CM[2] - mechanics.b5.body.w_a[2] * mechanics.b5.body.r_CM[1]) + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[1] * mechanics.b5.body.r_CM[3] - mechanics.b5.body.w_a[3] * mechanics.b5.body.r_CM[1]) - mechanics.b5.body.z_a[3] * mechanics.b5.body.r_CM[2]) * mechanics.b5.body.m ;
//   mechanics.b5.body.frame_a.f[2] = (mechanics.b6.frame_b.R.T[2,1] * (mechanics.b5.a_0[1] - mechanics.b5.body.g_0[1]) + mechanics.b6.frame_b.R.T[2,2] * (mechanics.b5.a_0[2] - mechanics.b5.body.g_0[2]) + mechanics.b6.frame_b.R.T[2,3] * (mechanics.b5.a_0[3] - mechanics.b5.body.g_0[3]) + mechanics.b5.body.z_a[3] * mechanics.b5.body.r_CM[1] + mechanics.b5.body.w_a[3] * (mechanics.b5.body.w_a[2] * mechanics.b5.body.r_CM[3] - mechanics.b5.body.w_a[3] * mechanics.b5.body.r_CM[2]) + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[2] * mechanics.b5.body.r_CM[1] - mechanics.b5.body.w_a[1] * mechanics.b5.body.r_CM[2]) - mechanics.b5.body.z_a[1] * mechanics.b5.body.r_CM[3]) * mechanics.b5.body.m ;
//   mechanics.b5.body.frame_a.t[2] = 0.8100000000000001 * mechanics.b5.body.z_a[2] + 1.25 * mechanics.b5.body.w_a[3] * mechanics.b5.body.w_a[1] + mechanics.b5.body.r_CM[3] * mechanics.b5.body.frame_a.f[1] + -1.53 * mechanics.b5.body.w_a[1] * mechanics.b5.body.w_a[3] - mechanics.b5.body.r_CM[1] * mechanics.b5.body.frame_a.f[3] ;
//   mechanics.b5.body.frame_a.f[3] = (mechanics.b5.frame_b.R.T[3,1] * (mechanics.b5.a_0[1] - mechanics.b5.body.g_0[1]) + mechanics.b5.frame_b.R.T[3,2] * (mechanics.b5.a_0[2] - mechanics.b5.body.g_0[2]) + mechanics.b5.frame_b.R.T[3,3] * (mechanics.b5.a_0[3] - mechanics.b5.body.g_0[3]) + mechanics.b5.body.z_a[1] * mechanics.b5.body.r_CM[2] + mechanics.b5.body.w_a[1] * (mechanics.b5.body.w_a[3] * mechanics.b5.body.r_CM[1] - mechanics.b5.body.w_a[1] * mechanics.b5.body.r_CM[3]) + mechanics.b5.body.w_a[2] * (mechanics.b5.body.w_a[3] * mechanics.b5.body.r_CM[2] - mechanics.b5.body.w_a[2] * mechanics.b5.body.r_CM[3]) - mechanics.b5.body.z_a[2] * mechanics.b5.body.r_CM[1]) * mechanics.b5.body.m ;
//   mechanics.b5.body.frame_a.t[1] = 1.25 * mechanics.b5.body.z_a[1] + 1.53 * mechanics.b5.body.w_a[2] * mechanics.b5.body.w_a[3] + mechanics.b5.body.r_CM[2] * mechanics.b5.body.frame_a.f[3] + -0.8100000000000001 * mechanics.b5.body.w_a[3] * mechanics.b5.body.w_a[2] - mechanics.b5.body.r_CM[3] * mechanics.b5.body.frame_a.f[2] ;
//   mechanics.b5.body.frame_a.t[1] + mechanics.b5.frameTranslation.frame_a.t[1] - mechanics.tau[5] = 0.0 ;
//   0.0 = mechanics.b5.frameTranslation.frame_a.t[1] + mechanics.b5.frame_b.t[1] + mechanics.b5.frameTranslation.r[2] * mechanics.b5.frame_b.f[3] - mechanics.b5.frameTranslation.r[3] * mechanics.b5.frame_b.f[2] ;
//   mechanics.b5.body.frame_a.f[3] + (-mechanics.b5.frame_b.f[3]) - mechanics.b5.frame_a.f[3] = 0.0 ;
//   -mechanics.b4.frame_b.f[3] = mechanics.r5.R_rel.T[3,3] * mechanics.b5.frame_a.f[3] + mechanics.r5.R_rel.T[2,3] * mechanics.b5.frame_a.f[2] ;
//   mechanics.b4.body.frame_a.f[3] + (-mechanics.b4.frame_b.f[3]) - mechanics.b4.frame_a.f[3] = 0.0 ;
//   mechanics.b4.body.frame_a.f[2] + mechanics.b3.frame_b.f[2] - mechanics.b4.frame_b.f[2] = 0.0 ;
//   0.0 = mechanics.b4.frameTranslation.frame_a.t[1] + mechanics.b4.frameTranslation.r[2] * mechanics.b4.frame_b.f[3] + (-mechanics.b4.frameTranslation.r[3]) * mechanics.b4.frame_b.f[2] - mechanics.tau[5] ;
//   mechanics.b4.body.frame_a.t[1] + mechanics.b4.frameTranslation.frame_a.t[1] - mechanics.b4.frame_a.t[1] = 0.0 ;
//   0.0 = mechanics.b3.frameTranslation.frame_a.t[2] + mechanics.b3.frameTranslation.r[3] * mechanics.b3.frame_b.f[1] + (-mechanics.b3.frameTranslation.r[1]) * mechanics.b3.frame_b.f[3] - mechanics.tau[4] ;
//   mechanics.b3.body.frame_a.t[2] + mechanics.b3.frameTranslation.frame_a.t[2] - mechanics.b3.frame_a.t[2] = 0.0 ;
//   -mechanics.b2.frame_b.t[3] = mechanics.r3.R_rel.T[3,3] * mechanics.b3.frame_a.t[3] + mechanics.r3.R_rel.T[2,3] * mechanics.b3.frame_a.t[2] ;
//   mechanics.b3.body.frame_a.t[3] + mechanics.b3.frameTranslation.frame_a.t[3] - mechanics.b3.frame_a.t[3] = 0.0 ;
//   0.0 = mechanics.b3.frameTranslation.frame_a.t[3] + mechanics.b3.frame_b.t[3] + mechanics.b3.frameTranslation.r[1] * mechanics.b3.frame_b.f[2] - mechanics.b3.frameTranslation.r[2] * mechanics.b3.frame_b.f[1] ;
//   -mechanics.b3.frame_b.t[3] = mechanics.r4.R_rel.T[3,3] * mechanics.b4.frame_a.t[3] + mechanics.r4.R_rel.T[1,3] * mechanics.b4.frame_a.t[1] ;
//   mechanics.b4.body.frame_a.t[3] + mechanics.b4.frameTranslation.frame_a.t[3] - mechanics.b4.frame_a.t[3] = 0.0 ;
//   0.0 = mechanics.b4.frameTranslation.frame_a.t[3] + mechanics.b4.frame_b.t[3] + mechanics.b4.frameTranslation.r[1] * mechanics.b4.frame_b.f[2] - mechanics.b4.frameTranslation.r[2] * mechanics.b4.frame_b.f[1] ;
//   -mechanics.b4.frame_b.t[3] = mechanics.r5.R_rel.T[3,3] * mechanics.b5.frame_a.t[3] + mechanics.r5.R_rel.T[2,3] * mechanics.b5.frame_a.t[2] ;
//   mechanics.b5.body.frame_a.t[3] + mechanics.b5.frameTranslation.frame_a.t[3] - mechanics.b5.frame_a.t[3] = 0.0 ;
//   mechanics.b5.body.frame_a.t[3] = 1.53 * mechanics.b5.body.z_a[3] + 0.8100000000000001 * mechanics.b5.body.w_a[1] * mechanics.b5.body.w_a[2] + mechanics.b5.body.r_CM[1] * mechanics.b5.body.frame_a.f[2] + -1.25 * mechanics.b5.body.w_a[2] * mechanics.b5.body.w_a[1] - mechanics.b5.body.r_CM[2] * mechanics.b5.body.frame_a.f[1] ;
//   mechanics.b5.body.frame_a.f[2] + (-mechanics.b5.frame_b.f[2]) - mechanics.b5.frame_a.f[2] = 0.0 ;
//   mechanics.b6.body.frame_a.f[2] + mechanics.b5.frame_b.f[2] - mechanics.b6.frame_b.f[2] = 0.0 ;
//   -mechanics.b6.frame_b.t[1] = 0.001 * mechanics.load.body.z_a[1] + 0.001 * mechanics.b6.body.w_a[2] * mechanics.b6.body.w_a[3] + -0.001 * mechanics.b6.body.w_a[3] * mechanics.b6.body.w_a[2] + mechanics.load.body.r_CM[3] * mechanics.b6.frame_b.f[2] - mechanics.load.body.r_CM[2] * mechanics.b6.frame_b.f[3] ;
//   0.0 = mechanics.b6.frameTranslation.frame_a.t[1] + mechanics.b6.frame_b.t[1] + mechanics.b6.frameTranslation.r[2] * mechanics.b6.frame_b.f[3] - mechanics.b6.frameTranslation.r[3] * mechanics.b6.frame_b.f[2] ;
//   mechanics.b6.body.frame_a.t[1] + mechanics.b6.frameTranslation.frame_a.t[1] - mechanics.b6.frame_a.t[1] = 0.0 ;
//   0.0 = mechanics.b5.frameTranslation.frame_a.t[2] + mechanics.b5.frameTranslation.r[3] * mechanics.b5.frame_b.f[1] + (-mechanics.b5.frameTranslation.r[1]) * mechanics.b5.frame_b.f[3] - mechanics.tau[6] ;
//   mechanics.b5.body.frame_a.t[2] + mechanics.b5.frameTranslation.frame_a.t[2] - mechanics.b5.frame_a.t[2] = 0.0 ;
//   -mechanics.b4.frame_b.t[2] = mechanics.r5.R_rel.T[3,2] * mechanics.b5.frame_a.t[3] + mechanics.r5.R_rel.T[2,2] * mechanics.b5.frame_a.t[2] ;
//   0.0 = mechanics.b4.frameTranslation.frame_a.t[2] + mechanics.b4.frame_b.t[2] + mechanics.b4.frameTranslation.r[3] * mechanics.b4.frame_b.f[1] - mechanics.b4.frameTranslation.r[1] * mechanics.b4.frame_b.f[3] ;
//   mechanics.b4.body.frame_a.t[2] + mechanics.b4.frameTranslation.frame_a.t[2] - mechanics.tau[4] = 0.0 ;
//   (-mechanics.tau[4]) - axis4.gear.bearingFriction.tau - axis4.gear.gear.flange_b.tau = 0.0 ;
//   axis4.gear.bearingFriction.tau = if axis4.gear.bearingFriction.locked then axis4.gear.bearingFriction.sa else if axis4.gear.bearingFriction.startForward then Modelica.Math.tempInterpol1(axis4.gear.bearingFriction.w, {{axis4.gear.bearingFriction.tau_pos[1,1], axis4.gear.bearingFriction.tau_pos[1,2]}, {axis4.gear.bearingFriction.tau_pos[2,1], axis4.gear.bearingFriction.tau_pos[2,2]}}, 2) else if axis4.gear.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-axis4.gear.bearingFriction.w, {{axis4.gear.bearingFriction.tau_pos[1,1], axis4.gear.bearingFriction.tau_pos[1,2]}, {axis4.gear.bearingFriction.tau_pos[2,1], axis4.gear.bearingFriction.tau_pos[2,2]}}, 2) else if pre(axis4.gear.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(axis4.gear.bearingFriction.w, {{axis4.gear.bearingFriction.tau_pos[1,1], axis4.gear.bearingFriction.tau_pos[1,2]}, {axis4.gear.bearingFriction.tau_pos[2,1], axis4.gear.bearingFriction.tau_pos[2,2]}}, 2) else -Modelica.Math.tempInterpol1(-axis4.gear.bearingFriction.w, {{axis4.gear.bearingFriction.tau_pos[1,1], axis4.gear.bearingFriction.tau_pos[1,2]}, {axis4.gear.bearingFriction.tau_pos[2,1], axis4.gear.bearingFriction.tau_pos[2,2]}}, 2) ;
//   axis4.gear.bearingFriction.locked = not (pre(axis4.gear.bearingFriction.mode) == 1 or axis4.gear.bearingFriction.startForward or pre(axis4.gear.bearingFriction.mode) == -1 or axis4.gear.bearingFriction.startBackward) ;
//   axis4.gear.bearingFriction.startBackward = pre(axis4.gear.bearingFriction.mode) == 0 and (axis4.gear.bearingFriction.sa < (-axis4.gear.bearingFriction.tau0_max) or pre(axis4.gear.bearingFriction.startBackward) and axis4.gear.bearingFriction.sa < (-axis4.gear.bearingFriction.tau0)) or pre(axis4.gear.bearingFriction.mode) == 1 and axis4.gear.bearingFriction.w < (-axis4.gear.bearingFriction.w_small) or initial() and axis4.gear.bearingFriction.w < 0.0 ;
//   $DER.axis4.initializeFlange.set_a_start.w = if axis4.gear.bearingFriction.locked then 0.0 else if axis4.gear.bearingFriction.startForward then axis4.gear.bearingFriction.sa - axis4.gear.bearingFriction.tau0_max else if axis4.gear.bearingFriction.startBackward then axis4.gear.bearingFriction.sa + axis4.gear.bearingFriction.tau0_max else if pre(axis4.gear.bearingFriction.mode) == 1 then axis4.gear.bearingFriction.sa - axis4.gear.bearingFriction.tau0_max else axis4.gear.bearingFriction.sa + axis4.gear.bearingFriction.tau0_max ;
//   axis6.gear.bearingFriction.lossPower = axis6.gear.bearingFriction.tau * axis6.gear.bearingFriction.w ;
//   axis6.gear.bearingFriction.mode = if (pre(axis6.gear.bearingFriction.mode) == 1 or pre(axis6.gear.bearingFriction.mode) == 2 or axis6.gear.bearingFriction.startForward) and axis6.gear.bearingFriction.w > 0.0 then 1 else if (pre(axis6.gear.bearingFriction.mode) == -1 or pre(axis6.gear.bearingFriction.mode) == 2 or axis6.gear.bearingFriction.startBackward) and axis6.gear.bearingFriction.w < 0.0 then -1 else 0 ;
//   $DER.axis6.initializeFlange.set_a_start.w = der(mechanics.r6.w) ;
//   axis5.gear.bearingFriction.lossPower = axis5.gear.bearingFriction.tau * axis5.gear.bearingFriction.w ;
//   axis5.gear.bearingFriction.mode = if (pre(axis5.gear.bearingFriction.mode) == 1 or pre(axis5.gear.bearingFriction.mode) == 2 or axis5.gear.bearingFriction.startForward) and axis5.gear.bearingFriction.w > 0.0 then 1 else if (pre(axis5.gear.bearingFriction.mode) == -1 or pre(axis5.gear.bearingFriction.mode) == 2 or axis5.gear.bearingFriction.startBackward) and axis5.gear.bearingFriction.w < 0.0 then -1 else 0 ;
//   $DER.axis5.initializeFlange.set_a_start.w = der(mechanics.r5.w) ;
//   $DER.axis1.initializeFlange.set_a_start.w = der(mechanics.r1.w) ;
//   $DER.axis2.initializeFlange.set_a_start.w = der(mechanics.r2.w) ;
//   mechanics.b3.body.z_a[1] = $DER.axis2.initializeFlange.set_a_start.w + $DER.axis3.initializeFlange.set_a_start.w ;
//   $DER.axis3.initializeFlange.set_a_start.w = der(mechanics.r3.w) ;
//   $DER.axis4.initializeFlange.set_a_start.w = der(mechanics.r4.w) ;
//   mechanics.b1.body.frame_a.t[3] = mechanics.b1.body.r_CM[1] * mechanics.b1.body.frame_a.f[2] - mechanics.b1.body.r_CM[2] * mechanics.b1.body.frame_a.f[1] ;
//   mechanics.b1.body.frame_a.t[1] = mechanics.b1.body.r_CM[2] * mechanics.b1.body.frame_a.f[3] - mechanics.b1.body.r_CM[3] * mechanics.b1.body.frame_a.f[2] ;
//   mechanics.b1.body.frame_a.f[1] + (-mechanics.b1.frame_a.f[1]) - mechanics.b1.frame_b.f[1] = 0.0 ;
//   -mechanics.b1.frame_b.f[2] = mechanics.b2.frame_b.R.T[3,2] * mechanics.b2.frame_a.f[3] + mechanics.b2.frame_b.R.T[2,2] * mechanics.b2.frame_a.f[2] ;
//   mechanics.b1.body.frame_a.f[2] + mechanics.b0.frame_b.f[2] - mechanics.b1.frame_b.f[2] = 0.0 ;
//   mechanics.b0.body.frame_a.f[2] + mechanics.world.frame_b.f[2] - mechanics.b0.frame_b.f[2] = 0.0 ;
//   0.0 = mechanics.b1.frameTranslation.frame_a.t[1] + mechanics.b1.frameTranslation.r[2] * mechanics.b1.frame_b.f[3] + (-mechanics.b1.frameTranslation.r[3]) * mechanics.b1.frame_b.f[2] - mechanics.tau[2] ;
//   mechanics.b1.frameTranslation.frame_a.t[1] + mechanics.b1.body.frame_a.t[1] - mechanics.b1.frame_a.t[1] = 0.0 ;
//   -mechanics.b1.frame_b.t[3] = mechanics.r2.R_rel.T[3,3] * mechanics.b2.frame_a.t[3] + mechanics.r2.R_rel.T[2,3] * mechanics.b2.frame_a.t[2] ;
//   0.0 = mechanics.b1.frameTranslation.frame_a.t[3] + mechanics.b1.frame_b.t[3] + mechanics.b1.frameTranslation.r[1] * mechanics.b1.frame_b.f[2] - mechanics.b1.frameTranslation.r[2] * mechanics.b1.frame_b.f[1] ;
//   mechanics.b1.frameTranslation.frame_a.t[3] + mechanics.b1.body.frame_a.t[3] - mechanics.b1.frame_a.t[3] = 0.0 ;
//   -mechanics.b0.frame_b.t[1] = mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.frame_a.t[3] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.frame_a.t[1] ;
//   -mechanics.b0.frame_b.t[3] = mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.frame_a.t[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.frame_a.t[1] ;
//   mechanics.b1.body.frame_a.f[3] + (-mechanics.b1.frame_a.f[3]) - mechanics.b1.frame_b.f[3] = 0.0 ;
//   -mechanics.b0.frame_b.f[1] = mechanics.b1.frame_a.R.T[3,1] * mechanics.b1.frame_a.f[3] + mechanics.b1.frame_a.R.T[1,1] * mechanics.b1.frame_a.f[1] ;
//   0.0 = mechanics.b0.frameTranslation.frame_a.t[3] + mechanics.b0.frame_b.t[3] + mechanics.b0.frameTranslation.r[1] * mechanics.b0.frame_b.f[2] - mechanics.b0.frameTranslation.r[2] * mechanics.b0.frame_b.f[1] ;
//   mechanics.b0.body.frame_a.t[3] + mechanics.b0.frameTranslation.frame_a.t[3] + mechanics.world.frame_b.t[3] = 0.0 ;
//   mechanics.b0.body.frame_a.f[1] + mechanics.world.frame_b.f[1] - mechanics.b0.frame_b.f[1] = 0.0 ;
//   -mechanics.b0.frame_b.f[3] = mechanics.b1.frame_a.R.T[3,3] * mechanics.b1.frame_a.f[3] + mechanics.b1.frame_a.R.T[1,3] * mechanics.b1.frame_a.f[1] ;
//   0.0 = mechanics.b0.frameTranslation.frame_a.t[1] + mechanics.b0.frame_b.t[1] + mechanics.b0.frameTranslation.r[2] * mechanics.b0.frame_b.f[3] - mechanics.b0.frameTranslation.r[3] * mechanics.b0.frame_b.f[2] ;
//   mechanics.b0.body.frame_a.t[1] + mechanics.b0.frameTranslation.frame_a.t[1] + mechanics.world.frame_b.t[1] = 0.0 ;
//   0.0 = mechanics.b0.frameTranslation.frame_a.t[2] + mechanics.b0.frameTranslation.r[3] * mechanics.b0.frame_b.f[1] + (-mechanics.b0.frameTranslation.r[1]) * mechanics.b0.frame_b.f[3] - mechanics.tau[1] ;
//   mechanics.b0.body.frame_a.t[2] + mechanics.b0.frameTranslation.frame_a.t[2] + mechanics.world.frame_b.t[2] = 0.0 ;
//   mechanics.b0.body.frame_a.f[3] + mechanics.world.frame_b.f[3] - mechanics.b0.frame_b.f[3] = 0.0 ;
//   axis4.gear.bearingFriction.lossPower = axis4.gear.bearingFriction.tau * axis4.gear.bearingFriction.w ;
//   axis4.gear.bearingFriction.mode = if (pre(axis4.gear.bearingFriction.mode) == 1 or pre(axis4.gear.bearingFriction.mode) == 2 or axis4.gear.bearingFriction.startForward) and axis4.gear.bearingFriction.w > 0.0 then 1 else if (pre(axis4.gear.bearingFriction.mode) == -1 or pre(axis4.gear.bearingFriction.mode) == 2 or axis4.gear.bearingFriction.startBackward) and axis4.gear.bearingFriction.w < 0.0 then -1 else 0 ;
//   $DER.$DER.axis3.gear.gear.phi_a = axis3.gear.gear.ratio * $DER.axis3.initializeFlange.set_a_start.w ;
//   axis3.gear.a_rel = $DER.$DER.axis3.gear.gear.phi_a - axis3.motor.Jmotor.a ;
//   axis3.gear.a_rel = der(axis3.gear.spring.w_rel) ;
//   $DER.$DER.axis2.gear.gear.phi_a = axis2.gear.gear.ratio * $DER.axis2.initializeFlange.set_a_start.w ;
//   axis2.gear.a_rel = $DER.$DER.axis2.gear.gear.phi_a - axis2.motor.Jmotor.a ;
//   axis2.gear.a_rel = der(axis2.gear.spring.w_rel) ;
//   $DER.$DER.axis1.gear.gear.phi_a = axis1.gear.gear.ratio * $DER.axis1.initializeFlange.set_a_start.w ;
//   axis1.gear.a_rel = $DER.$DER.axis1.gear.gear.phi_a - axis1.motor.Jmotor.a ;
//   axis1.gear.a_rel = der(axis1.gear.spring.w_rel) ;
//   pathPlanning.terminateSimulation.condition = time >= pathPlanning.path.endTime + pathPlanning.swingTime ;
//   
//   /* system #2 */
//   axis6.initializeFlange.set_a_start.a_start = axis6.const.k ;
//   
//   /* system #3 */
//   axis5.initializeFlange.set_a_start.a_start = axis5.const.k ;
//   
//   /* system #4 */
//   axis4.initializeFlange.set_a_start.a_start = axis4.const.k ;
//   
//   /* system #5 */
//   axis3.initializeFlange.set_a_start.a_start = axis3.const.k ;
//   
//   /* system #6 */
//   axis2.initializeFlange.set_a_start.a_start = axis2.const.k ;
//   
//   /* system #7 */
//   axis1.initializeFlange.set_a_start.a_start = axis1.const.k ;
//   
//   /* system #8 */
//   $whenCondition1 = pathPlanning.terminateSimulation.condition ;
// end Modelica.Mechanics.MultiBody.Examples.Systems.RobotR3.fullRobot;
// Warning: There are iteration variables with default zero start attribute. Use +d=initialization for more information.
// "
// endResult
