// name:     CoupledClutches
// keywords: CoupledClutches FMI-Export FMI-Import
// status:   correct
// teardown_command: rm -rf binaries sources modelDescription.xml CoupledClutches.fmu CoupledClutches_me_FMU.mo CoupledClutches.lib* CoupledClutches.so CoupledClutches.dll CoupledClutches_*.c CoupledClutches_*.h CoupledClutches_*.o CoupledClutches_*.json
// Real variables, Real input variable, continuous-time states, state events, event iteration

loadModel(Modelica); getErrorString();
loadFile("CoupledClutches.mo"); getErrorString();
translateModelFMU(CoupledClutches, version="1.0"); getErrorString();

importFMU("CoupledClutches.fmu"); getErrorString();
loadFile("CoupledClutches_me_FMU.mo"); getErrorString();
simulate(CoupledClutches_me_FMU, numberOfIntervals=150, variableFilter="J1_w1|J2_w1|J3_w1|J4_w1"); getErrorString();

val(J1_w1, 1);
val(J2_w1, 1);
val(J3_w1, 1);
val(J4_w1, 1);

// Result:
// true
// ""
// true
// ""
// "CoupledClutches.fmu"
// "Warning: There are iteration variables with default zero start attribute. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// "CoupledClutches_me_FMU.mo"
// ""
// true
// ""
// record SimulationResult
//     resultFile = "CoupledClutches_me_FMU_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.5, numberOfIntervals = 150, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CoupledClutches_me_FMU', options = '', outputFormat = 'mat', variableFilter = 'J1_w1|J2_w1|J3_w1|J4_w1', cflags = '', simflags = ''",
//     messages = "assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// stdout            | warning | While solving non-linear system an assertion failed during initialization.
// |                 | |       | | The non-linear solver tries to solve the problem that could take some time.
// |                 | |       | | It could help to provide better start-values for the iteration variables.
// |                 | |       | | For more information simulate with -lv LOG_NLS
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// assert            | debug   | division leads to inf or nan at time 0, (a=-nan) / (b=1), where divisor b is: J1.J
// "
// end SimulationResult;
// ""
// 3.23552136708265
// 3.382300587836032
// 3.382300487836059
// 0.0
// endResult
