// name:     test_03.mos
// keywords: <...>
// status:   correct
// cflags:   +postOptModules=inlineArrayEqn,constantLinearSystem,removeSimpleEquations,generateSymbolicLinearization
// teardown_command: rm -rf *simple_test* output.log
// 
// <insert description here>
//

loadFile("test_03.mo");

linearize(simple_test, stopTime=0);
getErrorString();

loadFile("linear_simple_test.mo");
simulate(linear_simple__test, method="euler");
getErrorString();

list(linear_simple__test);
readFile("linear_simple__test.log"); // Check that output log is empty

// 
//  Case for numeric linearization of LotkaVolterra model
//
//linearize with numeric linearization and data recovery
simulate(simple_test, simflags="-l=0 -l_datarec");
getErrorString();
loadFile("linear_simple_test.mo");
simulate(linear_simple__test, method="euler");
getErrorString();
list(linear_simple__test);
readFile("linear_simple__test.log"); // Check that output log is empty

// Result:
// true
// record SimulationResult
//     resultFile = "simple_test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | info    | Linearization will performed at point of time: 0.000000
// stdout            | info    | Linear model is created!
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// true
// record SimulationResult
//     resultFile = "linear_simple__test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'euler', fileNamePrefix = 'linear_simple__test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// "model linear_simple__test
//   parameter Integer n = 1;
//   // states
//   parameter Integer k = 0;
//   // top-level inputs
//   parameter Integer l = 0;
//   // top-level outputs
//   parameter Real x0[1] = {2};
//   parameter Real u0[0] = {i for i in 1:0};
//   parameter Real A[1, 1] = [0.3333333333333333];
//   parameter Real B[1, 0] = zeros(1, 0);
//   parameter Real C[0, 1] = zeros(0, 1);
//   parameter Real D[0, 0] = zeros(0, 0);
//   Real x[1](start = x0);
//   input Real u[0];
//   output Real y[0];
//   Real x_Pa = x[1];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
// end linear_simple__test;"
// ""
// record SimulationResult
//     resultFile = "simple_test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-l=0 -l_datarec'",
//     messages = "stdout            | info    | Linearization will performed at point of time: 0.000000
// stdout            | info    | Jacobian or SparsePattern is not generated or failed to initialize! Switch back to normal.
// stdout            | info    | Linear model is created!
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// true
// record SimulationResult
//     resultFile = "linear_simple__test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'euler', fileNamePrefix = 'linear_simple__test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// "model linear_simple__test
//   parameter Integer n = 1;
//   // states
//   parameter Integer k = 0;
//   // top-level inputs
//   parameter Integer l = 0;
//   // top-level outputs
//   parameter Integer nz = 2;
//   // data recovery variables
//   parameter Real x0[1] = {2};
//   parameter Real u0[0] = {i for i in 1:0};
//   parameter Real z0[2] = {0.3333333333333333, 2.333333333333333};
//   parameter Real A[1, 1] = [0.333333338227402];
//   parameter Real B[1, 0] = zeros(1, 0);
//   parameter Real C[0, 1] = zeros(0, 1);
//   parameter Real D[0, 0] = zeros(0, 0);
//   parameter Real Cz[2, 1] = [-0.3333333337847341; -0.3333333337847341];
//   parameter Real Dz[2, 0] = zeros(2, 0);
//   Real x[1](start = x0);
//   input Real u[0];
//   output Real y[0];
//   output Real z[2];
//   Real x_Pa = x[1];
//   Real z_Pb = z[1];
//   Real z_Pc = z[2];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
//   z = Cz * x + Dz * u;
// end linear_simple__test;"
// ""
// endResult
