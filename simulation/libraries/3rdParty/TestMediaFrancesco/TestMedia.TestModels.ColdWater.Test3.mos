// name:     TestMedia.TestModels.ColdWater.Test3.mos [simulation checking]
// keywords: simulation TestMedia.TestModels.ColdWater.Test3
// status: correct
// teardown_command: rm -rf _TestMedia.TestModels.ColdWater.Test3.* TestMedia.TestModels.ColdWater.Test3_* TestMedia.TestModels.ColdWater.Test3 TestMedia.TestModels.ColdWater.Test3.exe TestMedia.TestModels.ColdWater.Test3.cpp TestMedia.TestModels.ColdWater.Test3.makefile TestMedia.TestModels.ColdWater.Test3.libs TestMedia.TestModels.ColdWater.Test3.log TestMedia.TestModels.ColdWater.Test3.c TestMedia.TestModels.ColdWater.Test3.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica,{"3.1"}); getErrorString();
loadFile("TestMedia.mo"); getErrorString();


simulate(TestMedia.TestModels.ColdWater.Test3, numberOfIntervals=200, stopTime=1.0); getErrorString();

res := OpenModelica.Scripting.compareSimulationResults("TestMedia.TestModels.ColdWater.Test3_res.mat",
  "ReferenceFiles/ColdWater/ColdWater_Test3_ref.mat","TestMedia.TestModels.ColdWater.Test3_diff.csv",0.01,0.013,
  {"medium1.baseProperties.d", "medium1.baseProperties.h", "medium2.baseProperties.d","medium2.baseProperties.h"});

// Result:
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "TestMedia.TestModels.ColdWater.Test3_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 200, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'TestMedia.TestModels.ColdWater.Test3', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | info    | The initialization finished successfully without homotopy method.
// stdout            | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// {"Files Equal!"}
// endResult
