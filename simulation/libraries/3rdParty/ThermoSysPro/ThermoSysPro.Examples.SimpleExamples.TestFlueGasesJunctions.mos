// name:     ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.mos [simulation checking]
// keywords: simulation ThermoSysPro.Examples.SimpleExamples
// status: correct
// teardown_command: rm -rf _ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions_* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.exe ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.cpp ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.makefile ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.libs ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.log ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.c ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.o output.log
//
// Simulation Results
// Modelica Standard Library
//

loadModel(Modelica, {"3.2.1"}); getErrorString();
loadModel(ThermoSysPro); getErrorString();

simulate(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions, stopTime=200); getErrorString();

res := OpenModelica.Scripting.compareSimulationResults(
"ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions_res.mat",
getEnvironmentVar("REFERENCEFILES")+"/ThermoSysPro/ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.mat",
"ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions_diff.csv",
0.01, 0.0001,
{"splitter2.Ce.Q", "splitter2.Cs1.Q", "splitter2.Cs2.Q",
 "mixer2_1.Ce1.Q", "mixer2_1.Ce2.Q", "mixer2_1.Cs.Q"});

// Result:
// true
// ""
// true
// "[ThermoSysPro 3.1/package.mo:132:31-134:169:writable] Notification: ThermoSysPro is not yet fully operational with OpenModelica.
// The authors suggest using Dymola for full benefit of the library, in particular if you are experiencing difficulties.
// The current operational status with OpenModelica of the included examples can be found at https://test.openmodelica.org/libraries/ThermoSysPro/BuildModelRecursive.html
// "
// record SimulationResult
//     resultFile = "ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 200.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "[ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:3:3-53:22:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [ThermoSysPro 3.1/FlueGases/Connectors.mo:55:3-105:21:writable] Warning: Connector .ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// Warning: Alias set with several free start values
//  * candidate: singularPressureLoss2.T(start = 290.0)
//  * candidate: singularPressureLoss2.C2.T(start = 300.0)
//  * candidate: sinkP1.C.T(start = 300.0)
//  * candidate: singularPressureLoss2.C1.T(start = 300.0)
//  * candidate: splitter2.Cs2.T(start = 300.0)
//  * candidate: splitter2.Cs1.T(start = 300.0)
//  * candidate: singularPressureLoss1.C1.T(start = 300.0)
//  * candidate: singularPressureLoss1.C2.T(start = 300.0)
//  * candidate: sinkP.C.T(start = 300.0)
//  * candidate: singularPressureLoss1.T(start = 290.0)
// => select value from singularPressureLoss2.T(start = 290.0) for variable: singularPressureLoss2.T
// Warning: Alias set with several free start values
//  * candidate: singularPressureLoss2.Q(start = 500.0)
//  * candidate: singularPressureLoss2.C1.Q(start = 100.0)
//  * candidate: splitter2.Cs2.Q(start = 100.0)
//  * candidate: singularPressureLoss2.C2.Q(start = 100.0)
//  * candidate: sinkP1.C.Q(start = 100.0)
// => select value from singularPressureLoss2.Q(start = 500.0) for variable: singularPressureLoss2.Q
// Warning: Alias set with several free start values
//  * candidate: singularPressureLoss1.Q(start = 500.0)
//  * candidate: singularPressureLoss1.C1.Q(start = 100.0)
//  * candidate: splitter2.Cs1.Q(start = 100.0)
//  * candidate: singularPressureLoss1.C2.Q(start = 100.0)
//  * candidate: sinkP.C.Q(start = 100.0)
// => select value from singularPressureLoss1.Q(start = 500.0) for variable: singularPressureLoss1.Q
// Warning: Alias set with several free start values
//  * candidate: splitter2.P(start = 1000000.0)
//  * candidate: splitter2.Cs2.P(start = 100000.0)
//  * candidate: singularPressureLoss2.C1.P(start = 100000.0)
//  * candidate: splitter2.Cs1.P(start = 100000.0)
//  * candidate: singularPressureLoss1.C1.P(start = 100000.0)
//  * candidate: splitter2.Ce.P(start = 100000.0)
//  * candidate: singularPressureLoss.C2.P(start = 100000.0)
// => select value from splitter2.P(start = 1000000.0) for variable: splitter2.P
// Warning: Alias set with several free start values
//  * candidate: singularPressureLoss5.Q(start = 500.0)
//  * candidate: singularPressureLoss5.C1.Q(start = 100.0)
//  * candidate: sourceP2.C.Q(start = 100.0)
//  * candidate: singularPressureLoss5.C2.Q(start = 100.0)
//  * candidate: mixer2_1.Ce2.Q(start = 100.0)
// => select value from singularPressureLoss5.Q(start = 500.0) for variable: singularPressureLoss5.Q
// Warning: Alias set with several free start values
//  * candidate: singularPressureLoss3.T(start = 290.0)
//  * candidate: singularPressureLoss3.C2.T(start = 300.0)
//  * candidate: sinkP2.C.T(start = 300.0)
//  * candidate: singularPressureLoss3.C1.T(start = 300.0)
//  * candidate: mixer2_1.Cs.T(start = 300.0)
// => select value from singularPressureLoss3.T(start = 290.0) for variable: singularPressureLoss3.T
// Warning: Alias set with several free start values
//  * candidate: mixer2_1.P(start = 1000000.0)
//  * candidate: mixer2_1.Cs.P(start = 100000.0)
//  * candidate: singularPressureLoss3.C1.P(start = 100000.0)
//  * candidate: mixer2_1.Ce2.P(start = 100000.0)
//  * candidate: singularPressureLoss5.C2.P(start = 100000.0)
//  * candidate: mixer2_1.Ce1.P(start = 100000.0)
//  * candidate: singularPressureLoss4.C2.P(start = 100000.0)
// => select value from mixer2_1.P(start = 1000000.0) for variable: mixer2_1.P
// Warning: Alias set with several free start values
//  * candidate: sourceP1.C.Q(start = 100.0)
//  * candidate: singularPressureLoss4.C1.Q(start = 100.0)
//  * candidate: singularPressureLoss4.Q(start = 500.0)
//  * candidate: singularPressureLoss4.C2.Q(start = 100.0)
//  * candidate: mixer2_1.Ce1.Q(start = 100.0)
// => select value from singularPressureLoss4.Q(start = 500.0) for variable: sourceP1.Q
// "
// {"Files Equal!"}
// endResult
