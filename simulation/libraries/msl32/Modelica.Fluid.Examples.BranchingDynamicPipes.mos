// name:     Modelica.Fluid.Examples.BranchingDynamicPipes
// keywords: simulation MSL Examples
// status: correct
//
// Simulation Results
// Modelica Standard Library
//

runScript("../common/ModelTestingDefaults.mos"); getErrorString();

modelTestingType := OpenModelicaModelTesting.Kind.VerifiedSimulation;
modelName := $TypeName(Modelica.Fluid.Examples.BranchingDynamicPipes);
compareVars :=
{
   "pipe1.mediums[1].p",
   "pipe1.mediums[1].Xi[1]",
   "pipe1.mediums[1].T",
   "pipe1.mediums[2].p",
   "pipe1.mediums[2].Xi[1]",
   "pipe1.mediums[2].T",
   "pipe1.mediums[3].p",
   "pipe1.mediums[3].Xi[1]",
   "pipe1.mediums[3].T",
   "pipe1.mediums[4].p",
   "pipe1.mediums[4].Xi[1]",
   "pipe1.mediums[4].T",
   "pipe1.mediums[5].p",
   "pipe1.mediums[5].Xi[1]",
   "pipe1.mediums[5].T",
   "pipe1.flowModel.m_flows[1]",
   "pipe1.flowModel.m_flows[2]",
   "pipe1.flowModel.m_flows[3]",
   "pipe1.flowModel.m_flows[4]",
   "pipe1.flowModel.m_flows[5]",
   "pipe2.mediums[1].p",
   "pipe2.mediums[1].Xi[1]",
   "pipe2.mediums[1].T",
   "pipe2.mediums[2].p",
   "pipe2.mediums[2].Xi[1]",
   "pipe2.mediums[2].T",
   "pipe2.mediums[3].p",
   "pipe2.mediums[3].Xi[1]",
   "pipe2.mediums[3].T",
   "pipe2.mediums[4].p",
   "pipe2.mediums[4].Xi[1]",
   "pipe2.mediums[4].T",
   "pipe2.mediums[5].Xi[1]",
   "pipe2.mediums[5].T",
   "pipe2.flowModel.m_flows[1]",
   "pipe2.flowModel.m_flows[2]",
   "pipe2.flowModel.m_flows[3]",
   "pipe2.flowModel.m_flows[4]",
   "pipe3.mediums[1].p",
   "pipe3.mediums[1].Xi[1]",
   "pipe3.mediums[1].T",
   "pipe3.mediums[2].p",
   "pipe3.mediums[2].Xi[1]",
   "pipe3.mediums[2].T",
   "pipe3.mediums[3].p",
   "pipe3.mediums[3].Xi[1]",
   "pipe3.mediums[3].T",
   "pipe3.mediums[4].p",
   "pipe3.mediums[4].Xi[1]",
   "pipe3.mediums[4].T",
   "pipe3.mediums[5].Xi[1]",
   "pipe3.mediums[5].T",
   "pipe3.flowModel.m_flows[1]",
   "pipe3.flowModel.m_flows[2]",
   "pipe3.flowModel.m_flows[3]",
   "pipe3.flowModel.m_flows[4]",
   "pipe3.flowModel.m_flows[5]",
   "pipe4.mediums[1].p",
   "pipe4.mediums[1].Xi[1]",
   "pipe4.mediums[1].T",
   "pipe4.mediums[2].p",
   "pipe4.mediums[2].Xi[1]",
   "pipe4.mediums[2].T",
   "pipe4.mediums[3].p",
   "pipe4.mediums[3].Xi[1]",
   "pipe4.mediums[3].T",
   "pipe4.mediums[4].p",
   "pipe4.mediums[4].Xi[1]",
   "pipe4.mediums[4].T",
   "pipe4.mediums[5].p",
   "pipe4.mediums[5].Xi[1]",
   "pipe4.mediums[5].T",
   "pipe4.flowModel.m_flows[1]",
   "pipe4.flowModel.m_flows[2]",
   "pipe4.flowModel.m_flows[3]",
   "pipe4.flowModel.m_flows[4]",
   "pipe4.flowModel.m_flows[5]"
};

runScript(modelTesting);getErrorString();

// Result:
// "true
// "
// ""
// OpenModelicaModelTesting.Kind.VerifiedSimulation
// Modelica.Fluid.Examples.BranchingDynamicPipes
// {"pipe1.mediums[1].p","pipe1.mediums[1].Xi[1]","pipe1.mediums[1].T","pipe1.mediums[2].p","pipe1.mediums[2].Xi[1]","pipe1.mediums[2].T","pipe1.mediums[3].p","pipe1.mediums[3].Xi[1]","pipe1.mediums[3].T","pipe1.mediums[4].p","pipe1.mediums[4].Xi[1]","pipe1.mediums[4].T","pipe1.mediums[5].p","pipe1.mediums[5].Xi[1]","pipe1.mediums[5].T","pipe1.flowModel.m_flows[1]","pipe1.flowModel.m_flows[2]","pipe1.flowModel.m_flows[3]","pipe1.flowModel.m_flows[4]","pipe1.flowModel.m_flows[5]","pipe2.mediums[1].p","pipe2.mediums[1].Xi[1]","pipe2.mediums[1].T","pipe2.mediums[2].p","pipe2.mediums[2].Xi[1]","pipe2.mediums[2].T","pipe2.mediums[3].p","pipe2.mediums[3].Xi[1]","pipe2.mediums[3].T","pipe2.mediums[4].p","pipe2.mediums[4].Xi[1]","pipe2.mediums[4].T","pipe2.mediums[5].Xi[1]","pipe2.mediums[5].T","pipe2.flowModel.m_flows[1]","pipe2.flowModel.m_flows[2]","pipe2.flowModel.m_flows[3]","pipe2.flowModel.m_flows[4]","pipe3.mediums[1].p","pipe3.mediums[1].Xi[1]","pipe3.mediums[1].T","pipe3.mediums[2].p","pipe3.mediums[2].Xi[1]","pipe3.mediums[2].T","pipe3.mediums[3].p","pipe3.mediums[3].Xi[1]","pipe3.mediums[3].T","pipe3.mediums[4].p","pipe3.mediums[4].Xi[1]","pipe3.mediums[4].T","pipe3.mediums[5].Xi[1]","pipe3.mediums[5].T","pipe3.flowModel.m_flows[1]","pipe3.flowModel.m_flows[2]","pipe3.flowModel.m_flows[3]","pipe3.flowModel.m_flows[4]","pipe3.flowModel.m_flows[5]","pipe4.mediums[1].p","pipe4.mediums[1].Xi[1]","pipe4.mediums[1].T","pipe4.mediums[2].p","pipe4.mediums[2].Xi[1]","pipe4.mediums[2].T","pipe4.mediums[3].p","pipe4.mediums[3].Xi[1]","pipe4.mediums[3].T","pipe4.mediums[4].p","pipe4.mediums[4].Xi[1]","pipe4.mediums[4].T","pipe4.mediums[5].p","pipe4.mediums[5].Xi[1]","pipe4.mediums[5].T","pipe4.flowModel.m_flows[1]","pipe4.flowModel.m_flows[2]","pipe4.flowModel.m_flows[3]","pipe4.flowModel.m_flows[4]","pipe4.flowModel.m_flows[5]"}
// Simulation options: startTime = 0.0, stopTime = 10.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Fluid.Examples.BranchingDynamicPipes', options = '', outputFormat = 'mat', variableFilter = 'time|pipe1.mediums.1..p|pipe1.mediums.1..Xi.1.|pipe1.mediums.1..T|pipe1.mediums.2..p|pipe1.mediums.2..Xi.1.|pipe1.mediums.2..T|pipe1.mediums.3..p|pipe1.mediums.3..Xi.1.|pipe1.mediums.3..T|pipe1.mediums.4..p|pipe1.mediums.4..Xi.1.|pipe1.mediums.4..T|pipe1.mediums.5..p|pipe1.mediums.5..Xi.1.|pipe1.mediums.5..T|pipe1.flowModel.m_flows.1.|pipe1.flowModel.m_flows.2.|pipe1.flowModel.m_flows.3.|pipe1.flowModel.m_flows.4.|pipe1.flowModel.m_flows.5.|pipe2.mediums.1..p|pipe2.mediums.1..Xi.1.|pipe2.mediums.1..T|pipe2.mediums.2..p|pipe2.mediums.2..Xi.1.|pipe2.mediums.2..T|pipe2.mediums.3..p|pipe2.mediums.3..Xi.1.|pipe2.mediums.3..T|pipe2.mediums.4..p|pipe2.mediums.4..Xi.1.|pipe2.mediums.4..T|pipe2.mediums.5..Xi.1.|pipe2.mediums.5..T|pipe2.flowModel.m_flows.1.|pipe2.flowModel.m_flows.2.|pipe2.flowModel.m_flows.3.|pipe2.flowModel.m_flows.4.|pipe3.mediums.1..p|pipe3.mediums.1..Xi.1.|pipe3.mediums.1..T|pipe3.mediums.2..p|pipe3.mediums.2..Xi.1.|pipe3.mediums.2..T|pipe3.mediums.3..p|pipe3.mediums.3..Xi.1.|pipe3.mediums.3..T|pipe3.mediums.4..p|pipe3.mediums.4..Xi.1.|pipe3.mediums.4..T|pipe3.mediums.5..Xi.1.|pipe3.mediums.5..T|pipe3.flowModel.m_flows.1.|pipe3.flowModel.m_flows.2.|pipe3.flowModel.m_flows.3.|pipe3.flowModel.m_flows.4.|pipe3.flowModel.m_flows.5.|pipe4.mediums.1..p|pipe4.mediums.1..Xi.1.|pipe4.mediums.1..T|pipe4.mediums.2..p|pipe4.mediums.2..Xi.1.|pipe4.mediums.2..T|pipe4.mediums.3..p|pipe4.mediums.3..Xi.1.|pipe4.mediums.3..T|pipe4.mediums.4..p|pipe4.mediums.4..Xi.1.|pipe4.mediums.4..T|pipe4.mediums.5..p|pipe4.mediums.5..Xi.1.|pipe4.mediums.5..T|pipe4.flowModel.m_flows.1.|pipe4.flowModel.m_flows.2.|pipe4.flowModel.m_flows.3.|pipe4.flowModel.m_flows.4.|pipe4.flowModel.m_flows.5.', cflags = '', simflags = ' -abortSlowSimulation -alarm=360 -emit_protected'
// Result file: Modelica.Fluid.Examples.BranchingDynamicPipes_res.mat
// Messages: assert            | debug   | Modelica.Fluid.Examples.BranchingDynamicPipes_functions.c:8308: Invalid root: (-0.0268723)^(1.5)
// assert            | debug   | Modelica.Fluid.Examples.BranchingDynamicPipes_functions.c:8308: Invalid root: (-0.0141954)^(1.5)
// assert            | debug   | Modelica.Fluid.Examples.BranchingDynamicPipes_functions.c:8308: Invalid root: (-0.00186659)^(1.5)
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -89184
// |                 | |       |   fa = f(x_min) - y_zero = 1598.31
// |                 | |       |   fb = f(x_max) - y_zero = 501163
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -87986.9
// |                 | |       |   fa = f(x_min) - y_zero = 401.16
// |                 | |       |   fb = f(x_max) - y_zero = 499966
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -170608
// |                 | |       |   fa = f(x_min) - y_zero = 83022.3
// |                 | |       |   fb = f(x_max) - y_zero = 582587
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -105607
// |                 | |       |   fa = f(x_min) - y_zero = 18021
// |                 | |       |   fb = f(x_max) - y_zero = 517585
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -93727.2
// |                 | |       |   fa = f(x_min) - y_zero = 6141.43
// |                 | |       |   fb = f(x_max) - y_zero = 505706
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -200613
// |                 | |       |   fa = f(x_min) - y_zero = 113027
// |                 | |       |   fb = f(x_max) - y_zero = 612591
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | The arguments x_min and x_max to OneNonLinearEquation.solve(..)
// |                 | |       | do not bracket the root of the single non-linear equation:
// |                 | |       |   x_min  = 190
// |                 | |       |   x_max  = 647
// |                 | |       |   y_zero = -124742
// |                 | |       |   fa = f(x_min) - y_zero = 37156.2
// |                 | |       |   fb = f(x_max) - y_zero = 536721
// |                 | |       | fa and fb must have opposite sign which is not the case
// assert            | debug   | Modelica.Fluid.Examples.BranchingDynamicPipes_functions.c:16012: Invalid root: (-2.03932)^(1.5)
// stdout            | warning | While solving non-linear system an assertion failed during initialization.
// |                 | |       | | The non-linear solver tries to solve the problem that could take some time.
// |                 | |       | | It could help to provide better start-values for the iteration variables.
// |                 | |       | | For more information simulate with -lv LOG_NLS
//
// Files Equal!
// "true
// "
// ""
// endResult
