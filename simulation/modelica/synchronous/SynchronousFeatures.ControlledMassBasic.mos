// name: SynchronousFeatures.ControlledMassBasic
// keywords: synchronous features
// status: correct

setCommandLineOptions("+d=dumpSynchronous"); getErrorString();

loadFile("SynchronousFeatures.mo"); getErrorString();

instantiateModel(SynchronousFeatures.ControlledMassBasic); getErrorString();
translateModel(SynchronousFeatures.ControlledMassBasic); getErrorString();

// Result:
// true
// ""
// true
// ""
// "class SynchronousFeatures.ControlledMassBasic \"Discrete-time State Variables\"
// parameter Real m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 1.0;
// parameter Real k(unit = \"N/m\") = 1.0;
// parameter Real d(unit = \"N.s/m\") = 0.1;
// Real x(quantity = \"Length\", unit = \"m\", start = 1.0, fixed = true) \"Position\";
// Real v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Velocity\";
// Real f(quantity = \"Force\", unit = \"N\") \"Force\";
// parameter Real KOuter = 10.0 \"Gain of position PI controller\";
// parameter Real KInner = 20.0 \"Gain of speed P controller\";
// parameter Real Ti = 10.0 \"Integral time for pos. PI controller\";
// parameter Real xref = 10.0 \"Position reference\";
// discrete Real xd;
// discrete Real eOuter;
// discrete Real intE(start = 0.0);
// discrete Real uOuter;
// discrete Real vd;
// discrete Real vref;
// discrete Real uInner(start = 0.0);
// equation
// xd = sample(x, Clock(0.01));
// eOuter = xref - xd;
// intE = previous(intE) + eOuter;
// uOuter = KOuter * (eOuter + intE / Ti);
// vd = sample(v, Clock());
// vref = uOuter;
// uInner = KInner * (vref - vd);
// f = hold(uInner);
// der(x) = v;
// m * der(v) = f + (-k) * x - d * v;
// end SynchronousFeatures.ControlledMassBasic;
// "
// ""
//
// ########################################
// base-clock partitioning (2 partitions)
// ########################################
//
//
// continuous time partition
// ========================================
//
// Variables (3)
// ========================================
// 1: f:VARIABLE(unit = "N" )  "Force".SynchronousFeatures.ControlledMassBasic, .SynchronousFeatures.Force type: Real []
// 2: v:VARIABLE(start = 0.0 unit = "m/s" fixed = true )  "Velocity".SynchronousFeatures.ControlledMassBasic, .SynchronousFeatures.Velocity$v type: Real []
// 3: x:VARIABLE(start = 1.0 unit = "m" fixed = true )  "Position".SynchronousFeatures.ControlledMassBasic, .SynchronousFeatures.Position$x type: Real []
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): f = $getPart(uInner)    [dynamic]
// 2/2 (1): der(x) = v    [dynamic]
// 3/3 (1): m * der(v) = f + (-k) * x - d * v    [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
//
//
// no matching
//
//
// clocked partition(1, 1/1, 0/1)
// ========================================
//
// Variables (7)
// ========================================
// 1: uInner:DISCRETE(start = 0.0 ) .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
// 2: vref:DISCRETE() .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
// 3: vd:DISCRETE() .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
// 4: uOuter:DISCRETE() .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
// 5: intE:DISCRETE(start = 0.0 ) .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
// 6: eOuter:DISCRETE() .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
// 7: xd:DISCRETE() .SynchronousFeatures.ControlledMassBasic, .Real type: Real []
//
//
// Equations (7, 7)
// ========================================
// 1/1 (1): uInner = KInner * (vref - vd)    [dynamic]
// 2/2 (1): vref = uOuter    [dynamic]
// 3/3 (1): vd = $getPart(v)    [dynamic]
// 4/4 (1): uOuter = KOuter * (eOuter + intE / Ti)    [dynamic]
// 5/5 (1): intE = previous(intE) + eOuter    [dynamic]
// 6/6 (1): eOuter = xref - xd    [dynamic]
// 7/7 (1): xd = $getPart(x)    [dynamic]
//
//
// Simple Equations (0, 0)
// ========================================
//
//
// State Sets
// ========================================
// 
// 
// no matching
//
//
//
// Base clocks (1)
// ========================================
// 1: Clock(0.01)
//
// true
// ""
// endResult
