// Name:     SingularPlanarLoop
// keywords: index reduction
// status:   correct
// teardown_command: rm -f *_init.xml *_records.c *.exe *.log *_res.mat *.c *.libs *.makefile *.o *.dll *.so *_functions.h *.h
//
//
//

loadModel(Modelica,{"3.2.1"});
loadFile("SingularPlanarLoop.mo");
simulate(SingularPlanarLoop);
getErrorString();

// Result:
// true
// true
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'SingularPlanarLoop', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Failed to build model: SingularPlanarLoop"
// end SimulationResult;
// "[Modelica 3.2.1/Mechanics/MultiBody/Joints.mo:321:7-321:60:writable] Error: Model is structurally singular, error found sorting equations 
//  92: bodyshape3.frame_a.R.T[2,1] = (revolute3.e[2] - revolute3.e[2] * cos(revolute3.phi)) * revolute3.e[1] - revolute3.e[3] * sin(revolute3.phi);
// 71: bodyshape3.frame_a.R.T[2,1] = revolute2.R_rel.T[2,1] * bodyshape1.frame_a.R.T[1,1] + revolute2.R_rel.T[2,2] * bodyshape1.frame_a.R.T[2,1] + revolute2.R_rel.T[2,3] * bodyshape1.frame_a.R.T[3,1];
// 9: revolute1.R_rel.T[1,1] = revolute1.e[1] ^ 2.0 + (1.0 - revolute1.e[1] ^ 2.0) * cos(revolute1.phi);
// 96: bodyshape3.frame_a.R.T[3,2] = (revolute3.e[3] - revolute3.e[3] * cos(revolute3.phi)) * revolute3.e[2] - revolute3.e[1] * sin(revolute3.phi);
// 93: bodyshape3.frame_a.R.T[2,2] = revolute3.e[2] ^ 2.0 + (1.0 - revolute3.e[2] ^ 2.0) * cos(revolute3.phi);
// 90: bodyshape3.frame_a.R.T[1,2] = (revolute3.e[1] - revolute3.e[1] * cos(revolute3.phi)) * revolute3.e[2] + revolute3.e[3] * sin(revolute3.phi);
// 72: bodyshape3.frame_a.R.T[2,2] = revolute2.R_rel.T[2,1] * bodyshape1.frame_a.R.T[1,2] + revolute2.R_rel.T[2,2] * bodyshape1.frame_a.R.T[2,2] + revolute2.R_rel.T[2,3] * bodyshape1.frame_a.R.T[3,2];
// 69: bodyshape3.frame_a.R.T[1,2] = revolute2.R_rel.T[1,1] * bodyshape1.frame_a.R.T[1,2] + revolute2.R_rel.T[1,2] * bodyshape1.frame_a.R.T[2,2] + revolute2.R_rel.T[1,3] * bodyshape1.frame_a.R.T[3,2];
// 75: bodyshape3.frame_a.R.T[3,2] = revolute2.R_rel.T[3,1] * bodyshape1.frame_a.R.T[1,2] + revolute2.R_rel.T[3,2] * bodyshape1.frame_a.R.T[2,2] + revolute2.R_rel.T[3,3] * bodyshape1.frame_a.R.T[3,2];
// 28: bodyshape1.frame_a.R.T[3,2] = revolute1.R_rel.T[3,1] * revolute1.frame_a.R.T[1,2] + revolute1.R_rel.T[3,2] * revolute1.frame_a.R.T[2,2] + revolute1.R_rel.T[3,3] * revolute1.frame_a.R.T[3,2];
// 2: 0.0 = atan2(-revolute1.frame_a.R.T[1,3], revolute1.frame_a.R.T[2,2]);
// 25: bodyshape1.frame_a.R.T[2,2] = revolute1.R_rel.T[2,1] * revolute1.frame_a.R.T[1,2] + revolute1.R_rel.T[2,2] * revolute1.frame_a.R.T[2,2] + revolute1.R_rel.T[2,3] * revolute1.frame_a.R.T[3,2];
// 11: revolute1.R_rel.T[1,3] = (revolute1.e[1] - revolute1.e[1] * cos(revolute1.phi)) * revolute1.e[3] - revolute1.e[2] * sin(revolute1.phi);
// 10: revolute1.R_rel.T[1,2] = (revolute1.e[1] - revolute1.e[1] * cos(revolute1.phi)) * revolute1.e[2] + revolute1.e[3] * sin(revolute1.phi);
// 22: bodyshape1.frame_a.R.T[1,2] = revolute1.R_rel.T[1,1] * revolute1.frame_a.R.T[1,2] + revolute1.R_rel.T[1,2] * revolute1.frame_a.R.T[2,2] + revolute1.R_rel.T[1,3] * revolute1.frame_a.R.T[3,2];
// 14: revolute1.R_rel.T[2,3] = (revolute1.e[2] - revolute1.e[2] * cos(revolute1.phi)) * revolute1.e[3] + revolute1.e[1] * sin(revolute1.phi);
// 13: revolute1.R_rel.T[2,2] = revolute1.e[2] ^ 2.0 + (1.0 - revolute1.e[2] ^ 2.0) * cos(revolute1.phi);
// 12: revolute1.R_rel.T[2,1] = (revolute1.e[2] - revolute1.e[2] * cos(revolute1.phi)) * revolute1.e[1] - revolute1.e[3] * sin(revolute1.phi);
// 3: 0.0 = atan2(revolute1.frame_a.R.T[1,2], revolute1.frame_a.R.T[3,3]);
// 23: bodyshape1.frame_a.R.T[1,3] = revolute1.R_rel.T[1,1] * revolute1.frame_a.R.T[1,3] + revolute1.R_rel.T[1,2] * revolute1.frame_a.R.T[2,3] + revolute1.R_rel.T[1,3] * revolute1.frame_a.R.T[3,3];
// 26: bodyshape1.frame_a.R.T[2,3] = revolute1.R_rel.T[2,1] * revolute1.frame_a.R.T[1,3] + revolute1.R_rel.T[2,2] * revolute1.frame_a.R.T[2,3] + revolute1.R_rel.T[2,3] * revolute1.frame_a.R.T[3,3];
// 17: revolute1.R_rel.T[3,3] = revolute1.e[3] ^ 2.0 + (1.0 - revolute1.e[3] ^ 2.0) * cos(revolute1.phi);
// 16: revolute1.R_rel.T[3,2] = (revolute1.e[3] - revolute1.e[3] * cos(revolute1.phi)) * revolute1.e[2] - revolute1.e[1] * sin(revolute1.phi);
// 15: revolute1.R_rel.T[3,1] = (revolute1.e[3] - revolute1.e[3] * cos(revolute1.phi)) * revolute1.e[1] + revolute1.e[2] * sin(revolute1.phi);
// 21: bodyshape1.frame_a.R.T[1,1] = revolute1.R_rel.T[1,1] * revolute1.frame_a.R.T[1,1] + revolute1.R_rel.T[1,2] * revolute1.frame_a.R.T[2,1] + revolute1.R_rel.T[1,3] * revolute1.frame_a.R.T[3,1];
// 24: bodyshape1.frame_a.R.T[2,1] = revolute1.R_rel.T[2,1] * revolute1.frame_a.R.T[1,1] + revolute1.R_rel.T[2,2] * revolute1.frame_a.R.T[2,1] + revolute1.R_rel.T[2,3] * revolute1.frame_a.R.T[3,1];
// 1: 0.0 = atan2(revolute1.frame_a.R.T[2,3], revolute1.frame_a.R.T[1,1]);
// 95: bodyshape3.frame_a.R.T[3,1] = (revolute3.e[3] - revolute3.e[3] * cos(revolute3.phi)) * revolute3.e[1] + revolute3.e[2] * sin(revolute3.phi);
// 27: bodyshape1.frame_a.R.T[3,1] = revolute1.R_rel.T[3,1] * revolute1.frame_a.R.T[1,1] + revolute1.R_rel.T[3,2] * revolute1.frame_a.R.T[2,1] + revolute1.R_rel.T[3,3] * revolute1.frame_a.R.T[3,1];
// 74: bodyshape3.frame_a.R.T[3,1] = revolute2.R_rel.T[3,1] * bodyshape1.frame_a.R.T[1,1] + revolute2.R_rel.T[3,2] * bodyshape1.frame_a.R.T[2,1] + revolute2.R_rel.T[3,3] * bodyshape1.frame_a.R.T[3,1];
// 68: bodyshape3.frame_a.R.T[1,1] = revolute2.R_rel.T[1,1] * bodyshape1.frame_a.R.T[1,1] + revolute2.R_rel.T[1,2] * bodyshape1.frame_a.R.T[2,1] + revolute2.R_rel.T[1,3] * bodyshape1.frame_a.R.T[3,1];
// 89: bodyshape3.frame_a.R.T[1,1] = revolute3.e[1] ^ 2.0 + (1.0 - revolute3.e[1] ^ 2.0) * cos(revolute3.phi);
// 97: bodyshape3.frame_a.R.T[3,3] = revolute3.e[3] ^ 2.0 + (1.0 - revolute3.e[3] ^ 2.0) * cos(revolute3.phi);
// 63: revolute2.R_rel.T[3,2] = (revolute2.e[3] - revolute2.e[3] * cos(revolute2.phi)) * revolute2.e[2] - revolute2.e[1] * sin(revolute2.phi);
// 62: revolute2.R_rel.T[3,1] = (revolute2.e[3] - revolute2.e[3] * cos(revolute2.phi)) * revolute2.e[1] + revolute2.e[2] * sin(revolute2.phi);
// 76: bodyshape3.frame_a.R.T[3,3] = revolute2.R_rel.T[3,1] * bodyshape1.frame_a.R.T[1,3] + revolute2.R_rel.T[3,2] * bodyshape1.frame_a.R.T[2,3] + revolute2.R_rel.T[3,3] * bodyshape1.frame_a.R.T[3,3];
// 64: revolute2.R_rel.T[3,3] = revolute2.e[3] ^ 2.0 + (1.0 - revolute2.e[3] ^ 2.0) * cos(revolute2.phi);
// 94: bodyshape3.frame_a.R.T[2,3] = (revolute3.e[2] - revolute3.e[2] * cos(revolute3.phi)) * revolute3.e[3] + revolute3.e[1] * sin(revolute3.phi);
// 61: revolute2.R_rel.T[2,3] = (revolute2.e[2] - revolute2.e[2] * cos(revolute2.phi)) * revolute2.e[3] + revolute2.e[1] * sin(revolute2.phi);
// 60: revolute2.R_rel.T[2,2] = revolute2.e[2] ^ 2.0 + (1.0 - revolute2.e[2] ^ 2.0) * cos(revolute2.phi);
// 59: revolute2.R_rel.T[2,1] = (revolute2.e[2] - revolute2.e[2] * cos(revolute2.phi)) * revolute2.e[1] - revolute2.e[3] * sin(revolute2.phi);
// 91: bodyshape3.frame_a.R.T[1,3] = (revolute3.e[1] - revolute3.e[1] * cos(revolute3.phi)) * revolute3.e[3] - revolute3.e[2] * sin(revolute3.phi);
// 58: revolute2.R_rel.T[1,3] = (revolute2.e[1] - revolute2.e[1] * cos(revolute2.phi)) * revolute2.e[3] - revolute2.e[2] * sin(revolute2.phi);
// 57: revolute2.R_rel.T[1,2] = (revolute2.e[1] - revolute2.e[1] * cos(revolute2.phi)) * revolute2.e[2] + revolute2.e[3] * sin(revolute2.phi);
// 56: revolute2.R_rel.T[1,1] = revolute2.e[1] ^ 2.0 + (1.0 - revolute2.e[1] ^ 2.0) * cos(revolute2.phi);
// 29: bodyshape1.frame_a.R.T[3,3] = revolute1.R_rel.T[3,1] * revolute1.frame_a.R.T[1,3] + revolute1.R_rel.T[3,2] * revolute1.frame_a.R.T[2,3] + revolute1.R_rel.T[3,3] * revolute1.frame_a.R.T[3,3];
// 73: bodyshape3.frame_a.R.T[2,3] = revolute2.R_rel.T[2,1] * bodyshape1.frame_a.R.T[1,3] + revolute2.R_rel.T[2,2] * bodyshape1.frame_a.R.T[2,3] + revolute2.R_rel.T[2,3] * bodyshape1.frame_a.R.T[3,3];
// 70: bodyshape3.frame_a.R.T[1,3] = revolute2.R_rel.T[1,1] * bodyshape1.frame_a.R.T[1,3] + revolute2.R_rel.T[1,2] * bodyshape1.frame_a.R.T[2,3] + revolute2.R_rel.T[1,3] * bodyshape1.frame_a.R.T[3,3];
// 98: bodyshape3.body.w_a[1] = Modelica.Mechanics.MultiBody.Frames.resolve2(Modelica.Mechanics.MultiBody.Frames.Orientation({{bodyshape3.frame_a.R.T[1,1], bodyshape3.frame_a.R.T[1,2], bodyshape3.frame_a.R.T[1,3]}, {bodyshape3.frame_a.R.T[2,1], bodyshape3.frame_a.R.T[2,2], bodyshape3.frame_a.R.T[2,3]}, {bodyshape3.frame_a.R.T[3,1], bodyshape3.frame_a.R.T[3,2], bodyshape3.frame_a.R.T[3,3]}}, {revolute3.R_rel.w[1], revolute3.R_rel.w[2], revolute3.R_rel.w[3]}), {0.0, 0.0, 0.0})[1] + revolute3.R_rel.w[1];
//  for variables 
//  bodyshape2.body.frame_a.t[1](43), bodyshape2.frame_b.t[1](54), revolute1.R_rel.T[1,3](135), revolute3.a(67), bodyshape2.body.frame_a.t[2](42), revolute1.frame_a.R.T[1,3](162), bodyshape2.frame_b.t[2](53), revolute2.frame_b.f[2](89), bodyshape2.frame_a.f[2](62), bodyshape1.frame_b.t[1](107), revolute1.frame_a.R.w[3](153), world.frame_b.f[2](124), revolute1.R_rel.T[2,2](133), revolute1.R_rel.T[2,1](134), revolute1.R_rel.T[1,2](136), revolute1.R_rel.T[3,2](130), revolute1.R_rel.T[3,1](131), revolute1.R_rel.T[2,3](132), revolute1.R_rel.T[3,3](129), revolute1.R_rel.w[3](126), revolute1.frame_a.R.T[2,1](161), bodyshape1.frame_a.R.T[1,1](119), world.frame_b.t[3](120), bodyshape3.frame_a.R.T[1,2](39), revolute1.R_rel.T[1,1](137), world.frame_b.f[1](125), revolute1.frame_a.R.w[2](154), revolute3.R_rel.w[2](65), bodyshape2.frame_a.f[1](63), revolute2.phi(84), revolute1.frame_a.R.T[1,2](163), bodyshape2.a_0[2](50), revolute1.phi(140), revolute1.w(139), bodyshape2.frame_a.f[3](61), revolute2.frame_b.f[3](88), revolute3.R_rel.w[1](66), revolute1.frame_a.R.T[3,1](158), bodyshape2.body.frame_a.f[3](44), revolute1.frame_a.R.w[1](155), revolute1.frame_a.R.T[3,3](156), revolute1.frame_a.R.T[3,2](157), bodyshape1.body.frame_a.f[1](102), revolute2.R_rel.T[2,3](76), bodyshape2.frame_b.f[3](55), bodyshape2.a_0[3](49), revolute2.R_rel.w[3](70), revolute2.R_rel.w[2](71), bodyshape1.body.frame_a.t[2](98)
// Error: Internal error Transformation Module PFPlusExt index Reduction Method Pantelides failed!
// "
// endResult
