// name: homotopy2
// keywords: initialization, homotopy
// status: correct
// cflags:
// teardown_command: rm -rf initializationTests.homotopy2* _initializationTests.homotopy2* output.log
//
//  case for homotopy
//

loadString("
within ;
package initializationTests
  model homotopy2
    Real x;
    Real y;
    Real z;
    
  equation
    homotopy(x^2, x) + 5 = z + 5;
    homotopy(y^2, -y) + 10 = z + 10;
    x + y + 9 = z;
  end homotopy2;
end initializationTests;
"); getErrorString();

setCommandLineOptions("--initOptModules+=inlineHomotopy -d=dumpSimCode"); getErrorString();
simulate(initializationTests.homotopy2, startTime=0.0, stopTime=0.0, simflags="-ils=2"); getErrorString();
res := OpenModelica.Scripting.readSimulationResult("initializationTests.homotopy2_res.mat", {time, x, y, z}, 2); getErrorString();

// Result:
// true
// ""
// true
// ""
//
//
// *********************
// * SimCode Equations *
// *********************
//
//
// allEquations: 
// ========================================
//
// 14:  (NONLINEAR) index:1 jacobian: true
// crefs: x
// 	8: z=5.0 + x ^ 2.0 - 5.0 [Real ]
// 	9: y=z - (9.0 + x) [Real ]
// 	10: z - y ^ 2.0 (RESIDUAL)
// 	Jacobian idx: 1
// 	11: z.$pDERNLSJac1.dummyVarNLSJac1=2.0 * x * xSeedNLSJac1 [Real ]
// 	12: y.$pDERNLSJac1.dummyVarNLSJac1=z.$pDERNLSJac1.dummyVarNLSJac1 - xSeedNLSJac1 [Real ]
// 	13: $res.1.$pDERNLSJac1.dummyVarNLSJac1=z.$pDERNLSJac1.dummyVarNLSJac1 + -2.0 * y * y.$pDERNLSJac1.dummyVarNLSJac1 [Real ]
// 	
//
// ========================================
//
//
//
// odeEquations (0 systems): 
// ========================================
// ========================================
//
//
//
// algebraicEquations (1 systems): 
// ========================================
// 14:  (NONLINEAR) index:1 jacobian: true
// crefs: x
// 	8: z=5.0 + x ^ 2.0 - 5.0 [Real ]
// 	9: y=z - (9.0 + x) [Real ]
// 	10: z - y ^ 2.0 (RESIDUAL)
// 	Jacobian idx: -1
// 	11: z.$pDERNLSJac1.dummyVarNLSJac1=2.0 * x * xSeedNLSJac1 [Real ]
// 	12: y.$pDERNLSJac1.dummyVarNLSJac1=z.$pDERNLSJac1.dummyVarNLSJac1 - xSeedNLSJac1 [Real ]
// 	13: $res.1.$pDERNLSJac1.dummyVarNLSJac1=z.$pDERNLSJac1.dummyVarNLSJac1 + -2.0 * y * y.$pDERNLSJac1.dummyVarNLSJac1 [Real ]
// 	
//
// ========================================
//
//
// clockPartitions (0 systems):
//
// ========================================
//
//
//
// initialEquations: (1)
// ========================================
// 7:  (NONLINEAR) index:0 jacobian: true
// crefs: y
// 	1: z=10.0 + y * (__HOM_LAMBDA - 1.0) + y ^ 2.0 * __HOM_LAMBDA - 10.0 [Real ]
// 	2: x=z - (9.0 + y) [Real ]
// 	3: x ^ 2.0 * __HOM_LAMBDA + x * (1.0 - __HOM_LAMBDA) - z (RESIDUAL)
// 	Jacobian idx: 0
// 	4: z.$pDERNLSJac0.dummyVarNLSJac0=ySeedNLSJac0 * (-1.0 + 2.0 * y * __HOM_LAMBDA + __HOM_LAMBDA) [Real ]
// 	5: x.$pDERNLSJac0.dummyVarNLSJac0=z.$pDERNLSJac0.dummyVarNLSJac0 - ySeedNLSJac0 [Real ]
// 	6: $res.1.$pDERNLSJac0.dummyVarNLSJac0=2.0 * x * x.$pDERNLSJac0.dummyVarNLSJac0 * __HOM_LAMBDA + x.$pDERNLSJac0.dummyVarNLSJac0 * (1.0 - __HOM_LAMBDA) - z.$pDERNLSJac0.dummyVarNLSJac0 [Real ]
// 	
//
// ========================================
//
//
//
// initialEquations_lambda0: (0)
// ========================================
//
// removedInitialEquations: 
// ========================================
//
// startValueEquations: 
// ========================================
//
// nominalValueEquations: 
// ========================================
//
// minValueEquations: 
// ========================================
//
// maxValueEquations: 
// ========================================
//
// parameterEquations: 
// ========================================
//
// removedEquations: 
// ========================================
//
// algorithmAndEquationAsserts: 
// ========================================
//
// equationsForZeroCrossings: 
// ========================================
//
// jacobianEquations: 
// ========================================
//
// jacobianMatrices: 
// ========================================
// 	Jacobian idx: 1
// 	11: z.$pDERNLSJac1.dummyVarNLSJac1=2.0 * x * xSeedNLSJac1 [Real ]
// 	12: y.$pDERNLSJac1.dummyVarNLSJac1=z.$pDERNLSJac1.dummyVarNLSJac1 - xSeedNLSJac1 [Real ]
// 	13: $res.1.$pDERNLSJac1.dummyVarNLSJac1=z.$pDERNLSJac1.dummyVarNLSJac1 + -2.0 * y * y.$pDERNLSJac1.dummyVarNLSJac1 [Real ]
// 	
// 	Jacobian idx: 0
// 	4: z.$pDERNLSJac0.dummyVarNLSJac0=ySeedNLSJac0 * (-1.0 + 2.0 * y * __HOM_LAMBDA + __HOM_LAMBDA) [Real ]
// 	5: x.$pDERNLSJac0.dummyVarNLSJac0=z.$pDERNLSJac0.dummyVarNLSJac0 - ySeedNLSJac0 [Real ]
// 	6: $res.1.$pDERNLSJac0.dummyVarNLSJac0=2.0 * x * x.$pDERNLSJac0.dummyVarNLSJac0 * __HOM_LAMBDA + x.$pDERNLSJac0.dummyVarNLSJac0 * (1.0 - __HOM_LAMBDA) - z.$pDERNLSJac0.dummyVarNLSJac0 [Real ]
// 	
// 	Jacobian idx: 5
// 	
// 	Jacobian idx: 4
// 	
// 	Jacobian idx: 3
// 	
// 	Jacobian idx: 2
// 	
//
// modelInfo: 
// ========================================
// algVars (3)
// ----------------------
// index: 0: x (no alias)  initial: 	no arrCref index:(1) [] 
// index: 1: y (no alias)  initial: 	no arrCref index:(2) [] 
// index: 2: z (no alias)  initial: 	no arrCref index:(3) [] 
// functions:
// -----------
//
// record SimulationResult
//     resultFile = "initializationTests.homotopy2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'initializationTests.homotopy2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ils=2'",
//     messages = ""
// end SimulationResult;
// "Warning: There are iteration variables with default zero start attribute. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// {{0.0,0.0},{3.0,3.0},{-3.0,-3.0},{9.0,9.0}}
// ""
// endResult
