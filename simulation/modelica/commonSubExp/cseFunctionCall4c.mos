// name: cseFunctionCall4c
// keywords: cse
// status: correct

loadString("
package CSE
  record R
    Real r1[3];
  end R;

  function f3
    input Real x1;
    input Real x2;
    output R y;
  algorithm
    y.r1[1] := 1.0;
    y.r1[2] := 2.0;
    y.r1[3] := 3.0;
  end f3;

  model FunctionCallTest4
    R y;
    R cse;
  equation
    y = cse;
    cse = f3(time, sin(time));
  end FunctionCallTest4;

end CSE;
"); getErrorString();

setDebugFlags("dumpCSE"); getErrorString();
setCommandLineOptions("--postOptModules+=wrapFunctionCalls"); getErrorString();
simulate(CSE.FunctionCallTest4); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
//
//
//
// ###############################################################
// Final Results
// ###############################################################
//
// ########### Updated Variable List (simulation) (7)
// ========================================
// 1: y.r1[3]:VARIABLE()  type: Real  [3]
// 2: y.r1[2]:VARIABLE()  type: Real  [3]
// 3: y.r1[1]:VARIABLE()  type: Real  [3]
// 4: $cse2:VARIABLE()  type: Real  unreplaceable
// 5: $cse1.r1[1]:VARIABLE()  type: Real  [3] unreplaceable
// 6: $cse1.r1[2]:VARIABLE()  type: Real  [3] unreplaceable
// 7: $cse1.r1[3]:VARIABLE()  type: Real  [3] unreplaceable
//
//
// ########### Updated Equation List (simulation) (3, 7)
// ========================================
// 1/1 (3): CSE.R({y.r1[1], y.r1[2], y.r1[3]}) = $cse1   [dynamic]
// 2/4 (1): $cse2 = sin(time)   [unknown]
// 3/5 (3): $cse1 = CSE.f3(time, $cse2)   [unknown]
//
//
// ########### Updated globalKnownVars (simulation) (0)
// ========================================
//
//
// ########### CSE Replacements (2/45)
// ========================================
// 1: $cse1 - CSE.f3(time, $cse2) - {}
// 2: $cse2 - sin(time) - {}
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest4_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest4', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | info    | The initialization finished successfully without homotopy method.
// stdout            | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
