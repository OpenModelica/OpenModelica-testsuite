// name:      Tearing17-omc
// keywords:  tearing
// status:    correct
// cflags: 	 +d=backenddaeinfo


loadFile("Tearing17.mo"); getErrorString();

setDebugFlags("backenddaeinfo"); getErrorString();
setTearingMethod("omcTearing"); getErrorString();
simulate(Tearing17); getErrorString();

val(u0,0.0); getErrorString();
val(u1,0.0); getErrorString();
val(u2,0.0); getErrorString();
val(u3,0.0); getErrorString();
val(u4,0.0); getErrorString();
val(u5,0.0); getErrorString();
val(i1,0.0); getErrorString();
val(i2,0.0); getErrorString();
val(i3,0.0); getErrorString();
val(i4,0.0); getErrorString();
val(i5,0.0); getErrorString();

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Tearing17_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Tearing17', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Error: Solving non-linear system failed.
// For more information please use -lv LOG_NLS.
// stdout            | warning | Integrator attempt to handle a problem with a called assert.
// Error: Solving non-linear system failed.
// For more information please use -lv LOG_NLS.
// stdout            | warning | Integrator attempt to handle a problem with a called assert.
// Error: Solving non-linear system failed.
// For more information please use -lv LOG_NLS.
// stdout            | warning | Integrator attempt to handle a problem with a called assert.
// "
// end SimulationResult; getErrorString();
// "Notification: Model statistics after passing the front-end and creating the data structures used by the back-end:
//  * Number of equations: 11
//  * Number of variables: 11
// Notification: Model statistics after passing the back-end:
//  * Number of independent subsystems: 1
//  * Number of states: 0 ('+d=stateselection' for list of states)
//  * Number of discrete variables: 0 ('+d=discreteinfo' for list of discrete vars)
//  * Number of discrete states: 0 ('+d=discreteinfo' for list of discrete states)
//  * Top-level inputs: 0
// Notification: Strong component statistics (2):
//  * Single equations (assignments): 1
//  * Array equations: 0
//  * Algorithm blocks: 0
//  * Record equations: 0
//  * When equations: 0
//  * If-equations: 0
//  * Equation systems (linear and non-linear blocks): 0
//  * Torn equation systems: 1
//  * Mixed (continuous/discrete) equation systems: 0
// Notification: Torn system details:
//  * Linear torn systems: 0
//  * Non-linear torn systems: 1 {2 8}
// Warning: There are iteration variables with default zero start attribute. For more information set +d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("+d=initialization").
// "
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// endResult
