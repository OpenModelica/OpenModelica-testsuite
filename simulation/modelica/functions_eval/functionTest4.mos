// name:      functionTest4
// keywords:  evalConstFunc
// status:    correct
//


loadFile("PartEvalFunc.mo"); getErrorString();
setDebugFlags("dumpeqninorder");getErrorString();
simulate(PartEvalFunc.functionTest4);getErrorString();
res := OpenModelica.Scripting.compareSimulationResults("PartEvalFunc.functionTest4_res.mat",
  "ReferenceFiles/functionTest4.mat",
  "PartEvalFunc.functionTest4_diff.csv", 0.01, 0.0001,
  {"a","b","c","d","r1.x","r1.y","r2.x","r2.y"}); 
getErrorString();
// Result:
// true
// ""
// true
// ""
//
// indxdae: eqns in order
// ========================================
// SingleEquation: 4
// 1: a:VARIABLE() .PartEvalFunc.functionTest4, .Real type: Real
// 1/1 (1): a = time   [dynamic]
//
// SingleEquation: 3
// 1: r2.y:VARIABLE() .PartEvalFunc.functionTest4, .PartEvalFunc.record1, .Real type: Real
// 1/1 (1): r2.y = PartEvalFunc.recfunc_eval1(PartEvalFunc.record1(2.0, a), a)   [dynamic]
//
// SingleEquation: 2
// 1: c:VARIABLE() .PartEvalFunc.functionTest4, .Real type: Real
// 1/1 (1): c = r2.y + a   [dynamic]
//
// SingleEquation: 1
// 1: d:STATE(1,c)() .PartEvalFunc.functionTest4, .Real type: Real
// 1/1 (1): c = der(d)   [dynamic]
//
//
// record SimulationResult
//     resultFile = "PartEvalFunc.functionTest4_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PartEvalFunc.functionTest4', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// {"Files Equal!"}
// ""
// endResult
