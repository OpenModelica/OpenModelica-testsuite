// name: problem10
// status: correct
// teardown_command: rm -f nonlinear_system.problem10* _nonlinear_system.problem10* output.log

loadFile("nlsTestPackage.mo"); getErrorString();
setDebugFlags("NLSanalyticJacobian"); getErrorString();

simulate(nonlinear_system.problem10, stopTime=0); getErrorString();

val(x, 0);
val(y, 0);

getErrorString();

// Result:
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "nonlinear_system.problem10_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'nonlinear_system.problem10', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// stdout            | warning | While solving non-linear system an assertion failed during initialization.
// |                 | |       | | The non-linear solver tries to solve the problem that could take some time.
// |                 | |       | | It could help to provide better start-values for the iteration variables.
// |                 | |       | | For more information simulate with -lv LOG_NLS
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// stdout            | info    | The initialization finished successfully without homotopy method.
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// stdout            | warning | While solving non-linear system an assertion failed during initialization.
// |                 | |       | | The non-linear solver tries to solve the problem that could take some time.
// |                 | |       | | It could help to provide better start-values for the iteration variables.
// |                 | |       | | For more information simulate with -lv LOG_NLS
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// stdout            | warning | While solving non-linear system an assertion failed at time 0.
// |                 | |       | | The non-linear solver tries to solve the problem that could take some time.
// |                 | |       | | It could help to provide better start-values for the iteration variables.
// |                 | |       | | For more information simulate with -lv LOG_NLS
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// assert            | debug   | division leads to inf or nan at time 0, (a=inf) / (b=0.001), where divisor b is: yn
// stdout            | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 100000.0
// 0.001
// ""
// endResult
