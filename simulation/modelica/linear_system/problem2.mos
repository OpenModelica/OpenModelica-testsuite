// name: problem2
// keywords: linear system of equations
// status: correct
// teardown_command: rm -rf linear_system.problem2* output.log
// 
// Solving of a linear system of equations

loadFile("linearTestPackage.mo"); getErrorString();

simulate(linear_system.problem2);
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


simulate(linear_system.problem2, simflags="-ls lapack");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


simulate(linear_system.problem2, simflags="-ls umfpack");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


simulate(linear_system.problem2, simflags="-ls lis");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


setCommandLineOptions("+d=dumpRecursiveTearing +recursiveTearing=1");

simulate(linear_system.problem2, simflags="-ls lis -lv LOG_LS");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


setCommandLineOptions("--disableLinearTearing");

simulate(linear_system.problem2);
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


simulate(linear_system.problem2, simflags="-ls lapack");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


simulate(linear_system.problem2, simflags="-ls umfpack");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);


simulate(linear_system.problem2, simflags="-ls lis");
getErrorString();

val(u3, 0.0);
val(u3, 1.0);
val(i2, 0.0);
val(i2, 1.0);

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// 0.0
// 2.804903282692988
// 0.0
// 0.2804903282692989
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls lapack'",
//     messages = ""
// end SimulationResult;
// ""
// 0.0
// 2.804903282692988
// 0.0
// 0.2804903282692989
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls umfpack'",
//     messages = ""
// end SimulationResult;
// ""
// 0.0
// 2.804903282692988
// 0.0
// 0.2804903282692989
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls lis'",
//     messages = ""
// end SimulationResult;
// ""
// 8.881784197001252e-16
// 2.804903282692988
// 8.881784197001253e-17
// 0.2804903282692989
// true
// INeqn => i2 = u2 / r2[1]
// INeqn => i3 = u2 / r3[2]
// INeqn => u1 = u0 - u2[3]
// INeqn => i1 = i3 + i2[4]
// INres => u1 - r1 * i1 = 0.0[1]
// OUTeqn => i2 = u2 / r2[0]
// OUTeqn => i3 = u2 / r3[1]
// OUTeqn => u1 = u0 - u2[2]
// OUTeqn => i1 = __OMC__1$RTEARINGF * u2[3]
// OUTres => __OMC__2$RTEARINGF * u2 = -u0[0]
// ****************
// TearVar: u2[0]
// ****************
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls lis -lv LOG_LS'",
//     messages = "LOG_LS            | info    | Start solving Linear System 11 (size 2) at time 0 with Lis Solver
// LOG_LS            | info    | ###  0.000023  time to set Matrix A and vector b.
// LOG_LS            | info    | Solve System: 0.000035
// "
// end SimulationResult;
// ""
// 0.0
// 2.804903282692988
// 0.0
// 0.2804903282692989
// true
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// 0.0
// 2.804903282692988
// -0.0
// 0.2804903282692989
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls lapack'",
//     messages = ""
// end SimulationResult;
// ""
// 0.0
// 2.804903282692988
// -0.0
// 0.2804903282692989
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls umfpack'",
//     messages = ""
// end SimulationResult;
// ""
// 0.0
// 2.804903282692989
// 0.0
// 0.2804903282692989
// record SimulationResult
//     resultFile = "linear_system.problem2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_system.problem2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-ls lis'",
//     messages = ""
// end SimulationResult;
// ""
// -2.817354240111432e-27
// 2.783634542322879
// -9.720195818495717e-28
// 0.2818936215284423
// endResult
